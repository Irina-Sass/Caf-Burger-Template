!function(e){var t={};function i(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(s,a,function(t){return e[t]}.bind(null,a));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=107)}([function(e,t,i){(function(t){var i=function(e){return e&&e.Math==Math&&e};e.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof t&&t)||Function("return this")()}).call(this,i(60))},function(e,t,i){var s=i(0),a=i(14),n=i(38),r=i(72),o=s.Symbol,l=a("wks");e.exports=function(e){return l[e]||(l[e]=r&&o[e]||(r?o:n)("Symbol."+e))}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,i){var s=i(3);e.exports=function(e){if(!s(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){var i={}.hasOwnProperty;e.exports=function(e,t){return i.call(e,t)}},function(e,t,i){var s=i(0),a=i(23).f,n=i(7),r=i(13),o=i(27),l=i(64),d=i(40);e.exports=function(e,t){var i,c,u,p,h,f=e.target,m=e.global,v=e.stat;if(i=m?s:v?s[f]||o(f,{}):(s[f]||{}).prototype)for(c in t){if(p=t[c],u=e.noTargetGet?(h=a(i,c))&&h.value:i[c],!d(m?c:f+(v?".":"#")+c,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&n(p,"sham",!0),r(i,c,p,e)}}},function(e,t,i){var s=i(8),a=i(10),n=i(16);e.exports=s?function(e,t,i){return a.f(e,t,n(1,i))}:function(e,t,i){return e[t]=i,e}},function(e,t,i){var s=i(2);e.exports=!s((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){var i={}.toString;e.exports=function(e){return i.call(e).slice(8,-1)}},function(e,t,i){var s=i(8),a=i(36),n=i(4),r=i(25),o=Object.defineProperty;t.f=s?o:function(e,t,i){if(n(e),t=r(t,!0),n(i),a)try{return o(e,t,i)}catch(e){}if("get"in i||"set"in i)throw TypeError("Accessors not supported");return"value"in i&&(e[t]=i.value),e}},function(e,t,i){var s=i(18),a=Math.min;e.exports=function(e){return e>0?a(s(e),9007199254740991):0}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,i){var s=i(0),a=i(14),n=i(7),r=i(5),o=i(27),l=i(37),d=i(28),c=d.get,u=d.enforce,p=String(l).split("toString");a("inspectSource",(function(e){return l.call(e)})),(e.exports=function(e,t,i,a){var l=!!a&&!!a.unsafe,d=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet;"function"==typeof i&&("string"!=typeof t||r(i,"name")||n(i,"name",t),u(i).source=p.join("string"==typeof t?t:"")),e!==s?(l?!c&&e[t]&&(d=!0):delete e[t],d?e[t]=i:n(e,t,i)):d?e[t]=i:o(t,i)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l.call(this)}))},function(e,t,i){var s=i(17),a=i(62);(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.4.1",mode:s?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,i){var s=i(66),a=i(0),n=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?n(s[e])||n(a[e]):s[e]&&s[e][t]||a[e]&&a[e][t]}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports=!1},function(e,t){var i=Math.ceil,s=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?s:i)(e)}},function(e,t,i){var s=i(20);e.exports=function(e,t,i){if(s(e),void 0===t)return e;switch(i){case 0:return function(){return e.call(t)};case 1:return function(i){return e.call(t,i)};case 2:return function(i,s){return e.call(t,i,s)};case 3:return function(i,s,a){return e.call(t,i,s,a)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,i){var s=i(12);e.exports=function(e){return Object(s(e))}},function(e,t){e.exports={}},function(e,t,i){var s=i(8),a=i(61),n=i(16),r=i(24),o=i(25),l=i(5),d=i(36),c=Object.getOwnPropertyDescriptor;t.f=s?c:function(e,t){if(e=r(e),t=o(t,!0),d)try{return c(e,t)}catch(e){}if(l(e,t))return n(!a.f.call(e,t),e[t])}},function(e,t,i){var s=i(35),a=i(12);e.exports=function(e){return s(a(e))}},function(e,t,i){var s=i(3);e.exports=function(e,t){if(!s(e))return e;var i,a;if(t&&"function"==typeof(i=e.toString)&&!s(a=i.call(e)))return a;if("function"==typeof(i=e.valueOf)&&!s(a=i.call(e)))return a;if(!t&&"function"==typeof(i=e.toString)&&!s(a=i.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,t,i){var s=i(0),a=i(3),n=s.document,r=a(n)&&a(n.createElement);e.exports=function(e){return r?n.createElement(e):{}}},function(e,t,i){var s=i(0),a=i(7);e.exports=function(e,t){try{a(s,e,t)}catch(i){s[e]=t}return t}},function(e,t,i){var s,a,n,r=i(63),o=i(0),l=i(3),d=i(7),c=i(5),u=i(29),p=i(30),h=o.WeakMap;if(r){var f=new h,m=f.get,v=f.has,g=f.set;s=function(e,t){return g.call(f,e,t),t},a=function(e){return m.call(f,e)||{}},n=function(e){return v.call(f,e)}}else{var b=u("state");p[b]=!0,s=function(e,t){return d(e,b,t),t},a=function(e){return c(e,b)?e[b]:{}},n=function(e){return c(e,b)}}e.exports={set:s,get:a,has:n,enforce:function(e){return n(e)?a(e):s(e,{})},getterFor:function(e){return function(t){var i;if(!l(t)||(i=a(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return i}}}},function(e,t,i){var s=i(14),a=i(38),n=s("keys");e.exports=function(e){return n[e]||(n[e]=a(e))}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,i){var s,a,n=i(0),r=i(33),o=n.process,l=o&&o.versions,d=l&&l.v8;d?a=(s=d.split("."))[0]+s[1]:r&&(!(s=r.match(/Edge\/(\d+)/))||s[1]>=74)&&(s=r.match(/Chrome\/(\d+)/))&&(a=s[1]),e.exports=a&&+a},function(e,t,i){var s=i(15);e.exports=s("navigator","userAgent")||""},function(e,t,i){var s=i(10).f,a=i(5),n=i(1)("toStringTag");e.exports=function(e,t,i){e&&!a(e=i?e:e.prototype,n)&&s(e,n,{configurable:!0,value:t})}},function(e,t,i){var s=i(2),a=i(9),n="".split;e.exports=s((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?n.call(e,""):Object(e)}:Object},function(e,t,i){var s=i(8),a=i(2),n=i(26);e.exports=!s&&!a((function(){return 7!=Object.defineProperty(n("div"),"a",{get:function(){return 7}}).a}))},function(e,t,i){var s=i(14);e.exports=s("native-function-to-string",Function.toString)},function(e,t){var i=0,s=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++i+s).toString(36)}},function(e,t,i){var s=i(5),a=i(24),n=i(68).indexOf,r=i(30);e.exports=function(e,t){var i,o=a(e),l=0,d=[];for(i in o)!s(r,i)&&s(o,i)&&d.push(i);for(;t.length>l;)s(o,i=t[l++])&&(~n(d,i)||d.push(i));return d}},function(e,t,i){var s=i(2),a=/#|\.prototype\./,n=function(e,t){var i=o[r(e)];return i==d||i!=l&&("function"==typeof t?s(t):!!t)},r=n.normalize=function(e){return String(e).replace(a,".").toLowerCase()},o=n.data={},l=n.NATIVE="N",d=n.POLYFILL="P";e.exports=n},function(e,t,i){var s=i(4);e.exports=function(e,t,i,a){try{return a?t(s(i)[0],i[1]):t(i)}catch(t){var n=e.return;throw void 0!==n&&s(n.call(e)),t}}},function(e,t,i){var s=i(1),a=i(22),n=s("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||r[n]===e)}},function(e,t,i){"use strict";var s=i(25),a=i(10),n=i(16);e.exports=function(e,t,i){var r=s(t);r in e?a.f(e,r,n(0,i)):e[r]=i}},function(e,t,i){var s=i(45),a=i(22),n=i(1)("iterator");e.exports=function(e){if(null!=e)return e[n]||e["@@iterator"]||a[s(e)]}},function(e,t,i){var s=i(9),a=i(1)("toStringTag"),n="Arguments"==s(function(){return arguments}());e.exports=function(e){var t,i,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(i=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?i:n?s(t):"Object"==(r=s(t))&&"function"==typeof t.callee?"Arguments":r}},function(e,t,i){var s=i(1)("iterator"),a=!1;try{var n=0,r={next:function(){return{done:!!n++}},return:function(){a=!0}};r[s]=function(){return this},Array.from(r,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var i=!1;try{var n={};n[s]=function(){return{next:function(){return{done:i=!0}}}},e(n)}catch(e){}return i}},function(e,t,i){var s=i(19),a=i(35),n=i(21),r=i(11),o=i(48),l=[].push,d=function(e){var t=1==e,i=2==e,d=3==e,c=4==e,u=6==e,p=5==e||u;return function(h,f,m,v){for(var g,b,y=n(h),w=a(y),x=s(f,m,3),E=r(w.length),T=0,S=v||o,C=t?S(h,E):i?S(h,0):void 0;E>T;T++)if((p||T in w)&&(b=x(g=w[T],T,y),e))if(t)C[T]=b;else if(b)switch(e){case 3:return!0;case 5:return g;case 6:return T;case 2:l.call(C,g)}else if(c)return!1;return u?-1:d||c?c:C}};e.exports={forEach:d(0),map:d(1),filter:d(2),some:d(3),every:d(4),find:d(5),findIndex:d(6)}},function(e,t,i){var s=i(3),a=i(49),n=i(1)("species");e.exports=function(e,t){var i;return a(e)&&("function"!=typeof(i=e.constructor)||i!==Array&&!a(i.prototype)?s(i)&&null===(i=i[n])&&(i=void 0):i=void 0),new(void 0===i?Array:i)(0===t?0:t)}},function(e,t,i){var s=i(9);e.exports=Array.isArray||function(e){return"Array"==s(e)}},function(e,t,i){var s=i(2),a=i(1),n=i(32),r=a("species");e.exports=function(e){return n>=51||!s((function(){var t=[];return(t.constructor={})[r]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,i){"use strict";var s,a,n,r=i(52),o=i(7),l=i(5),d=i(1),c=i(17),u=d("iterator"),p=!1;[].keys&&("next"in(n=[].keys())?(a=r(r(n)))!==Object.prototype&&(s=a):p=!0),null==s&&(s={}),c||l(s,u)||o(s,u,(function(){return this})),e.exports={IteratorPrototype:s,BUGGY_SAFARI_ITERATORS:p}},function(e,t,i){var s=i(5),a=i(21),n=i(29),r=i(78),o=n("IE_PROTO"),l=Object.prototype;e.exports=r?Object.getPrototypeOf:function(e){return e=a(e),s(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,i){var s=i(15);e.exports=s("document","documentElement")},function(e,t,i){var s,a,n,r=i(0),o=i(2),l=i(9),d=i(19),c=i(53),u=i(26),p=i(55),h=r.location,f=r.setImmediate,m=r.clearImmediate,v=r.process,g=r.MessageChannel,b=r.Dispatch,y=0,w={},x=function(e){if(w.hasOwnProperty(e)){var t=w[e];delete w[e],t()}},E=function(e){return function(){x(e)}},T=function(e){x(e.data)},S=function(e){r.postMessage(e+"",h.protocol+"//"+h.host)};f&&m||(f=function(e){for(var t=[],i=1;arguments.length>i;)t.push(arguments[i++]);return w[++y]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},s(y),y},m=function(e){delete w[e]},"process"==l(v)?s=function(e){v.nextTick(E(e))}:b&&b.now?s=function(e){b.now(E(e))}:g&&!p?(n=(a=new g).port2,a.port1.onmessage=T,s=d(n.postMessage,n,1)):!r.addEventListener||"function"!=typeof postMessage||r.importScripts||o(S)?s="onreadystatechange"in u("script")?function(e){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),x(e)}}:function(e){setTimeout(E(e),0)}:(s=S,r.addEventListener("message",T,!1))),e.exports={set:f,clear:m}},function(e,t,i){var s=i(33);e.exports=/(iphone|ipod|ipad).*applewebkit/i.test(s)},function(e,t,i){"use strict";var s=i(20),a=function(e){var t,i;this.promise=new e((function(e,s){if(void 0!==t||void 0!==i)throw TypeError("Bad Promise constructor");t=e,i=s})),this.resolve=s(t),this.reject=s(i)};e.exports.f=function(e){return new a(e)}},function(e,t,i){"use strict";var s=i(47).forEach,a=i(104);e.exports=a("forEach")?function(e){return s(this,e,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(e,t,i){e.exports=function(){"use strict";return function(e){var t={},i=window,s=0,a=null,n=null,r=null,o=null,l=null,d={},c=!1,u=!1,p=!1,h=null,f=null,m=null,v=null,g=null,b=!1,y=!1,w=[],x=[],E=0,T={gallery:[],slider:null,sliderElements:[],elementsLength:0,currentIndex:0,x:0},S={},C=null,M=null,$={image:{checkSupport:function(e){return!e.hasAttribute("data-type")&&e.href.match(/\.(png|jpe?g|tiff|tif|gif|bmp|webp|svg|ico)(\?.*)?$/i)},init:function(e,i){var a=document.createElement("figure"),n=document.createElement("figcaption"),r=document.createElement("img"),o=e.querySelector("img"),l=document.createElement("div");a.style.opacity="0",o&&(r.alt=o.alt||""),r.setAttribute("src",""),r.setAttribute("data-src",e.href),a.appendChild(r),t.captions&&("self"===t.captionsSelector&&e.getAttribute(t.captionAttribute)?n.textContent=e.getAttribute(t.captionAttribute):"img"===t.captionsSelector&&o&&o.getAttribute(t.captionAttribute)&&(n.textContent=o.getAttribute(t.captionAttribute)),n.textContent&&(n.id="tobii-figcaption-"+s,a.appendChild(n),r.setAttribute("aria-labelledby",n.id),++s)),i.appendChild(a),l.className="tobii-loader",l.setAttribute("role","progressbar"),l.setAttribute("aria-label",t.loadingIndicatorLabel),i.appendChild(l),i.setAttribute("data-type","image")},onPreload:function(e){$.image.onLoad(e)},onLoad:function(e){var t=e.querySelector("img");if(t.hasAttribute("data-src")){var i=e.querySelector("figure"),s=e.querySelector(".tobii-loader");t.onload=function(){e.removeChild(s),i.style.opacity="1"},t.setAttribute("src",t.getAttribute("data-src")),t.removeAttribute("data-src")}},onLeave:function(e){},onCleanup:function(e){}},html:{checkSupport:function(e){return ne(e,"html")},init:function(e,t){var i=e.hasAttribute("href")?e.getAttribute("href"):e.getAttribute("data-target"),s=document.querySelector(i);if(!s)throw new Error("Ups, I can't find the target "+i+".");t.appendChild(s),t.setAttribute("data-type","html")},onPreload:function(e){},onLoad:function(e){var i=e.querySelector("video");i&&(i.hasAttribute("data-time")&&i.readyState>0&&(i.currentTime=i.getAttribute("data-time")),t.autoplayVideo&&i.play())},onLeave:function(e){var t=e.querySelector("video");t&&(t.paused||t.pause(),t.readyState>0&&t.setAttribute("data-time",t.currentTime))},onCleanup:function(e){var t=e.querySelector("video");if(t&&t.readyState>0&&t.readyState<3&&t.duration!==t.currentTime){var i=t.cloneNode(!0);re(t),t.load(),t.parentNode.removeChild(t),e.appendChild(i)}}},iframe:{checkSupport:function(e){return ne(e,"iframe")},init:function(e,t){var i=document.createElement("iframe"),s=e.hasAttribute("href")?e.getAttribute("href"):e.getAttribute("data-target");i.setAttribute("frameborder","0"),i.setAttribute("src",""),i.setAttribute("data-src",s),e.getAttribute("data-width")&&(i.style.maxWidth=e.getAttribute("data-width")+"px"),e.getAttribute("data-height")&&(i.style.maxHeight=e.getAttribute("data-height")+"px"),t.appendChild(i),t.setAttribute("data-type","iframe")},onPreload:function(e){},onLoad:function(e){var t=e.querySelector("iframe");t.setAttribute("src",t.getAttribute("data-src"))},onLeave:function(e){},onCleanup:function(e){}},youtube:{checkSupport:function(e){return ne(e,"youtube")},init:function(e,t){var i=document.createElement("div");t.appendChild(i),x[E]=new window.YT.Player(i,{host:"https://www.youtube-nocookie.com",height:e.getAttribute("data-height")||"360",width:e.getAttribute("data-width")||"640",videoId:e.getAttribute("data-id"),playerVars:{controls:e.getAttribute("data-controls")||1,rel:0,playsinline:1}}),t.setAttribute("data-player",E),t.setAttribute("data-type","youtube"),E++},onPreload:function(e){},onLoad:function(e){t.autoplayVideo&&x[e.getAttribute("data-player")].playVideo()},onLeave:function(e){1===x[e.getAttribute("data-player")].getPlayerState()&&x[e.getAttribute("data-player")].pauseVideo()},onCleanup:function(e){1===x[e.getAttribute("data-player")].getPlayerState()&&x[e.getAttribute("data-player")].pauseVideo()}}};Object.entries||(Object.entries=function(e){for(var t=Object.keys(e),i=t.length,s=new Array(i);i--;)s[i]=[t[i],e[t[i]]];return s});var P=function(e,t){if(null===document.querySelector('[data-type="youtube"]')||y)L(e,t);else{if(null===document.getElementById("iframe_api")){var i=document.createElement("script"),s=document.getElementsByTagName("script")[0];i.id="iframe_api",i.src="https://www.youtube.com/iframe_api",s.parentNode.insertBefore(i,s)}-1===w.indexOf(e)&&w.push(e),window.onYouTubePlayerAPIReady=function(){Array.prototype.forEach.call(w,(function(e){L(e,t)})),y=!0}}},k=function(e){return e.hasAttribute("data-group")?e.getAttribute("data-group"):"default"},L=function(e,i){var s;if(C=k(e),Object.prototype.hasOwnProperty.call(S,C)||(S[C]=(s=T,JSON.parse(JSON.stringify(s))),I()),-1!==S[C].gallery.indexOf(e))throw new Error("Ups, element already added to the lightbox.");if(S[C].gallery.push(e),S[C].elementsLength++,t.zoom&&e.querySelector("img")){var a=document.createElement("div");a.className="tobii-zoom__icon",a.innerHTML=t.zoomText,e.classList.add("tobii-zoom"),e.appendChild(a)}e.addEventListener("click",R),O(e),de()&&C===M&&(oe(),le()),i&&i.call(this)},z=function(e,i){var s=k(e);if(-1===S[s].gallery.indexOf(e));else{var a=S[s].gallery.indexOf(e),n=S[s].sliderElements[a];if(S[s].elementsLength--,t.zoom&&e.querySelector(".tobii-zoom__icon")){var r=e.querySelector(".tobii-zoom__icon");r.parentNode.classList.remove("tobii-zoom"),r.parentNode.removeChild(r)}e.removeEventListener("click",R),n.parentNode.removeChild(n),de()&&s===M&&(oe(),le()),i&&i.call(this)}},A=function(){(a=document.createElement("div")).setAttribute("role","dialog"),a.setAttribute("aria-hidden","true"),a.className="tobii",(n=document.createElement("button")).className="tobii__prev",n.setAttribute("type","button"),n.setAttribute("aria-label",t.navLabel[0]),n.innerHTML=t.navText[0],a.appendChild(n),(r=document.createElement("button")).className="tobii__next",r.setAttribute("type","button"),r.setAttribute("aria-label",t.navLabel[1]),r.innerHTML=t.navText[1],a.appendChild(r),(o=document.createElement("button")).className="tobii__close",o.setAttribute("type","button"),o.setAttribute("aria-label",t.closeLabel),o.innerHTML=t.closeText,a.appendChild(o),(l=document.createElement("div")).className="tobii__counter",a.appendChild(l),document.body.appendChild(a)},I=function(){S[C].slider=document.createElement("div"),S[C].slider.className="tobii__slider",a.appendChild(S[C].slider)},O=function(e){for(var t in $)if(Object.prototype.hasOwnProperty.call($,t)&&$[t].checkSupport(e)){var i=document.createElement("div"),s=document.createElement("div");i.className="tobii__slider-slide",i.style.position="absolute",i.style.left=100*S[C].x+"%",$[t].init(e,s),i.appendChild(s),S[C].slider.appendChild(i),S[C].sliderElements.push(i),++S[C].x;break}},D=function(e,i){if(M=null!==M?M:C,de()||e||(e=0),de()){if(!e)throw new Error("Ups, Tobii is aleady open.");if(e===S[M].currentIndex)throw new Error("Ups, slide "+e+" is already selected.")}if(-1===e||e>=S[M].elementsLength)throw new Error("Ups, I can't find slide "+e+".");t.hideScrollbar&&(document.documentElement.classList.add("tobii-is-open"),document.body.classList.add("tobii-is-open")),oe(),t.close||(o.disabled=!1,o.setAttribute("aria-hidden","true")),h=document.activeElement,S[M].currentIndex=e,F(),se(),H(S[M].currentIndex),a.setAttribute("aria-hidden","false"),le(),G(S[M].currentIndex+1),G(S[M].currentIndex-1),setTimeout((function(){S[M].slider.classList.add("tobii__slider--animate")}),1e3),i&&i.call(this)},N=function(e){if(!de())throw new Error("Tobii is already closed.");t.hideScrollbar&&(document.documentElement.classList.remove("tobii-is-open"),document.body.classList.remove("tobii-is-open")),ae(),h.focus();var i=S[M].sliderElements[S[M].currentIndex].querySelector("[data-type]"),s=i.getAttribute("data-type");$[s].onLeave(i),$[s].onCleanup(i),a.setAttribute("aria-hidden","true"),S[M].currentIndex=0,S[M].slider.classList.remove("tobii__slider--animate"),e&&e.call(this)},G=function(e){if(void 0!==S[M].sliderElements[e]){var t=S[M].sliderElements[e].querySelector("[data-type]"),i=t.getAttribute("data-type");$[i].onPreload(t)}},H=function(e){if(void 0!==S[M].sliderElements[e]){var t=S[M].sliderElements[e].querySelector("[data-type]"),i=t.getAttribute("data-type");$[i].onLoad(t)}},j=function(e){S[M].currentIndex>0&&(X(S[M].currentIndex),H(--S[M].currentIndex),le("left"),Y(S[M].currentIndex+1),G(S[M].currentIndex-1),e&&e.call(this))},B=function(e){S[M].currentIndex<S[M].elementsLength-1&&(X(S[M].currentIndex),H(++S[M].currentIndex),le("right"),Y(S[M].currentIndex-1),G(S[M].currentIndex+1),e&&e.call(this))},X=function(e){if(void 0!==S[M].sliderElements[e]){var t=S[M].sliderElements[e].querySelector("[data-type]"),i=t.getAttribute("data-type");$[i].onLeave(t)}},Y=function(e){if(void 0!==S[M].sliderElements[e]){var t=S[M].sliderElements[e].querySelector("[data-type]"),i=t.getAttribute("data-type");$[i].onCleanup(t)}},V=function(){v=-S[M=null!==M?M:C].currentIndex*a.offsetWidth,S[M].slider.style.transform="translate3d("+v+"px, 0, 0)",g=v},F=function(){d={startX:0,endX:0,startY:0,endY:0}},_=function(){var e=d.endX-d.startX,i=d.endY-d.startY,s=Math.abs(e),a=Math.abs(i);e>0&&s>t.threshold&&S[M].currentIndex>0?j():e<0&&s>t.threshold&&S[M].currentIndex!==S[M].elementsLength-1?B():i<0&&a>t.threshold&&t.swipeClose?N():V()},q=function(){b||(b=!0,i.requestAnimationFrame((function(){V(),b=!1})))},R=function(e){e.preventDefault(),M=k(this),D(S[M].gallery.indexOf(this))},W=function(e){e.target===n?j():e.target===r?B():(e.target===o||"tobii__slider-slide"===e.target.className&&t.docClose)&&N(),e.stopPropagation()},U=function(e){9===e.keyCode||"Tab"===e.code?e.shiftKey?document.activeElement===f&&(m.focus(),e.preventDefault()):document.activeElement===m&&(f.focus(),e.preventDefault()):27===e.keyCode||"Escape"===e.code?(e.preventDefault(),N()):37===e.keyCode||"ArrowLeft"===e.code?(e.preventDefault(),j()):39!==e.keyCode&&"ArrowRight"!==e.code||(e.preventDefault(),B())},K=function(e){ue(e.target)||(e.stopPropagation(),p=!0,d.startX=e.touches[0].pageX,d.startY=e.touches[0].pageY,S[M].slider.classList.add("tobii__slider--is-dragging"))},J=function(e){e.stopPropagation(),p&&(e.preventDefault(),d.endX=e.touches[0].pageX,d.endY=e.touches[0].pageY,ie())},Z=function(e){e.stopPropagation(),p=!1,S[M].slider.classList.remove("tobii__slider--is-dragging"),d.endX&&(c=!1,u=!1,_()),F()},Q=function(e){ue(e.target)||(e.preventDefault(),e.stopPropagation(),p=!0,d.startX=e.pageX,d.startY=e.pageY,S[M].slider.classList.add("tobii__slider--is-dragging"))},ee=function(e){e.preventDefault(),p&&(d.endX=e.pageX,d.endY=e.pageY,ie())},te=function(e){e.stopPropagation(),p=!1,S[M].slider.classList.remove("tobii__slider--is-dragging"),d.endX&&(c=!1,u=!1,_()),F()},ie=function(){Math.abs(d.startX-d.endX)>0&&!u&&t.swipeClose?(S[M].slider.style.transform="translate3d("+(g-Math.round(d.startX-d.endX))+"px, 0, 0)",c=!0,u=!1):Math.abs(d.startY-d.endY)>0&&!c&&(S[M].slider.style.transform="translate3d("+g+"px, -"+Math.round(d.startY-d.endY)+"px, 0)",c=!1,u=!0)},se=function(){t.keyboard&&i.addEventListener("keydown",U),i.addEventListener("resize",q),a.addEventListener("click",W),t.draggable&&(ce()&&(a.addEventListener("touchstart",K),a.addEventListener("touchmove",J),a.addEventListener("touchend",Z)),a.addEventListener("mousedown",Q),a.addEventListener("mouseup",te),a.addEventListener("mousemove",ee))},ae=function(){t.keyboard&&i.removeEventListener("keydown",U),i.removeEventListener("resize",q),a.removeEventListener("click",W),t.draggable&&(ce()&&(a.removeEventListener("touchstart",K),a.removeEventListener("touchmove",J),a.removeEventListener("touchend",Z)),a.removeEventListener("mousedown",Q),a.removeEventListener("mouseup",te),a.removeEventListener("mousemove",ee))},ne=function(e,t){return e.getAttribute("data-type")===t},re=function(e){var t=e.querySelectorAll("src");t&&Array.prototype.forEach.call(t,(function(e){e.setAttribute("src","")}))},oe=function(){t.draggable&&S[M].elementsLength>1&&!S[M].slider.classList.contains("tobii__slider--is-draggable")&&S[M].slider.classList.add("tobii__slider--is-draggable"),!t.nav||1===S[M].elementsLength||"auto"===t.nav&&ce()?(n.setAttribute("aria-hidden","true"),r.setAttribute("aria-hidden","true")):(n.setAttribute("aria-hidden","false"),r.setAttribute("aria-hidden","false")),t.counter&&1!==S[M].elementsLength?l.setAttribute("aria-hidden","false"):l.setAttribute("aria-hidden","true")},le=function(e){!function(){for(var e in S)Object.prototype.hasOwnProperty.call(S,e)&&(S[e].slider.style.display=M===e?"block":"none")}(),V(),l.textContent=S[M].currentIndex+1+"/"+S[M].elementsLength,function(e){var i;t.nav?(n.disabled=!1,r.disabled=!1,"left"===e?n.focus():r.focus(),1===S[M].elementsLength?(n.disabled=!0,r.disabled=!0,t.close&&o.focus()):(0===S[M].currentIndex&&(n.disabled=!0,r.focus()),S[M].currentIndex===S[M].elementsLength-1&&(r.disabled=!0,n.focus()))):t.close&&o.focus(),i=a.querySelectorAll(".tobii > button:not(:disabled)"),f=i[0],m=1===i.length?i[0]:i[i.length-1]}(e)},de=function(){return"false"===a.getAttribute("aria-hidden")},ce=function(){return"ontouchstart"in window},ue=function(e){return-1!==["TEXTAREA","OPTION","INPUT","SELECT"].indexOf(e.nodeName)||e===n||e===r||e===o||1===S[M].elementsLength};return function(e){t=function(e){var t={selector:".lightbox",captions:!0,captionsSelector:"img",captionAttribute:"alt",nav:"auto",navText:['<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" aria-hidden="true" focusable="false"><path d="M14 18l-6-6 6-6"/></svg>','<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" aria-hidden="true" focusable="false"><path d="M10 6l6 6-6 6"/></svg>'],navLabel:["Previous image","Next image"],close:!0,closeText:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" aria-hidden="true" focusable="false"><path d="M6 6l12 12M6 18L18 6"/></svg>',closeLabel:"Close lightbox",loadingIndicatorLabel:"Image loading",counter:!0,download:!1,downloadText:"",downloadLabel:"Download image",keyboard:!0,zoom:!0,zoomText:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-hidden="true" focusable="false"><path d="M21 16v5h-5"/><path d="M8 21H3v-5"/><path d="M16 3h5v5"/><path d="M3 8V3h5"/></svg>',docClose:!0,swipeClose:!0,hideScrollbar:!0,draggable:!0,threshold:100,rtl:!1,loop:!1,autoplayVideo:!1};return e&&Object.keys(e).forEach((function(i){t[i]=e[i]})),t}(e),a||A();var i=document.querySelectorAll(t.selector);if(!i)throw new Error("Ups, I can't find the selector "+t.selector+".");Array.prototype.forEach.call(i,(function(e){P(e)}))}(e),{open:D,prev:j,next:B,close:N,add:P,remove:z,destroy:function(e){de()&&N();var t=Object.entries(S);Array.prototype.forEach.call(t,(function(e){var t=e[1].gallery;Array.prototype.forEach.call(t,(function(e){z(e)}))})),a.parentNode.removeChild(a),S={},C=M=null,s=0,e&&e.call(this)},isOpen:de,currentSlide:function(){return S[M].currentIndex},selectGroup:function(e){if(de())throw new Error("Ups, I can't do this. Tobii is open.");if(e){if(e&&!Object.prototype.hasOwnProperty.call(S,e))throw new Error("Ups, I don't have a group called \""+e+'".');M=e}},currentGroup:function(){return null!==M?M:C}}}}()},function(e,t,i){var s=i(6),a=i(71);s({target:"Array",stat:!0,forced:!i(46)((function(e){Array.from(e)}))},{from:a})},function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},function(e,t,i){"use strict";var s={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,n=a&&!s.call({1:2},1);t.f=n?function(e){var t=a(this,e);return!!t&&t.enumerable}:s},function(e,t,i){var s=i(0),a=i(27),n=s["__core-js_shared__"]||a("__core-js_shared__",{});e.exports=n},function(e,t,i){var s=i(0),a=i(37),n=s.WeakMap;e.exports="function"==typeof n&&/native code/.test(a.call(n))},function(e,t,i){var s=i(5),a=i(65),n=i(23),r=i(10);e.exports=function(e,t){for(var i=a(t),o=r.f,l=n.f,d=0;d<i.length;d++){var c=i[d];s(e,c)||o(e,c,l(t,c))}}},function(e,t,i){var s=i(15),a=i(67),n=i(70),r=i(4);e.exports=s("Reflect","ownKeys")||function(e){var t=a.f(r(e)),i=n.f;return i?t.concat(i(e)):t}},function(e,t,i){e.exports=i(0)},function(e,t,i){var s=i(39),a=i(31).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return s(e,a)}},function(e,t,i){var s=i(24),a=i(11),n=i(69),r=function(e){return function(t,i,r){var o,l=s(t),d=a(l.length),c=n(r,d);if(e&&i!=i){for(;d>c;)if((o=l[c++])!=o)return!0}else for(;d>c;c++)if((e||c in l)&&l[c]===i)return e||c||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,t,i){var s=i(18),a=Math.max,n=Math.min;e.exports=function(e,t){var i=s(e);return i<0?a(i+t,0):n(i,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,i){"use strict";var s=i(19),a=i(21),n=i(41),r=i(42),o=i(11),l=i(43),d=i(44);e.exports=function(e){var t,i,c,u,p,h=a(e),f="function"==typeof this?this:Array,m=arguments.length,v=m>1?arguments[1]:void 0,g=void 0!==v,b=0,y=d(h);if(g&&(v=s(v,m>2?arguments[2]:void 0,2)),null==y||f==Array&&r(y))for(i=new f(t=o(h.length));t>b;b++)l(i,b,g?v(h[b],b):h[b]);else for(p=(u=y.call(h)).next,i=new f;!(c=p.call(u)).done;b++)l(i,b,g?n(u,v,[c.value,b],!0):c.value);return i.length=b,i}},function(e,t,i){var s=i(2);e.exports=!!Object.getOwnPropertySymbols&&!s((function(){return!String(Symbol())}))},function(e,t,i){"use strict";var s=i(6),a=i(47).map;s({target:"Array",proto:!0,forced:!i(50)("map")},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,i){"use strict";var s=i(75).charAt,a=i(28),n=i(76),r=a.set,o=a.getterFor("String Iterator");n(String,"String",(function(e){r(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,t=o(this),i=t.string,a=t.index;return a>=i.length?{value:void 0,done:!0}:(e=s(i,a),t.index+=e.length,{value:e,done:!1})}))},function(e,t,i){var s=i(18),a=i(12),n=function(e){return function(t,i){var n,r,o=String(a(t)),l=s(i),d=o.length;return l<0||l>=d?e?"":void 0:(n=o.charCodeAt(l))<55296||n>56319||l+1===d||(r=o.charCodeAt(l+1))<56320||r>57343?e?o.charAt(l):n:e?o.slice(l,l+2):r-56320+(n-55296<<10)+65536}};e.exports={codeAt:n(!1),charAt:n(!0)}},function(e,t,i){"use strict";var s=i(6),a=i(77),n=i(52),r=i(82),o=i(34),l=i(7),d=i(13),c=i(1),u=i(17),p=i(22),h=i(51),f=h.IteratorPrototype,m=h.BUGGY_SAFARI_ITERATORS,v=c("iterator"),g=function(){return this};e.exports=function(e,t,i,c,h,b,y){a(i,t,c);var w,x,E,T=function(e){if(e===h&&P)return P;if(!m&&e in M)return M[e];switch(e){case"keys":case"values":case"entries":return function(){return new i(this,e)}}return function(){return new i(this)}},S=t+" Iterator",C=!1,M=e.prototype,$=M[v]||M["@@iterator"]||h&&M[h],P=!m&&$||T(h),k="Array"==t&&M.entries||$;if(k&&(w=n(k.call(new e)),f!==Object.prototype&&w.next&&(u||n(w)===f||(r?r(w,f):"function"!=typeof w[v]&&l(w,v,g)),o(w,S,!0,!0),u&&(p[S]=g))),"values"==h&&$&&"values"!==$.name&&(C=!0,P=function(){return $.call(this)}),u&&!y||M[v]===P||l(M,v,P),p[t]=P,h)if(x={values:T("values"),keys:b?P:T("keys"),entries:T("entries")},y)for(E in x)(m||C||!(E in M))&&d(M,E,x[E]);else s({target:t,proto:!0,forced:m||C},x);return x}},function(e,t,i){"use strict";var s=i(51).IteratorPrototype,a=i(79),n=i(16),r=i(34),o=i(22),l=function(){return this};e.exports=function(e,t,i){var d=t+" Iterator";return e.prototype=a(s,{next:n(1,i)}),r(e,d,!1,!0),o[d]=l,e}},function(e,t,i){var s=i(2);e.exports=!s((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,i){var s=i(4),a=i(80),n=i(31),r=i(30),o=i(53),l=i(26),d=i(29)("IE_PROTO"),c=function(){},u=function(){var e,t=l("iframe"),i=n.length;for(t.style.display="none",o.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;i--;)delete u.prototype[n[i]];return u()};e.exports=Object.create||function(e,t){var i;return null!==e?(c.prototype=s(e),i=new c,c.prototype=null,i[d]=e):i=u(),void 0===t?i:a(i,t)},r[d]=!0},function(e,t,i){var s=i(8),a=i(10),n=i(4),r=i(81);e.exports=s?Object.defineProperties:function(e,t){n(e);for(var i,s=r(t),o=s.length,l=0;o>l;)a.f(e,i=s[l++],t[i]);return e}},function(e,t,i){var s=i(39),a=i(31);e.exports=Object.keys||function(e){return s(e,a)}},function(e,t,i){var s=i(4),a=i(83);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,i={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(i,[]),t=i instanceof Array}catch(e){}return function(i,n){return s(i),a(n),t?e.call(i,n):i.__proto__=n,i}}():void 0)},function(e,t,i){var s=i(3);e.exports=function(e){if(!s(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,i){},function(e,t,i){"use strict";var s=i(6),a=i(2),n=i(49),r=i(3),o=i(21),l=i(11),d=i(43),c=i(48),u=i(50),p=i(1),h=i(32),f=p("isConcatSpreadable"),m=h>=51||!a((function(){var e=[];return e[f]=!1,e.concat()[0]!==e})),v=u("concat"),g=function(e){if(!r(e))return!1;var t=e[f];return void 0!==t?!!t:n(e)};s({target:"Array",proto:!0,forced:!m||!v},{concat:function(e){var t,i,s,a,n,r=o(this),u=c(r,0),p=0;for(t=-1,s=arguments.length;t<s;t++)if(n=-1===t?r:arguments[t],g(n)){if(p+(a=l(n.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(i=0;i<a;i++,p++)i in n&&d(u,p,n[i])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");d(u,p++,n)}return u.length=p,u}})},function(e,t,i){"use strict";var s=i(6),a=i(87).start;s({target:"String",proto:!0,forced:i(89)},{padStart:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,i){var s=i(11),a=i(88),n=i(12),r=Math.ceil,o=function(e){return function(t,i,o){var l,d,c=String(n(t)),u=c.length,p=void 0===o?" ":String(o),h=s(i);return h<=u||""==p?c:(l=h-u,(d=a.call(p,r(l/p.length))).length>l&&(d=d.slice(0,l)),e?c+d:d+c)}};e.exports={start:o(!1),end:o(!0)}},function(e,t,i){"use strict";var s=i(18),a=i(12);e.exports="".repeat||function(e){var t=String(a(this)),i="",n=s(e);if(n<0||n==1/0)throw RangeError("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(i+=t);return i}},function(e,t,i){var s=i(33);e.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(s)},function(e,t,i){var s=i(13),a=i(91),n=Object.prototype;a!==n.toString&&s(n,"toString",a,{unsafe:!0})},function(e,t,i){"use strict";var s=i(45),a={};a[i(1)("toStringTag")]="z",e.exports="[object z]"!==String(a)?function(){return"[object "+s(this)+"]"}:a.toString},function(e,t,i){"use strict";var s,a,n,r,o=i(6),l=i(17),d=i(0),c=i(15),u=i(93),p=i(13),h=i(94),f=i(14),m=i(34),v=i(95),g=i(3),b=i(20),y=i(96),w=i(9),x=i(97),E=i(46),T=i(98),S=i(54).set,C=i(99),M=i(100),$=i(101),P=i(56),k=i(102),L=i(28),z=i(40),A=i(1),I=i(32),O=A("species"),D="Promise",N=L.get,G=L.set,H=L.getterFor(D),j=u,B=d.TypeError,X=d.document,Y=d.process,V=f("inspectSource"),F=c("fetch"),_=P.f,q=_,R="process"==w(Y),W=!!(X&&X.createEvent&&d.dispatchEvent),U=z(D,(function(){var e=V(j)!==String(j);if(66===I)return!0;if(!e&&!R&&"function"!=typeof PromiseRejectionEvent)return!0;if(l&&!j.prototype.finally)return!0;if(I>=51&&/native code/.test(j))return!1;var t=j.resolve(1),i=function(e){e((function(){}),(function(){}))};return(t.constructor={})[O]=i,!(t.then((function(){}))instanceof i)})),K=U||!E((function(e){j.all(e).catch((function(){}))})),J=function(e){var t;return!(!g(e)||"function"!=typeof(t=e.then))&&t},Z=function(e,t,i){if(!t.notified){t.notified=!0;var s=t.reactions;C((function(){for(var a=t.value,n=1==t.state,r=0;s.length>r;){var o,l,d,c=s[r++],u=n?c.ok:c.fail,p=c.resolve,h=c.reject,f=c.domain;try{u?(n||(2===t.rejection&&ie(e,t),t.rejection=1),!0===u?o=a:(f&&f.enter(),o=u(a),f&&(f.exit(),d=!0)),o===c.promise?h(B("Promise-chain cycle")):(l=J(o))?l.call(o,p,h):p(o)):h(a)}catch(e){f&&!d&&f.exit(),h(e)}}t.reactions=[],t.notified=!1,i&&!t.rejection&&ee(e,t)}))}},Q=function(e,t,i){var s,a;W?((s=X.createEvent("Event")).promise=t,s.reason=i,s.initEvent(e,!1,!0),d.dispatchEvent(s)):s={promise:t,reason:i},(a=d["on"+e])?a(s):"unhandledrejection"===e&&$("Unhandled promise rejection",i)},ee=function(e,t){S.call(d,(function(){var i,s=t.value;if(te(t)&&(i=k((function(){R?Y.emit("unhandledRejection",s,e):Q("unhandledrejection",e,s)})),t.rejection=R||te(t)?2:1,i.error))throw i.value}))},te=function(e){return 1!==e.rejection&&!e.parent},ie=function(e,t){S.call(d,(function(){R?Y.emit("rejectionHandled",e):Q("rejectionhandled",e,t.value)}))},se=function(e,t,i,s){return function(a){e(t,i,a,s)}},ae=function(e,t,i,s){t.done||(t.done=!0,s&&(t=s),t.value=i,t.state=2,Z(e,t,!0))},ne=function(e,t,i,s){if(!t.done){t.done=!0,s&&(t=s);try{if(e===i)throw B("Promise can't be resolved itself");var a=J(i);a?C((function(){var s={done:!1};try{a.call(i,se(ne,e,s,t),se(ae,e,s,t))}catch(i){ae(e,s,i,t)}})):(t.value=i,t.state=1,Z(e,t,!1))}catch(i){ae(e,{done:!1},i,t)}}};U&&(j=function(e){y(this,j,D),b(e),s.call(this);var t=N(this);try{e(se(ne,this,t),se(ae,this,t))}catch(e){ae(this,t,e)}},(s=function(e){G(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(j.prototype,{then:function(e,t){var i=H(this),s=_(T(this,j));return s.ok="function"!=typeof e||e,s.fail="function"==typeof t&&t,s.domain=R?Y.domain:void 0,i.parent=!0,i.reactions.push(s),0!=i.state&&Z(this,i,!1),s.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new s,t=N(e);this.promise=e,this.resolve=se(ne,e,t),this.reject=se(ae,e,t)},P.f=_=function(e){return e===j||e===n?new a(e):q(e)},l||"function"!=typeof u||(r=u.prototype.then,p(u.prototype,"then",(function(e,t){var i=this;return new j((function(e,t){r.call(i,e,t)})).then(e,t)}),{unsafe:!0}),"function"==typeof F&&o({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return M(j,F.apply(d,arguments))}}))),o({global:!0,wrap:!0,forced:U},{Promise:j}),m(j,D,!1,!0),v(D),n=c(D),o({target:D,stat:!0,forced:U},{reject:function(e){var t=_(this);return t.reject.call(void 0,e),t.promise}}),o({target:D,stat:!0,forced:l||U},{resolve:function(e){return M(l&&this===n?j:this,e)}}),o({target:D,stat:!0,forced:K},{all:function(e){var t=this,i=_(t),s=i.resolve,a=i.reject,n=k((function(){var i=b(t.resolve),n=[],r=0,o=1;x(e,(function(e){var l=r++,d=!1;n.push(void 0),o++,i.call(t,e).then((function(e){d||(d=!0,n[l]=e,--o||s(n))}),a)})),--o||s(n)}));return n.error&&a(n.value),i.promise},race:function(e){var t=this,i=_(t),s=i.reject,a=k((function(){var a=b(t.resolve);x(e,(function(e){a.call(t,e).then(i.resolve,s)}))}));return a.error&&s(a.value),i.promise}})},function(e,t,i){var s=i(0);e.exports=s.Promise},function(e,t,i){var s=i(13);e.exports=function(e,t,i){for(var a in t)s(e,a,t[a],i);return e}},function(e,t,i){"use strict";var s=i(15),a=i(10),n=i(1),r=i(8),o=n("species");e.exports=function(e){var t=s(e),i=a.f;r&&t&&!t[o]&&i(t,o,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,i){if(!(e instanceof t))throw TypeError("Incorrect "+(i?i+" ":"")+"invocation");return e}},function(e,t,i){var s=i(4),a=i(42),n=i(11),r=i(19),o=i(44),l=i(41),d=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,i,c,u){var p,h,f,m,v,g,b,y=r(t,i,c?2:1);if(u)p=e;else{if("function"!=typeof(h=o(e)))throw TypeError("Target is not iterable");if(a(h)){for(f=0,m=n(e.length);m>f;f++)if((v=c?y(s(b=e[f])[0],b[1]):y(e[f]))&&v instanceof d)return v;return new d(!1)}p=h.call(e)}for(g=p.next;!(b=g.call(p)).done;)if("object"==typeof(v=l(p,y,b.value,c))&&v&&v instanceof d)return v;return new d(!1)}).stop=function(e){return new d(!0,e)}},function(e,t,i){var s=i(4),a=i(20),n=i(1)("species");e.exports=function(e,t){var i,r=s(e).constructor;return void 0===r||null==(i=s(r)[n])?t:a(i)}},function(e,t,i){var s,a,n,r,o,l,d,c,u=i(0),p=i(23).f,h=i(9),f=i(54).set,m=i(55),v=u.MutationObserver||u.WebKitMutationObserver,g=u.process,b=u.Promise,y="process"==h(g),w=p(u,"queueMicrotask"),x=w&&w.value;x||(s=function(){var e,t;for(y&&(e=g.domain)&&e.exit();a;){t=a.fn,a=a.next;try{t()}catch(e){throw a?r():n=void 0,e}}n=void 0,e&&e.enter()},y?r=function(){g.nextTick(s)}:v&&!m?(o=!0,l=document.createTextNode(""),new v(s).observe(l,{characterData:!0}),r=function(){l.data=o=!o}):b&&b.resolve?(d=b.resolve(void 0),c=d.then,r=function(){c.call(d,s)}):r=function(){f.call(u,s)}),e.exports=x||function(e){var t={fn:e,next:void 0};n&&(n.next=t),a||(a=t,r()),n=t}},function(e,t,i){var s=i(4),a=i(3),n=i(56);e.exports=function(e,t){if(s(e),a(t)&&t.constructor===e)return t;var i=n.f(e);return(0,i.resolve)(t),i.promise}},function(e,t,i){var s=i(0);e.exports=function(e,t){var i=s.console;i&&i.error&&(1===arguments.length?i.error(e):i.error(e,t))}},function(e,t){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,t,i){"use strict";var s=i(6),a=i(57);s({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(e,t,i){"use strict";var s=i(2);e.exports=function(e,t){var i=[][e];return!i||!s((function(){i.call(null,t||function(){throw 1},1)}))}},function(e,t,i){var s=i(0),a=i(106),n=i(57),r=i(7);for(var o in a){var l=s[o],d=l&&l.prototype;if(d&&d.forEach!==n)try{r(d,"forEach",n)}catch(e){d.forEach=n}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,i){"use strict";i.r(t);i(59),i(73),i(74),i(84);function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:s(t[i])&&s(e[i])&&Object.keys(t[i]).length>0&&a(e[i],t[i])}))}var n="undefined"!=typeof document?document:{},r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};a(n,r);var o="undefined"!=typeof window?window:{};a(o,{document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});class l{constructor(e){const t=this;for(let i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this}}function d(e,t){const i=[];let s=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){let a,r;const o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){let e="div";for(0===o.indexOf("<li")&&(e="ul"),0===o.indexOf("<tr")&&(e="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(e="tr"),0===o.indexOf("<tbody")&&(e="table"),0===o.indexOf("<option")&&(e="select"),r=n.createElement(e),r.innerHTML=o,s=0;s<r.childNodes.length;s+=1)i.push(r.childNodes[s])}else for(a=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||n).querySelectorAll(e.trim()):[n.getElementById(e.trim().split("#")[1])],s=0;s<a.length;s+=1)a[s]&&i.push(a[s])}else if(e.nodeType||e===o||e===n)i.push(e);else if(e.length>0&&e[0].nodeType)for(s=0;s<e.length;s+=1)i.push(e[s]);return new l(i)}function c(e){const t=[];for(let i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}d.fn=l.prototype,d.Class=l,d.Dom7=l;"resize scroll".split(" ");const u={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(const t in e)this[i][t]=e[t],this[i].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let i;if(void 0!==t){for(let s=0;s<this.length;s+=1)i=this[s],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0],i){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];const t=i.getAttribute("data-"+e);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(...e){let[t,i,s,a]=e;function n(e){const t=e.target;if(!t)return;const a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),d(t).is(i))s.apply(t,a);else{const e=d(t).parents();for(let t=0;t<e.length;t+=1)d(e[t]).is(i)&&s.apply(e[t],a)}}function r(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof e[1]&&([t,s,a]=e,i=void 0),a||(a=!1);const o=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(i)for(l=0;l<o.length;l+=1){const e=o[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:s,proxyListener:n}),t.addEventListener(e,n,a)}else for(l=0;l<o.length;l+=1){const e=o[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:s,proxyListener:r}),t.addEventListener(e,r,a)}}return this},off:function(...e){let[t,i,s,a]=e;"function"==typeof e[1]&&([t,s,a]=e,i=void 0),a||(a=!1);const n=t.split(" ");for(let e=0;e<n.length;e+=1){const t=n[e];for(let e=0;e<this.length;e+=1){const n=this[e];let r;if(!i&&n.dom7Listeners?r=n.dom7Listeners[t]:i&&n.dom7LiveListeners&&(r=n.dom7LiveListeners[t]),r&&r.length)for(let e=r.length-1;e>=0;e-=1){const i=r[e];s&&i.listener===s||s&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===s?(n.removeEventListener(t,i.proxyListener,a),r.splice(e,1)):s||(n.removeEventListener(t,i.proxyListener,a),r.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),i=e[1];for(let s=0;s<t.length;s+=1){const a=t[s];for(let t=0;t<this.length;t+=1){const s=this[t];let r;try{r=new o.CustomEvent(a,{detail:i,bubbles:!0,cancelable:!0})}catch(e){r=n.createEvent("Event"),r.initEvent(a,!0,!0),r.detail=i}s.dom7EventData=e.filter((e,t)=>t>0),s.dispatchEvent(r),s.dom7EventData=[],delete s.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],i=this;let s;function a(n){if(n.target===this)for(e.call(this,n),s=0;s<t.length;s+=1)i.off(t[s],a)}if(e)for(s=0;s<t.length;s+=1)i.on(t[s],a);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),i=n.body,s=e.clientTop||i.clientTop||0,a=e.clientLeft||i.clientLeft||0,r=e===o?o.scrollY:e.scrollTop,l=e===o?o.scrollX:e.scrollLeft;return{top:t.top+r-s,left:t.left+l-a}}return null},css:function(e,t){let i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(let t in e)this[i].style[t]=e[t];return this}if(this[0])return o.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let i,s;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(i=d(e),s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}if(e===n)return t===n;if(e===o)return t===o;if(e.nodeType||e instanceof l){for(i=e.nodeType?[e]:e,s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let i;return e>t-1?new l([]):e<0?(i=t+e,new l(i<0?[]:[this[i]])):new l([this[e]])},append:function(...e){let t;for(let i=0;i<e.length;i+=1){t=e[i];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const i=n.createElement("div");for(i.innerHTML=t;i.firstChild;)this[e].appendChild(i.firstChild)}else if(t instanceof l)for(let i=0;i<t.length;i+=1)this[e].appendChild(t[i]);else this[e].appendChild(t)}return this},prepend:function(e){let t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){const s=n.createElement("div");for(s.innerHTML=e,i=s.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(s.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&d(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){const s=i.nextElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&d(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){const s=i.previousElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},parent:function(e){const t=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?d(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return d(c(t))},parents:function(e){const t=[];for(let i=0;i<this.length;i+=1){let s=this[i].parentNode;for(;s;)e?d(s).is(e)&&t.push(s):t.push(s),s=s.parentNode}return d(c(t))},closest:function(e){let t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].querySelectorAll(e);for(let e=0;e<s.length;e+=1)t.push(s[e])}return new l(t)},children:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].childNodes;for(let i=0;i<s.length;i+=1)e?1===s[i].nodeType&&d(s[i]).is(e)&&t.push(s[i]):1===s[i].nodeType&&t.push(s[i])}return new l(c(t))},filter:function(e){const t=[],i=this;for(let s=0;s<i.length;s+=1)e.call(i[s],s,i[s])&&t.push(i[s]);return new l(t)},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let i,s;for(i=0;i<e.length;i+=1){const a=d(e[i]);for(s=0;s<a.length;s+=1)t[t.length]=a[s],t.length+=1}return t},styles:function(){return this[0]?o.getComputedStyle(this[0],null):{}}};Object.keys(u).forEach(e=>{d.fn[e]=d.fn[e]||u[e]});const p={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let i,s,a;const n=o.getComputedStyle(e,null);return o.WebKitCSSMatrix?(s=n.transform||n.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map(e=>e.replace(",",".")).join(", ")),a=new o.WebKitCSSMatrix("none"===s?"":s)):(a=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),"x"===t&&(s=o.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=o.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0},parseUrlQuery(e){const t={};let i,s,a,n,r=e||o.location.href;if("string"==typeof r&&r.length)for(r=r.indexOf("?")>-1?r.replace(/\S*\?/,""):"",s=r.split("&").filter(e=>""!==e),n=s.length,i=0;i<n;i+=1)a=s[i].replace(/#\S+/g,"").split("="),t[decodeURIComponent(a[0])]=void 0===a[1]?void 0:decodeURIComponent(a[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let i=1;i<e.length;i+=1){const s=e[i];if(null!=s){const e=Object.keys(Object(s));for(let i=0,a=e.length;i<a;i+=1){const a=e[i],n=Object.getOwnPropertyDescriptor(s,a);void 0!==n&&n.enumerable&&(p.isObject(t[a])&&p.isObject(s[a])?p.extend(t[a],s[a]):!p.isObject(t[a])&&p.isObject(s[a])?(t[a]={},p.extend(t[a],s[a])):t[a]=s[a])}}}return t}},h={touch:!!("ontouchstart"in o||o.DocumentTouch&&n instanceof o.DocumentTouch),pointerEvents:!!o.PointerEvent&&"maxTouchPoints"in o.navigator&&o.navigator.maxTouchPoints>=0,observer:"MutationObserver"in o||"WebkitMutationObserver"in o,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});o.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in o};class f{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,i){const s=this;if("function"!=typeof t)return s;const a=i?"unshift":"push";return e.split(" ").forEach(e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][a](t)}),s}once(e,t,i){const s=this;if("function"!=typeof t)return s;function a(...i){s.off(e,a),a.f7proxy&&delete a.f7proxy,t.apply(s,i)}return a.f7proxy=t,s.on(e,a,i)}off(e,t){const i=this;return i.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].length&&i.eventsListeners[e].forEach((s,a)=>{(s===t||s.f7proxy&&s.f7proxy===t)&&i.eventsListeners[e].splice(a,1)})}),i):i}emit(...e){const t=this;if(!t.eventsListeners)return t;let i,s,a;return"string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),a=t):(i=e[0].events,s=e[0].data,a=e[0].context||t),(Array.isArray(i)?i:i.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const i=[];t.eventsListeners[e].forEach(e=>{i.push(e)}),i.forEach(e=>{e.apply(a,s)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i];s.params&&p.extend(e,s.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i],a=e[i]||{};s.instance&&Object.keys(s.instance).forEach(e=>{const i=s.instance[e];t[e]="function"==typeof i?i.bind(t):i}),s.on&&t.on&&Object.keys(s.on).forEach(e=>{t.on(e,s.on[e])}),s.create&&s.create.bind(t)(a)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const i=this;i.prototype.modules||(i.prototype.modules={});const s=e.name||`${Object.keys(i.prototype.modules).length}_${p.now()}`;return i.prototype.modules[s]=e,e.proto&&Object.keys(e.proto).forEach(t=>{i.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{i[t]=e.static[t]}),e.install&&e.install.apply(i,t),i}static use(e,...t){const i=this;return Array.isArray(e)?(e.forEach(e=>i.installModule(e)),i):i.installModule(e,...t)}}var m={updateSize:function(){const e=this;let t,i;const s=e.$el;t=void 0!==e.params.width?e.params.width:s[0].clientWidth,i=void 0!==e.params.height?e.params.height:s[0].clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(s.css("padding-left"),10)-parseInt(s.css("padding-right"),10),i=i-parseInt(s.css("padding-top"),10)-parseInt(s.css("padding-bottom"),10),p.extend(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:i,size:s,rtlTranslate:a,wrongRTL:n}=e,r=e.virtual&&t.virtual.enabled,l=r?e.virtual.slides.length:e.slides.length,d=i.children("."+e.params.slideClass),c=r?e.virtual.slides.length:d.length;let u=[];const h=[],f=[];function m(e){return!t.cssMode||e!==d.length-1}let v=t.slidesOffsetBefore;"function"==typeof v&&(v=t.slidesOffsetBefore.call(e));let g=t.slidesOffsetAfter;"function"==typeof g&&(g=t.slidesOffsetAfter.call(e));const b=e.snapGrid.length,y=e.snapGrid.length;let w,x,E=t.spaceBetween,T=-v,S=0,C=0;if(void 0===s)return;"string"==typeof E&&E.indexOf("%")>=0&&(E=parseFloat(E.replace("%",""))/100*s),e.virtualSize=-E,a?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(w=Math.floor(c/t.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(w=Math.max(w,t.slidesPerView*t.slidesPerColumn)));const M=t.slidesPerColumn,$=w/M,P=Math.floor(c/t.slidesPerColumn);for(let i=0;i<c;i+=1){x=0;const a=d.eq(i);if(t.slidesPerColumn>1){let s,n,r;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){const e=Math.floor(i/(t.slidesPerGroup*t.slidesPerColumn)),o=i-t.slidesPerColumn*t.slidesPerGroup*e,l=0===e?t.slidesPerGroup:Math.min(Math.ceil((c-e*M*t.slidesPerGroup)/M),t.slidesPerGroup);r=Math.floor(o/l),n=o-r*l+e*t.slidesPerGroup,s=n+r*w/M,a.css({"-webkit-box-ordinal-group":s,"-moz-box-ordinal-group":s,"-ms-flex-order":s,"-webkit-order":s,order:s})}else"column"===t.slidesPerColumnFill?(n=Math.floor(i/M),r=i-n*M,(n>P||n===P&&r===M-1)&&(r+=1,r>=M&&(r=0,n+=1))):(r=Math.floor(i/$),n=i-r*$);a.css("margin-"+(e.isHorizontal()?"top":"left"),0!==r&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==a.css("display")){if("auto"===t.slidesPerView){const i=o.getComputedStyle(a[0],null),s=a[0].style.transform,n=a[0].style.webkitTransform;if(s&&(a[0].style.transform="none"),n&&(a[0].style.webkitTransform="none"),t.roundLengths)x=e.isHorizontal()?a.outerWidth(!0):a.outerHeight(!0);else if(e.isHorizontal()){const e=parseFloat(i.getPropertyValue("width")),t=parseFloat(i.getPropertyValue("padding-left")),s=parseFloat(i.getPropertyValue("padding-right")),a=parseFloat(i.getPropertyValue("margin-left")),n=parseFloat(i.getPropertyValue("margin-right")),r=i.getPropertyValue("box-sizing");x=r&&"border-box"===r?e+a+n:e+t+s+a+n}else{const e=parseFloat(i.getPropertyValue("height")),t=parseFloat(i.getPropertyValue("padding-top")),s=parseFloat(i.getPropertyValue("padding-bottom")),a=parseFloat(i.getPropertyValue("margin-top")),n=parseFloat(i.getPropertyValue("margin-bottom")),r=i.getPropertyValue("box-sizing");x=r&&"border-box"===r?e+a+n:e+t+s+a+n}s&&(a[0].style.transform=s),n&&(a[0].style.webkitTransform=n),t.roundLengths&&(x=Math.floor(x))}else x=(s-(t.slidesPerView-1)*E)/t.slidesPerView,t.roundLengths&&(x=Math.floor(x)),d[i]&&(e.isHorizontal()?d[i].style.width=x+"px":d[i].style.height=x+"px");d[i]&&(d[i].swiperSlideSize=x),f.push(x),t.centeredSlides?(T=T+x/2+S/2+E,0===S&&0!==i&&(T=T-s/2-E),0===i&&(T=T-s/2-E),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&u.push(T),h.push(T)):(t.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&u.push(T),h.push(T),T=T+x+E),e.virtualSize+=x+E,S=x,C+=1}}let k;if(e.virtualSize=Math.max(e.virtualSize,s)+g,a&&n&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(x+t.spaceBetween)*w,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){k=[];for(let i=0;i<u.length;i+=1){let s=u[i];t.roundLengths&&(s=Math.floor(s)),u[i]<e.virtualSize+u[0]&&k.push(s)}u=k}if(!t.centeredSlides){k=[];for(let i=0;i<u.length;i+=1){let a=u[i];t.roundLengths&&(a=Math.floor(a)),u[i]<=e.virtualSize-s&&k.push(a)}u=k,Math.floor(e.virtualSize-s)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-s)}if(0===u.length&&(u=[0]),0!==t.spaceBetween&&(e.isHorizontal()?a?d.filter(m).css({marginLeft:E+"px"}):d.filter(m).css({marginRight:E+"px"}):d.filter(m).css({marginBottom:E+"px"})),t.centeredSlides&&t.centeredSlidesBounds){let e=0;f.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween;const i=e-s;u=u.map(e=>e<0?-v:e>i?i+g:e)}if(t.centerInsufficientSlides){let e=0;if(f.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween,e<s){const t=(s-e)/2;u.forEach((e,i)=>{u[i]=e-t}),h.forEach((e,i)=>{h[i]=e+t})}}p.extend(e,{slides:d,snapGrid:u,slidesGrid:h,slidesSizesGrid:f}),c!==l&&e.emit("slidesLengthChange"),u.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==y&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,i=[];let s,a=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)t.visibleSlides.each((e,t)=>{i.push(t)});else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length)break;i.push(t.slides.eq(e)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;a=e>a?e:a}a&&t.$wrapperEl.css("height",a+"px")},updateSlidesOffset:function(){const e=this,t=e.slides;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,i=t.params,{slides:s,rtlTranslate:a}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;a&&(n=e),s.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<s.length;e+=1){const r=s[e],o=(n+(i.centeredSlides?t.minTranslate():0)-r.swiperSlideOffset)/(r.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){const a=-(n-r.swiperSlideOffset),o=a+t.slidesSizesGrid[e];(a>=0&&a<t.size-1||o>1&&o<=t.size||a<=0&&o>=t.size)&&(t.visibleSlides.push(r),t.visibleSlidesIndexes.push(e),s.eq(e).addClass(i.slideVisibleClass))}r.progress=a?-o:o}t.visibleSlides=d(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:n,isEnd:r}=t;const o=n,l=r;0===s?(a=0,n=!0,r=!0):(a=(e-t.minTranslate())/s,n=a<=0,r=a>=1),p.extend(t,{progress:a,isBeginning:n,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),r&&!l&&t.emit("reachEnd toEdge"),(o&&!n||l&&!r)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,$wrapperEl:s,activeIndex:a,realIndex:n}=e,r=e.virtual&&i.virtual.enabled;let o;t.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),o=r?e.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${a}"]`):t.eq(a),o.addClass(i.slideActiveClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${n}"]`).addClass(i.slideDuplicateActiveClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${n}"]`).addClass(i.slideDuplicateActiveClass));let l=o.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));let d=o.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=t.eq(-1),d.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:s,snapGrid:a,params:n,activeIndex:r,realIndex:o,snapIndex:l}=t;let d,c=e;if(void 0===c){for(let e=0;e<s.length;e+=1)void 0!==s[e+1]?i>=s[e]&&i<s[e+1]-(s[e+1]-s[e])/2?c=e:i>=s[e]&&i<s[e+1]&&(c=e+1):i>=s[e]&&(c=e);n.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(a.indexOf(i)>=0)d=a.indexOf(i);else{const e=Math.min(n.slidesPerGroupSkip,c);d=e+Math.floor((c-e)/n.slidesPerGroup)}if(d>=a.length&&(d=a.length-1),c===r)return void(d!==l&&(t.snapIndex=d,t.emit("snapIndexChange")));const u=parseInt(t.slides.eq(c).attr("data-swiper-slide-index")||c,10);p.extend(t,{snapIndex:d,realIndex:u,previousIndex:r,activeIndex:c}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==u&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,i=t.params,s=d(e.target).closest("."+i.slideClass)[0];let a=!1;if(s)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===s&&(a=!0);if(!s||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=s,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(d(s).attr("data-swiper-slide-index"),10):t.clickedIndex=d(s).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var v={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:i,translate:s,$wrapperEl:a}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let n=p.getTranslate(a[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:a,$wrapperEl:n,wrapperEl:r,progress:o}=i;let l,d=0,c=0;i.isHorizontal()?d=s?-e:e:c=e,a.roundLengths&&(d=Math.floor(d),c=Math.floor(c)),a.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-d:-c:a.virtualTranslate||n.transform(`translate3d(${d}px, ${c}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?d:c;const u=i.maxTranslate()-i.minTranslate();l=0===u?0:(e-i.minTranslate())/u,l!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,i=!0,s=!0,a){const n=this,{params:r,wrapperEl:o}=n;if(n.animating&&r.preventInteractionOnTransition)return!1;const l=n.minTranslate(),d=n.maxTranslate();let c;if(c=s&&e>l?l:s&&e<d?d:e,n.updateProgress(c),r.cssMode){const e=n.isHorizontal();return 0===t?o[e?"scrollLeft":"scrollTop"]=-c:o.scrollTo?o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"}):o[e?"scrollLeft":"scrollTop"]=-c,!0}return 0===t?(n.setTransition(0),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,i&&n.emit("transitionEnd"))}),n.$wrapperEl[0].addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd))),!0}};var g={setTransition:function(e,t){const i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const i=this,{activeIndex:s,params:a,previousIndex:n}=i;if(a.cssMode)return;a.autoHeight&&i.updateAutoHeight();let r=t;if(r||(r=s>n?"next":s<n?"prev":"reset"),i.emit("transitionStart"),e&&s!==n){if("reset"===r)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===r?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const i=this,{activeIndex:s,previousIndex:a,params:n}=i;if(i.animating=!1,n.cssMode)return;i.setTransition(0);let r=t;if(r||(r=s>a?"next":s<a?"prev":"reset"),i.emit("transitionEnd"),e&&s!==a){if("reset"===r)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===r?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}};var b={slideTo:function(e=0,t=this.params.speed,i=!0,s){const a=this;let n=e;n<0&&(n=0);const{params:r,snapGrid:o,slidesGrid:l,previousIndex:d,activeIndex:c,rtlTranslate:u,wrapperEl:p}=a;if(a.animating&&r.preventInteractionOnTransition)return!1;const h=Math.min(a.params.slidesPerGroupSkip,n);let f=h+Math.floor((n-h)/a.params.slidesPerGroup);f>=o.length&&(f=o.length-1),(c||r.initialSlide||0)===(d||0)&&i&&a.emit("beforeSlideChangeStart");const m=-o[f];if(a.updateProgress(m),r.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*m)>=Math.floor(100*l[e])&&(n=e);if(a.initialized&&n!==c){if(!a.allowSlideNext&&m<a.translate&&m<a.minTranslate())return!1;if(!a.allowSlidePrev&&m>a.translate&&m>a.maxTranslate()&&(c||0)!==n)return!1}let v;if(v=n>c?"next":n<c?"prev":"reset",u&&-m===a.translate||!u&&m===a.translate)return a.updateActiveIndex(n),r.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==r.effect&&a.setTranslate(m),"reset"!==v&&(a.transitionStart(i,v),a.transitionEnd(i,v)),!1;if(r.cssMode){const e=a.isHorizontal();let i=-m;return u&&(i=p.scrollWidth-p.offsetWidth-i),0===t?p[e?"scrollLeft":"scrollTop"]=i:p.scrollTo?p.scrollTo({[e?"left":"top"]:i,behavior:"smooth"}):p[e?"scrollLeft":"scrollTop"]=i,!0}return 0===t?(a.setTransition(0),a.setTranslate(m),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,v),a.transitionEnd(i,v)):(a.setTransition(t),a.setTranslate(m),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,v),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,v))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e=0,t=this.params.speed,i=!0,s){const a=this;let n=e;return a.params.loop&&(n+=a.loopedSlides),a.slideTo(n,t,i,s)},slideNext:function(e=this.params.speed,t=!0,i){const s=this,{params:a,animating:n}=s,r=s.activeIndex<a.slidesPerGroupSkip?1:a.slidesPerGroup;if(a.loop){if(n)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return s.slideTo(s.activeIndex+r,e,t,i)},slidePrev:function(e=this.params.speed,t=!0,i){const s=this,{params:a,animating:n,snapGrid:r,slidesGrid:o,rtlTranslate:l}=s;if(a.loop){if(n)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const c=d(l?s.translate:-s.translate),u=r.map(e=>d(e));o.map(e=>d(e)),r[u.indexOf(c)];let p,h=r[u.indexOf(c)-1];return void 0===h&&a.cssMode&&r.forEach(e=>{!h&&c>=e&&(h=e)}),void 0!==h&&(p=o.indexOf(h),p<0&&(p=s.activeIndex-1)),s.slideTo(p,e,t,i)},slideReset:function(e=this.params.speed,t=!0,i){return this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e=this.params.speed,t=!0,i,s=.5){const a=this;let n=a.activeIndex;const r=Math.min(a.params.slidesPerGroupSkip,n),o=r+Math.floor((n-r)/a.params.slidesPerGroup),l=a.rtlTranslate?a.translate:-a.translate;if(l>=a.snapGrid[o]){const e=a.snapGrid[o];l-e>(a.snapGrid[o+1]-e)*s&&(n+=a.params.slidesPerGroup)}else{const e=a.snapGrid[o-1];l-e<=(a.snapGrid[o]-e)*s&&(n-=a.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,a.slidesGrid.length-1),a.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,n=e.clickedIndex;if(t.loop){if(e.animating)return;a=parseInt(d(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-s/2||n>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),n=i.children(`.${t.slideClass}[data-swiper-slide-index="${a}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),p.nextTick(()=>{e.slideTo(n)})):e.slideTo(n):n>e.slides.length-s?(e.loopFix(),n=i.children(`.${t.slideClass}[data-swiper-slide-index="${a}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),p.nextTick(()=>{e.slideTo(n)})):e.slideTo(n)}else e.slideTo(n)}};var y={loopCreate:function(){const e=this,{params:t,$wrapperEl:i}=e;i.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let s=i.children("."+t.slideClass);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-s.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let s=0;s<e;s+=1){const e=d(n.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);i.append(e)}s=i.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);const a=[],r=[];s.each((t,i)=>{const n=d(i);t<e.loopedSlides&&r.push(i),t<s.length&&t>=s.length-e.loopedSlides&&a.push(i),n.attr("data-swiper-slide-index",t)});for(let e=0;e<r.length;e+=1)i.append(d(r[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=a.length-1;e>=0;e-=1)i.prepend(d(a[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:i,loopedSlides:s,allowSlidePrev:a,allowSlideNext:n,snapGrid:r,rtlTranslate:o}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const d=-r[t]-e.getTranslate();if(t<s){l=i.length-3*s+t,l+=s,e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}else if(t>=i.length-s){l=-i.length+t+s,l+=s,e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}e.allowSlidePrev=a,e.allowSlideNext=n,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:i}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};var w={setGrabCursor:function(e){if(h.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){h.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}};var x={appendSlide:function(e){const t=this,{$wrapperEl:i,params:s}=t;if(s.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.append(e[t]);else i.append(e);s.loop&&t.loopCreate(),s.observer&&h.observer||t.update()},prependSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:a}=t;i.loop&&t.loopDestroy();let n=a+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&s.prepend(e[t]);n=a+e.length}else s.prepend(e);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){const i=this,{$wrapperEl:s,params:a,activeIndex:n}=i;let r=n;a.loop&&(r-=i.loopedSlides,i.loopDestroy(),i.slides=s.children("."+a.slideClass));const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=r>e?r+1:r;const d=[];for(let t=o-1;t>=e;t-=1){const e=i.slides.eq(t);e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&s.append(t[e]);l=r>e?r+t.length:r}else s.append(t);for(let e=0;e<d.length;e+=1)s.append(d[e]);a.loop&&i.loopCreate(),a.observer&&h.observer||i.update(),a.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:a}=t;let n=a;i.loop&&(n-=t.loopedSlides,t.loopDestroy(),t.slides=s.children("."+i.slideClass));let r,o=n;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)r=e[i],t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1);o=Math.max(o,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1),o=Math.max(o,0);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),i.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}};const E=function(){const e=o.navigator.platform,t=o.navigator.userAgent,i={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!o.cordova&&!o.phonegap),phonegap:!(!o.cordova&&!o.phonegap),electron:!1},s=o.screen.width,a=o.screen.height,n=t.match(/(Android);?[\s\/]+([\d.]+)?/);let r=t.match(/(iPad).*OS\s([\d_]+)/);const l=t.match(/(iPod)(.*OS\s([\d_]+))?/),d=!r&&t.match(/(iPhone\sOS|iOS)\s([\d_]+)/),c=t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0,u=t.indexOf("Edge/")>=0,p=t.indexOf("Gecko/")>=0&&t.indexOf("Firefox/")>=0,f="Win32"===e,m=t.toLowerCase().indexOf("electron")>=0;let v="MacIntel"===e;return!r&&v&&h.touch&&(1024===s&&1366===a||834===s&&1194===a||834===s&&1112===a||768===s&&1024===a)&&(r=t.match(/(Version)\/([\d.]+)/),v=!1),i.ie=c,i.edge=u,i.firefox=p,n&&!f&&(i.os="android",i.osVersion=n[2],i.android=!0,i.androidChrome=t.toLowerCase().indexOf("chrome")>=0),(r||d||l)&&(i.os="ios",i.ios=!0),d&&!l&&(i.osVersion=d[2].replace(/_/g,"."),i.iphone=!0),r&&(i.osVersion=r[2].replace(/_/g,"."),i.ipad=!0),l&&(i.osVersion=l[3]?l[3].replace(/_/g,"."):null,i.ipod=!0),i.ios&&i.osVersion&&t.indexOf("Version/")>=0&&"10"===i.osVersion.split(".")[0]&&(i.osVersion=t.toLowerCase().split("version/")[1].split(" ")[0]),i.webView=!(!(d||r||l)||!t.match(/.*AppleWebKit(?!.*Safari)/i)&&!o.navigator.standalone)||o.matchMedia&&o.matchMedia("(display-mode: standalone)").matches,i.webview=i.webView,i.standalone=i.webView,i.desktop=!(i.ios||i.android)||m,i.desktop&&(i.electron=m,i.macos=v,i.windows=f,i.macos&&(i.os="macos"),i.windows&&(i.os="windows")),i.pixelRatio=o.devicePixelRatio||1,i}();function T(e){const t=this,i=t.touchEventsData,{params:s,touches:a}=t;if(t.animating&&s.preventInteractionOnTransition)return;let r=e;r.originalEvent&&(r=r.originalEvent);const l=d(r.target);if("wrapper"===s.touchEventsTarget&&!l.closest(t.wrapperEl).length)return;if(i.isTouchEvent="touchstart"===r.type,!i.isTouchEvent&&"which"in r&&3===r.which)return;if(!i.isTouchEvent&&"button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;if(s.noSwiping&&l.closest(s.noSwipingSelector?s.noSwipingSelector:"."+s.noSwipingClass)[0])return void(t.allowClick=!0);if(s.swipeHandler&&!l.closest(s.swipeHandler)[0])return;a.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,a.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;const c=a.currentX,u=a.currentY,h=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,f=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!h||!(c<=f||c>=o.screen.width-f)){if(p.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=c,a.startY=u,i.touchStartTime=p.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==r.type){let e=!0;l.is(i.formElements)&&(e=!1),n.activeElement&&d(n.activeElement).is(i.formElements)&&n.activeElement!==l[0]&&n.activeElement.blur();const a=e&&t.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||a)&&r.preventDefault()}t.emit("touchStart",r)}}function S(e){const t=this,i=t.touchEventsData,{params:s,touches:a,rtlTranslate:r}=t;let o=e;if(o.originalEvent&&(o=o.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",o));if(i.isTouchEvent&&"touchmove"!==o.type)return;const l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),c="touchmove"===o.type?l.pageX:o.pageX,u="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return a.startX=c,void(a.startY=u);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(p.extend(a,{startX:c,startY:u,currentX:c,currentY:u}),i.touchStartTime=p.now()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(t.isVertical()){if(u<a.startY&&t.translate<=t.maxTranslate()||u>a.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<a.startX&&t.translate<=t.maxTranslate()||c>a.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&n.activeElement&&o.target===n.activeElement&&d(o.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",o),o.targetTouches&&o.targetTouches.length>1)return;a.currentX=c,a.currentY=u;const h=a.currentX-a.startX,f=a.currentY-a.startY;if(t.params.threshold&&Math.sqrt(h**2+f**2)<t.params.threshold)return;if(void 0===i.isScrolling){let e;t.isHorizontal()&&a.currentY===a.startY||t.isVertical()&&a.currentX===a.startX?i.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=t.isHorizontal()?e>s.touchAngle:90-e>s.touchAngle)}if(i.isScrolling&&t.emit("touchMoveOpposite",o),void 0===i.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;t.allowClick=!1,!s.cssMode&&o.cancelable&&o.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&o.stopPropagation(),i.isMoved||(s.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",o)),t.emit("sliderMove",o),i.isMoved=!0;let m=t.isHorizontal()?h:f;a.diff=m,m*=s.touchRatio,r&&(m=-m),t.swipeDirection=m>0?"prev":"next",i.currentTranslate=m+i.startTranslate;let v=!0,g=s.resistanceRatio;if(s.touchReleaseOnEdges&&(g=0),m>0&&i.currentTranslate>t.minTranslate()?(v=!1,s.resistance&&(i.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+i.startTranslate+m)**g)):m<0&&i.currentTranslate<t.maxTranslate()&&(v=!1,s.resistance&&(i.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-i.startTranslate-m)**g)),v&&(o.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(m)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,i.currentTranslate=i.startTranslate,void(a.diff=t.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:a[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:a[t.isHorizontal()?"currentX":"currentY"],time:p.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}function C(e){const t=this,i=t.touchEventsData,{params:s,touches:a,rtlTranslate:n,$wrapperEl:r,slidesGrid:o,snapGrid:l}=t;let d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=p.now(),u=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),u<300&&c-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=p.now(),p.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=s.followFinger?n?t.translate:-t.translate:-i.currentTranslate,s.cssMode)return;if(s.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){const e=i.velocities.pop(),a=i.velocities.pop(),n=e.position-a.position,r=e.time-a.time;t.velocity=n/r,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(r>150||p.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;let e=1e3*s.freeModeMomentumRatio;const a=t.velocity*e;let o=t.translate+a;n&&(o=-o);let d,c=!1;const u=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;let h;if(o<t.maxTranslate())s.freeModeMomentumBounce?(o+t.maxTranslate()<-u&&(o=t.maxTranslate()-u),d=t.maxTranslate(),c=!0,i.allowMomentumBounce=!0):o=t.maxTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(o>t.minTranslate())s.freeModeMomentumBounce?(o-t.minTranslate()>u&&(o=t.minTranslate()+u),d=t.minTranslate(),c=!0,i.allowMomentumBounce=!0):o=t.minTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(s.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-o){e=t;break}o=Math.abs(l[e]-o)<Math.abs(l[e-1]-o)||"next"===t.swipeDirection?l[e]:l[e-1],o=-o}if(h&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity){if(e=n?Math.abs((-o-t.translate)/t.velocity):Math.abs((o-t.translate)/t.velocity),s.freeModeSticky){const i=Math.abs((n?-o:o)-t.translate),a=t.slidesSizesGrid[t.activeIndex];e=i<a?s.speed:i<2*a?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&c?(t.updateProgress(d),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout(()=>{t.setTranslate(d),r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(o),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(o),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();return void((!s.freeModeMomentum||u>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let f=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<s.slidesPerGroupSkip?1:s.slidesPerGroup){const t=e<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==o[e+t]?h>=o[e]&&h<o[e+t]&&(f=e,m=o[e+t]-o[e]):h>=o[e]&&(f=e,m=o[o.length-1]-o[o.length-2])}const v=(h-o[f])/m,g=f<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(u>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=s.longSwipesRatio?t.slideTo(f+g):t.slideTo(f)),"prev"===t.swipeDirection&&(v>1-s.longSwipesRatio?t.slideTo(f+g):t.slideTo(f))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(f+g):t.slideTo(f):("next"===t.swipeDirection&&t.slideTo(f+g),"prev"===t.swipeDirection&&t.slideTo(f))}}function M(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:a,snapGrid:n}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=a,e.allowSlideNext=s,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function $(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function P(){const e=this,{wrapperEl:t,rtlTranslate:i}=e;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();s=0===a?0:(e.translate-e.minTranslate())/a,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let k=!1;function L(){}var z={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const A={update:m,translate:v,transition:g,slide:b,loop:y,grabCursor:w,manipulation:x,events:{attachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:a}=e;e.onTouchStart=T.bind(e),e.onTouchMove=S.bind(e),e.onTouchEnd=C.bind(e),t.cssMode&&(e.onScroll=P.bind(e)),e.onClick=$.bind(e);const r=!!t.nested;if(!h.touch&&h.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),n.addEventListener(i.move,e.onTouchMove,r),n.addEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const a=!("touchstart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,a),s.addEventListener(i.move,e.onTouchMove,h.passiveListener?{passive:!1,capture:r}:r),s.addEventListener(i.end,e.onTouchEnd,a),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,a),k||(n.addEventListener("touchstart",L),k=!0)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.addEventListener("mousedown",e.onTouchStart,!1),n.addEventListener("mousemove",e.onTouchMove,r),n.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",e.onClick,!0),t.cssMode&&a.addEventListener("scroll",e.onScroll),t.updateOnWindowResize?e.on(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",M,!0):e.on("observerUpdate",M,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:a}=e,r=!!t.nested;if(!h.touch&&h.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),n.removeEventListener(i.move,e.onTouchMove,r),n.removeEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const a=!("onTouchStart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,a),s.removeEventListener(i.move,e.onTouchMove,r),s.removeEventListener(i.end,e.onTouchEnd,a),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,a)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.removeEventListener("mousedown",e.onTouchStart,!1),n.removeEventListener("mousemove",e.onTouchMove,r),n.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",e.onClick,!0),t.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",M)}},breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:i,loopedSlides:s=0,params:a,$el:n}=e,r=a.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=e.getBreakpoint(r);if(o&&e.currentBreakpoint!==o){const l=o in r?r[o]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(e=>{const t=l[e];void 0!==t&&(l[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});const d=l||e.originalParams,c=a.slidesPerColumn>1,u=d.slidesPerColumn>1;c&&!u?n.removeClass(`${a.containerModifierClass}multirow ${a.containerModifierClass}multirow-column`):!c&&u&&(n.addClass(a.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&n.addClass(a.containerModifierClass+"multirow-column"));const h=d.direction&&d.direction!==a.direction,f=a.loop&&(d.slidesPerView!==a.slidesPerView||h);h&&i&&e.changeDirection(),p.extend(e.params,d),p.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,f&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}},getBreakpoint:function(e){if(!e)return;let t=!1;const i=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:o.innerHeight*t,point:e}}return{value:e,point:e}});i.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<i.length;e+=1){const{point:s,value:a}=i[e];a<=o.innerWidth&&(t=s)}return t||"max"}},checkOverflow:{checkOverflow:function(){const e=this,t=e.params,i=e.isLocked,s=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&s?e.isLocked=s<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:i,$el:s}=this,a=[];a.push("initialized"),a.push(t.direction),t.freeMode&&a.push("free-mode"),t.autoHeight&&a.push("autoheight"),i&&a.push("rtl"),t.slidesPerColumn>1&&(a.push("multirow"),"column"===t.slidesPerColumnFill&&a.push("multirow-column")),E.android&&a.push("android"),E.ios&&a.push("ios"),t.cssMode&&a.push("css-mode"),a.forEach(i=>{e.push(t.containerModifierClass+i)}),s.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,s,a,n){let r;function l(){n&&n()}d(e).parent("picture")[0]||e.complete&&a?l():t?(r=new o.Image,r.onload=l,r.onerror=l,s&&(r.sizes=s),i&&(r.srcset=i),t&&(r.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let i=0;i<e.imagesToLoad.length;i+=1){const s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},I={};class O extends f{constructor(...e){let t,i;1===e.length&&e[0].constructor&&e[0].constructor===Object?i=e[0]:[t,i]=e,i||(i={}),i=p.extend({},i),t&&!i.el&&(i.el=t),super(i),Object.keys(A).forEach(e=>{Object.keys(A[e]).forEach(t=>{O.prototype[t]||(O.prototype[t]=A[e][t])})});const s=this;void 0===s.modules&&(s.modules={}),Object.keys(s.modules).forEach(e=>{const t=s.modules[e];if(t.params){const e=Object.keys(t.params)[0],s=t.params[e];if("object"!=typeof s||null===s)return;if(!(e in i)||!("enabled"in s))return;!0===i[e]&&(i[e]={enabled:!0}),"object"!=typeof i[e]||"enabled"in i[e]||(i[e].enabled=!0),i[e]||(i[e]={enabled:!1})}});const a=p.extend({},z);s.useModulesParams(a),s.params=p.extend({},a,I,i),s.originalParams=p.extend({},s.params),s.passedParams=p.extend({},i),s.$=d;const n=d(s.params.el);if(t=n[0],!t)return;if(n.length>1){const e=[];return n.each((t,s)=>{const a=p.extend({},i,{el:s});e.push(new O(a))}),e}let r;return t.swiper=s,n.data("swiper",s),t&&t.shadowRoot&&t.shadowRoot.querySelector?(r=d(t.shadowRoot.querySelector("."+s.params.wrapperClass)),r.children=e=>n.children(e)):r=n.children("."+s.params.wrapperClass),p.extend(s,{$el:n,el:t,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:d(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===s.params.direction,isVertical:()=>"vertical"===s.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===s.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"];let t=["mousedown","mousemove","mouseup"];return h.pointerEvents&&(t=["pointerdown","pointermove","pointerup"]),s.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},s.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},h.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:p.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.useModules(),s.params.init&&s.init(),s}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:i,size:s,activeIndex:a}=this;let n=1;if(e.centeredSlides){let e,i=t[a].swiperSlideSize;for(let r=a+1;r<t.length;r+=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,n+=1,i>s&&(e=!0));for(let r=a-1;r>=0;r-=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,n+=1,i>s&&(e=!0))}else for(let e=a+1;e<t.length;e+=1)i[e]-i[a]<s&&(n+=1);return n}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let a;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(a=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),a||s()),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(`${i.params.containerModifierClass}${s}`).addClass(`${i.params.containerModifierClass}${e}`),i.params.direction=e,i.slides.each((t,i)=>{"vertical"===e?i.style.width="":i.style.height=""}),i.emit("changeDirection"),t&&i.update()),i}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const i=this,{params:s,$el:a,$wrapperEl:n,slides:r}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),n.removeAttr("style"),r&&r.length&&r.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(e=>{i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),p.deleteProps(i)),i.destroyed=!0),null}static extendDefaults(e){p.extend(I,e)}static get extendedDefaults(){return I}static get defaults(){return z}static get Class(){return f}static get $(){return d}}var D={name:"device",proto:{device:E},static:{device:E}},N={name:"support",proto:{support:h},static:{support:h}};const G={isEdge:!!o.navigator.userAgent.match(/Edge/g),isSafari:function(){const e=o.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent)};var H={name:"browser",proto:{browser:G},static:{browser:G}},j={name:"resize",create(){const e=this;p.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){o.addEventListener("resize",this.resize.resizeHandler),o.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){o.removeEventListener("resize",this.resize.resizeHandler),o.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const B={func:o.MutationObserver||o.WebkitMutationObserver,attach(e,t={}){const i=this,s=new(0,B.func)(e=>{if(1===e.length)return void i.emit("observerUpdate",e[0]);const t=function(){i.emit("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init(){const e=this;if(h.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let i=0;i<t.length;i+=1)e.observer.attach(t[i])}e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var X={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create(){p.extend(this,{observer:{init:B.init.bind(this),attach:B.attach.bind(this),destroy:B.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const Y={update(e){const t=this,{slidesPerView:i,slidesPerGroup:s,centeredSlides:a}=t.params,{addSlidesBefore:n,addSlidesAfter:r}=t.params.virtual,{from:o,to:l,slides:d,slidesGrid:c,renderSlide:u,offset:h}=t.virtual;t.updateActiveIndex();const f=t.activeIndex||0;let m,v,g;m=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",a?(v=Math.floor(i/2)+s+n,g=Math.floor(i/2)+s+r):(v=i+(s-1)+n,g=s+r);const b=Math.max((f||0)-g,0),y=Math.min((f||0)+v,d.length-1),w=(t.slidesGrid[b]||0)-(t.slidesGrid[0]||0);function x(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(p.extend(t.virtual,{from:b,to:y,offset:w,slidesGrid:t.slidesGrid}),o===b&&l===y&&!e)return t.slidesGrid!==c&&w!==h&&t.slides.css(m,w+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:w,from:b,to:y,slides:function(){const e=[];for(let t=b;t<=y;t+=1)e.push(d[t]);return e}()}),void x();const E=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(let e=o;e<=l;e+=1)(e<b||e>y)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<d.length;t+=1)t>=b&&t<=y&&(void 0===l||e?T.push(t):(t>l&&T.push(t),t<o&&E.push(t)));T.forEach(e=>{t.$wrapperEl.append(u(d[e],e))}),E.sort((e,t)=>t-e).forEach(e=>{t.$wrapperEl.prepend(u(d[e],e))}),t.$wrapperEl.children(".swiper-slide").css(m,w+"px"),x()},renderSlide(e,t){const i=this,s=i.params.virtual;if(s.cache&&i.virtual.cache[t])return i.virtual.cache[t];const a=s.renderSlide?d(s.renderSlide.call(i,e,t)):d(`<div class="${i.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),s.cache&&(i.virtual.cache[t]=a),a},appendSlide(e){const t=this;if("object"==typeof e&&"length"in e)for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.push(e[i]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide(e){const t=this,i=t.activeIndex;let s=i+1,a=1;if(Array.isArray(e)){for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.unshift(e[i]);s=i+e.length,a=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){const e=t.virtual.cache,i={};Object.keys(e).forEach(t=>{const s=e[t],n=s.attr("data-swiper-slide-index");n&&s.attr("data-swiper-slide-index",parseInt(n,10)+1),i[parseInt(t,10)+a]=s}),t.virtual.cache=i}t.virtual.update(!0),t.slideTo(s,0)},removeSlide(e){const t=this;if(null==e)return;let i=t.activeIndex;if(Array.isArray(e))for(let s=e.length-1;s>=0;s-=1)t.virtual.slides.splice(e[s],1),t.params.virtual.cache&&delete t.virtual.cache[e[s]],e[s]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)},removeAllSlides(){const e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}};var V={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create(){p.extend(this,{virtual:{update:Y.update.bind(this),appendSlide:Y.appendSlide.bind(this),prependSlide:Y.prependSlide.bind(this),removeSlide:Y.removeSlide.bind(this),removeAllSlides:Y.removeAllSlides.bind(this),renderSlide:Y.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){const e=this;if(!e.params.virtual.enabled)return;e.classNames.push(e.params.containerModifierClass+"virtual");const t={watchSlidesProgress:!0};p.extend(e.params,t),p.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const F={handle(e){const t=this,{rtlTranslate:i}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const a=s.keyCode||s.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===a||t.isVertical()&&40===a||34===a))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===a||t.isVertical()&&38===a||33===a))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===a||34===a||37===a||39===a||38===a||40===a)){let e=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;const s=o.innerWidth,a=o.innerHeight,n=t.$el.offset();i&&(n.left-=t.$el[0].scrollLeft);const r=[[n.left,n.top],[n.left+t.width,n.top],[n.left,n.top+t.height],[n.left+t.width,n.top+t.height]];for(let t=0;t<r.length;t+=1){const i=r[t];i[0]>=0&&i[0]<=s&&i[1]>=0&&i[1]<=a&&(e=!0)}if(!e)return}t.isHorizontal()?(33!==a&&34!==a&&37!==a&&39!==a||(s.preventDefault?s.preventDefault():s.returnValue=!1),(34!==a&&39!==a||i)&&(33!==a&&37!==a||!i)||t.slideNext(),(33!==a&&37!==a||i)&&(34!==a&&39!==a||!i)||t.slidePrev()):(33!==a&&34!==a&&38!==a&&40!==a||(s.preventDefault?s.preventDefault():s.returnValue=!1),34!==a&&40!==a||t.slideNext(),33!==a&&38!==a||t.slidePrev()),t.emit("keyPress",a)}},enable(){this.keyboard.enabled||(d(n).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(d(n).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var _={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create(){p.extend(this,{keyboard:{enabled:!1,enable:F.enable.bind(this),disable:F.disable.bind(this),handle:F.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const q={lastScrollTime:p.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:()=>o.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in n;if(!e){const t=n.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&n.implementation&&n.implementation.hasFeature&&!0!==n.implementation.hasFeature("","")&&(e=n.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,i=0,s=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=a,a=0),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=40,a*=40):(s*=800,a*=800)),s&&!t&&(t=s<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:a}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();let a=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(a=d(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!a[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let n=0;const r=i.rtlTranslate?-1:1,o=q.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;n=-o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;n=-o.pixelY}else n=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===n)return!0;if(s.invert&&(n=-n),i.params.freeMode){const e={time:p.now(),delta:Math.abs(n),direction:Math.sign(n)},{lastEventBeforeSnap:a}=i.mousewheel,r=a&&e.time<a.time+500&&e.delta<=a.delta&&e.direction===a.direction;if(!r){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();let a=i.getTranslate()+n*s.sensitivity;const o=i.isBeginning,l=i.isEnd;if(a>=i.minTranslate()&&(a=i.minTranslate()),a<=i.maxTranslate()&&(a=i.maxTranslate()),i.setTransition(0),i.setTranslate(a),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!o&&i.isBeginning||!l&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;const t=i.mousewheel.recentWheelEvents;t.length>=15&&t.shift();const s=t.length?t[t.length-1]:void 0,a=t[0];if(t.push(e),s&&(e.delta>s.delta||e.direction!==s.direction))t.splice(0);else if(t.length>=15&&e.time-a.time<500&&a.delta-e.delta>=1&&e.delta<=6){const s=n>0?.8:.2;i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.mousewheel.timeout=p.nextTick(()=>{i.slideToClosest(i.params.speed,!0,void 0,s)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=p.nextTick(()=>{i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(r||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),a===i.minTranslate()||a===i.maxTranslate())return!0}}else{const t={time:p.now(),delta:Math.abs(n),direction:Math.sign(n),raw:e},s=i.mousewheel.recentWheelEvents;s.length>=2&&s.shift();const a=s.length?s[s.length-1]:void 0;if(s.push(t),a?(t.direction!==a.direction||t.delta>a.delta||t.time>a.time+150)&&i.mousewheel.animateSlider(t):i.mousewheel.animateSlider(t),i.mousewheel.releaseScroll(t))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider(e){const t=this;return e.delta>=6&&p.now()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new o.Date).getTime(),!1)},releaseScroll(e){const t=this,i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1},enable(){const e=this,t=q.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.on("mouseenter",e.mousewheel.handleMouseEnter),i.on("mouseleave",e.mousewheel.handleMouseLeave),i.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this,t=q.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const R={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:i,$prevEl:s}=e.navigation;s&&s.length>0&&(e.isBeginning?s.addClass(t.disabledClass):s.removeClass(t.disabledClass),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},onPrevClick(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let i,s;t.nextEl&&(i=d(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&i.length>1&&1===e.$el.find(t.nextEl).length&&(i=e.$el.find(t.nextEl))),t.prevEl&&(s=d(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&s.length>1&&1===e.$el.find(t.prevEl).length&&(s=e.$el.find(t.prevEl))),i&&i.length>0&&i.on("click",e.navigation.onNextClick),s&&s.length>0&&s.on("click",e.navigation.onPrevClick),p.extend(e.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:s,prevEl:s&&s[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:i}=e.navigation;t&&t.length&&(t.off("click",e.navigation.onNextClick),t.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}};const W={update(){const e=this,t=e.rtl,i=e.params.pagination;if(!i.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,a=e.pagination.$el;let n;const r=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(n=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),n>s-1-2*e.loopedSlides&&(n-=s-2*e.loopedSlides),n>r-1&&(n-=r),n<0&&"bullets"!==e.params.paginationType&&(n=r+n)):n=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let r,o,l;if(i.dynamicBullets&&(e.pagination.bulletSize=s.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=n-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),r=n-e.pagination.dynamicBulletIndex,o=r+(Math.min(s.length,i.dynamicMainBullets)-1),l=(o+r)/2),s.removeClass(`${i.bulletActiveClass} ${i.bulletActiveClass}-next ${i.bulletActiveClass}-next-next ${i.bulletActiveClass}-prev ${i.bulletActiveClass}-prev-prev ${i.bulletActiveClass}-main`),a.length>1)s.each((e,t)=>{const s=d(t),a=s.index();a===n&&s.addClass(i.bulletActiveClass),i.dynamicBullets&&(a>=r&&a<=o&&s.addClass(i.bulletActiveClass+"-main"),a===r&&s.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a===o&&s.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{const t=s.eq(n),a=t.index();if(t.addClass(i.bulletActiveClass),i.dynamicBullets){const t=s.eq(r),n=s.eq(o);for(let e=r;e<=o;e+=1)s.eq(e).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(a>=s.length-i.dynamicMainBullets){for(let e=i.dynamicMainBullets;e>=0;e-=1)s.eq(s.length-e).addClass(i.bulletActiveClass+"-main");s.eq(s.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){const a=Math.min(s.length,i.dynamicMainBullets+4),n=(e.pagination.bulletSize*a-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,r=t?"right":"left";s.css(e.isHorizontal()?r:"top",n+"px")}}if("fraction"===i.type&&(a.find("."+i.currentClass).text(i.formatFractionCurrent(n+1)),a.find("."+i.totalClass).text(i.formatFractionTotal(r))),"progressbar"===i.type){let t;t=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const s=(n+1)/r;let o=1,l=1;"horizontal"===t?o=s:l=s,a.find("."+i.progressbarFillClass).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(a.html(i.renderCustom(e,n+1,r)),e.emit("paginationRender",e,a[0])):e.emit("paginationUpdate",e,a[0]),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,s=e.pagination.$el;let a="";if("bullets"===t.type){const n=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let i=0;i<n;i+=1)t.renderBullet?a+=t.renderBullet.call(e,i,t.bulletClass):a+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;s.html(a),e.pagination.bullets=s.find("."+t.bulletClass)}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`,s.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,s.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let i=d(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();let i=d(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),p.extend(e.pagination,{$el:i,el:i[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}};const U={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:i,progress:s}=e,{dragSize:a,trackSize:n,$dragEl:r,$el:o}=t,l=e.params.scrollbar;let d=a,c=(n-a)*s;i?(c=-c,c>0?(d=a-c,c=0):-c+a>n&&(d=n+c)):c<0?(d=a+c,c=0):c+a>n&&(d=n-c),e.isHorizontal()?(r.transform(`translate3d(${c}px, 0, 0)`),r[0].style.width=d+"px"):(r.transform(`translate3d(0px, ${c}px, 0)`),r[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{o[0].style.opacity=0,o.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:i,$el:s}=t;i[0].style.width="",i[0].style.height="";const a=e.isHorizontal()?s[0].offsetWidth:s[0].offsetHeight,n=e.size/e.virtualSize,r=n*(a/e.size);let o;o="auto"===e.params.scrollbar.dragSize?a*n:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=o+"px":i[0].style.height=o+"px",s[0].style.display=n>=1?"none":"",e.params.scrollbar.hide&&(s[0].style.opacity=0),p.extend(t,{trackSize:a,divider:n,moveDivider:r,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},getPointerPosition(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition(e){const{scrollbar:t,rtlTranslate:i}=this,{$el:s,dragSize:a,trackSize:n,dragStartPos:r}=t;let o;o=(t.getPointerPosition(e)-s.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:a/2))/(n-a),o=Math.max(Math.min(o,1),0),i&&(o=1-o);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:a}=t,{$el:n,$dragEl:r}=s;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?s.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.transition(100),r.transition(100),s.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),n.transition(0),i.hide&&n.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:i}=this,{$el:s,$dragEl:a}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:a}=t,{$el:n}=s;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),a.transition("")),i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=p.nextTick(()=>{n.css("opacity",0),n.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:a}=e,r=t.$el[0],o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.addEventListener(i.start,e.scrollbar.onDragStart,o),r.addEventListener(i.move,e.scrollbar.onDragMove,o),r.addEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.addEventListener(s.start,e.scrollbar.onDragStart,o),n.addEventListener(s.move,e.scrollbar.onDragMove,o),n.addEventListener(s.end,e.scrollbar.onDragEnd,l))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:a}=e,r=t.$el[0],o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.removeEventListener(i.start,e.scrollbar.onDragStart,o),r.removeEventListener(i.move,e.scrollbar.onDragMove,o),r.removeEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.removeEventListener(s.start,e.scrollbar.onDragStart,o),n.removeEventListener(s.move,e.scrollbar.onDragMove,o),n.removeEventListener(s.end,e.scrollbar.onDragEnd,l))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:i}=e,s=e.params.scrollbar;let a=d(s.el);e.params.uniqueNavElements&&"string"==typeof s.el&&a.length>1&&1===i.find(s.el).length&&(a=i.find(s.el));let n=a.find("."+e.params.scrollbar.dragClass);0===n.length&&(n=d(`<div class="${e.params.scrollbar.dragClass}"></div>`),a.append(n)),p.extend(t,{$el:a,el:a[0],$dragEl:n,dragEl:n[0]}),s.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const K={setTransform(e,t){const{rtl:i}=this,s=d(e),a=i?-1:1,n=s.attr("data-swiper-parallax")||"0";let r=s.attr("data-swiper-parallax-x"),o=s.attr("data-swiper-parallax-y");const l=s.attr("data-swiper-parallax-scale"),c=s.attr("data-swiper-parallax-opacity");if(r||o?(r=r||"0",o=o||"0"):this.isHorizontal()?(r=n,o="0"):(o=n,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*t*a+"%":r*t*a+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=c){const e=c-(c-1)*(1-Math.abs(t));s[0].style.opacity=e}if(null==l)s.transform(`translate3d(${r}, ${o}, 0px)`);else{const e=l-(l-1)*(1-Math.abs(t));s.transform(`translate3d(${r}, ${o}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:i,progress:s,snapGrid:a}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,s)}),i.each((t,i)=>{let n=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(t/2)-s*(a.length-1)),n=Math.min(Math.max(n,-1),1),d(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,n)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{const s=d(i);let a=parseInt(s.attr("data-swiper-parallax-duration"),10)||e;0===e&&(a=0),s.transition(a)})}};const J={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt((s-t)**2+(a-i)**2)},onGestureStart(e){const t=this,i=t.params.zoom,s=t.zoom,{gesture:a}=s;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,a.scaleStart=J.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=d(e.target).closest("."+t.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=J.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=h.gestures?e.scale*i.currentScale:s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+(i.scale-s.maxRatio+1)**.5),i.scale<t.minRatio&&(i.scale=t.minRatio+1-(t.minRatio-i.scale+1)**.5),s.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!E.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:i,image:s}=t;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(E.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,i=t.zoom,{gesture:s,image:a,velocity:n}=i;if(!s.$imageEl||0===s.$imageEl.length)return;if(t.allowClick=!1,!a.isTouched||!s.$slideEl)return;a.isMoved||(a.width=s.$imageEl[0].offsetWidth,a.height=s.$imageEl[0].offsetHeight,a.startX=p.getTranslate(s.$imageWrapEl[0],"x")||0,a.startY=p.getTranslate(s.$imageWrapEl[0],"y")||0,s.slideWidth=s.$slideEl[0].offsetWidth,s.slideHeight=s.$slideEl[0].offsetHeight,s.$imageWrapEl.transition(0),t.rtl&&(a.startX=-a.startX,a.startY=-a.startY));const r=a.width*i.scale,o=a.height*i.scale;if(!(r<s.slideWidth&&o<s.slideHeight)){if(a.minX=Math.min(s.slideWidth/2-r/2,0),a.maxX=-a.minX,a.minY=Math.min(s.slideHeight/2-o/2,0),a.maxY=-a.minY,a.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!a.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(a.minX)===Math.floor(a.startX)&&a.touchesCurrent.x<a.touchesStart.x||Math.floor(a.maxX)===Math.floor(a.startX)&&a.touchesCurrent.x>a.touchesStart.x))return void(a.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(a.minY)===Math.floor(a.startY)&&a.touchesCurrent.y<a.touchesStart.y||Math.floor(a.maxY)===Math.floor(a.startY)&&a.touchesCurrent.y>a.touchesStart.y))return void(a.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),a.isMoved=!0,a.currentX=a.touchesCurrent.x-a.touchesStart.x+a.startX,a.currentY=a.touchesCurrent.y-a.touchesStart.y+a.startY,a.currentX<a.minX&&(a.currentX=a.minX+1-(a.minX-a.currentX+1)**.8),a.currentX>a.maxX&&(a.currentX=a.maxX-1+(a.currentX-a.maxX+1)**.8),a.currentY<a.minY&&(a.currentY=a.minY+1-(a.minY-a.currentY+1)**.8),a.currentY>a.maxY&&(a.currentY=a.maxY-1+(a.currentY-a.maxY+1)**.8),n.prevPositionX||(n.prevPositionX=a.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=a.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(a.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(a.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(a.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(a.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=a.touchesCurrent.x,n.prevPositionY=a.touchesCurrent.y,n.prevTime=Date.now(),s.$imageWrapEl.transform(`translate3d(${a.currentX}px, ${a.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:i,velocity:s}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;let a=300,n=300;const r=s.x*a,o=i.currentX+r,l=s.y*n,d=i.currentY+l;0!==s.x&&(a=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(n=Math.abs((d-i.currentY)/s.y));const c=Math.max(a,n);i.currentX=o,i.currentY=d;const u=i.width*e.scale,p=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-p/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(c).transform(`translate3d(${i.currentX}px, ${i.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,i=t.zoom,s=t.params.zoom,{gesture:a,image:n}=i;if(a.$slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?a.$slideEl=t.$wrapperEl.children("."+t.params.slideActiveClass):a.$slideEl=t.slides.eq(t.activeIndex),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+s.containerClass)),!a.$imageEl||0===a.$imageEl.length)return;let r,o,l,d,c,u,p,h,f,m,v,g,b,y,w,x,E,T;a.$slideEl.addClass(""+s.zoomedSlideClass),void 0===n.touchesStart.x&&e?(r="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,o="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(r=n.touchesStart.x,o=n.touchesStart.y),i.scale=a.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,i.currentScale=a.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,e?(E=a.$slideEl[0].offsetWidth,T=a.$slideEl[0].offsetHeight,l=a.$slideEl.offset().left,d=a.$slideEl.offset().top,c=l+E/2-r,u=d+T/2-o,f=a.$imageEl[0].offsetWidth,m=a.$imageEl[0].offsetHeight,v=f*i.scale,g=m*i.scale,b=Math.min(E/2-v/2,0),y=Math.min(T/2-g/2,0),w=-b,x=-y,p=c*i.scale,h=u*i.scale,p<b&&(p=b),p>w&&(p=w),h<y&&(h=y),h>x&&(h=x)):(p=0,h=0),a.$imageWrapEl.transition(300).transform(`translate3d(${p}px, ${h}px,0)`),a.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${i.scale})`)},out(){const e=this,t=e.zoom,i=e.params.zoom,{gesture:s}=t;s.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?s.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):s.$slideEl=e.slides.eq(e.activeIndex),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass)),s.$imageEl&&0!==s.$imageEl.length&&(t.scale=1,t.currentScale=1,s.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),s.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),s.$slideEl.removeClass(""+i.zoomedSlideClass),s.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;h.gestures?(e.$wrapperEl.on("gesturestart",a,t.onGestureStart,i),e.$wrapperEl.on("gesturechange",a,t.onGestureChange,i),e.$wrapperEl.on("gestureend",a,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,a,t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,a,t.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,a,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,a,t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;h.gestures?(e.$wrapperEl.off("gesturestart",a,t.onGestureStart,i),e.$wrapperEl.off("gesturechange",a,t.onGestureChange,i),e.$wrapperEl.off("gestureend",a,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,a,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,a,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,a,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,a,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)}};const Z={loadInSlide(e,t=!0){const i=this,s=i.params.lazy;if(void 0===e)return;if(0===i.slides.length)return;const a=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children(`.${i.params.slideClass}[data-swiper-slide-index="${e}"]`):i.slides.eq(e);let n=a.find(`.${s.elementClass}:not(.${s.loadedClass}):not(.${s.loadingClass})`);!a.hasClass(s.elementClass)||a.hasClass(s.loadedClass)||a.hasClass(s.loadingClass)||(n=n.add(a[0])),0!==n.length&&n.each((e,n)=>{const r=d(n);r.addClass(s.loadingClass);const o=r.attr("data-background"),l=r.attr("data-src"),c=r.attr("data-srcset"),u=r.attr("data-sizes"),p=r.parent("picture");i.loadImage(r[0],l||o,c,u,!1,()=>{if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(o?(r.css("background-image",`url("${o}")`),r.removeAttr("data-background")):(c&&(r.attr("srcset",c),r.removeAttr("data-srcset")),u&&(r.attr("sizes",u),r.removeAttr("data-sizes")),p.length&&p.children("source").each((e,t)=>{const i=d(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))}),l&&(r.attr("src",l),r.removeAttr("data-src"))),r.addClass(s.loadedClass).removeClass(s.loadingClass),a.find("."+s.preloaderClass).remove(),i.params.loop&&t){const e=a.attr("data-swiper-slide-index");if(a.hasClass(i.params.slideDuplicateClass)){const t=i.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${i.params.slideDuplicateClass})`);i.lazy.loadInSlide(t.index(),!1)}else{const t=i.$wrapperEl.children(`.${i.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);i.lazy.loadInSlide(t.index(),!1)}}i.emit("lazyImageReady",a[0],r[0]),i.params.autoHeight&&i.updateAutoHeight()}}),i.emit("lazyImageLoad",a[0],r[0])})},load(){const e=this,{$wrapperEl:t,params:i,slides:s,activeIndex:a}=e,n=e.virtual&&i.virtual.enabled,r=i.lazy;let o=i.slidesPerView;function l(e){if(n){if(t.children(`.${i.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(s[e])return!0;return!1}function c(e){return n?d(e).attr("data-swiper-slide-index"):d(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((t,i)=>{const s=n?d(i).attr("data-swiper-slide-index"):d(i).index();e.lazy.loadInSlide(s)});else if(o>1)for(let t=a;t<a+o;t+=1)l(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(a);if(r.loadPrevNext)if(o>1||r.loadPrevNextAmount&&r.loadPrevNextAmount>1){const t=r.loadPrevNextAmount,i=o,n=Math.min(a+i+Math.max(t,i),s.length),d=Math.max(a-Math.max(i,t),0);for(let t=a+o;t<n;t+=1)l(t)&&e.lazy.loadInSlide(t);for(let t=d;t<a;t+=1)l(t)&&e.lazy.loadInSlide(t)}else{const s=t.children("."+i.slideNextClass);s.length>0&&e.lazy.loadInSlide(c(s));const a=t.children("."+i.slidePrevClass);a.length>0&&e.lazy.loadInSlide(c(a))}}};const Q={LinearSpline:function(e,t){const i=function(){let e,t,i;return(s,a)=>{for(t=-1,e=s.length;e-t>1;)i=e+t>>1,s[i]<=a?t=i:e=i;return e}}();let s,a;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(a=i(this.x,e),s=a-1,(e-this.x[s])*(this.y[a]-this.y[s])/(this.x[a]-this.x[s])+this.y[s]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new Q.LinearSpline(t.slidesGrid,e.slidesGrid):new Q.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const i=this,s=i.controller.control;let a,n;function r(e){const t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),n=-i.controller.spline.interpolate(-t)),n&&"container"!==i.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),n=(t-i.minTranslate())*a+e.minTranslate()),i.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(s))for(let e=0;e<s.length;e+=1)s[e]!==t&&s[e]instanceof O&&r(s[e]);else s instanceof O&&t!==s&&r(s)},setTransition(e,t){const i=this,s=i.controller.control;let a;function n(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&p.nextTick(()=>{t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(()=>{s&&(t.params.loop&&"slide"===i.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(s))for(a=0;a<s.length;a+=1)s[a]!==t&&s[a]instanceof O&&n(s[a]);else s instanceof O&&t!==s&&n(s)}};const ee={makeElFocusable:e=>(e.attr("tabIndex","0"),e),makeElNotFocusable:e=>(e.attr("tabIndex","-1"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,i=t.params.a11y;if(13!==e.keyCode)return;const s=d(e.target);t.navigation&&t.navigation.$nextEl&&s.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&s.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&s.is("."+t.params.pagination.bulletClass)&&s[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop||!e.navigation)return;const{$nextEl:t,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),t&&t.length>0&&(e.isEnd?(e.a11y.disableEl(t),e.a11y.makeElNotFocusable(t)):(e.a11y.enableEl(t),e.a11y.makeElFocusable(t)))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((i,s)=>{const a=d(s);e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,t.paginationBulletMessage.replace(/\{\{index\}\}/,a.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let i,s;e.navigation&&e.navigation.$nextEl&&(i=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(s=e.navigation.$prevEl),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.nextSlideMessage),i.on("keydown",e.a11y.onEnterKey)),s&&(e.a11y.makeElFocusable(s),e.a11y.addElRole(s,"button"),e.a11y.addElLabel(s,t.prevSlideMessage),s.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy(){const e=this;let t,i;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}};const te={init(){const e=this;if(!e.params.history)return;if(!o.history||!o.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=te.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||o.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||o.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=te.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=o.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const i=this.slides.eq(t);let s=te.slugify(i.attr("data-history"));o.location.pathname.includes(e)||(s=`${e}/${s}`);const a=o.history.state;a&&a.value===s||(this.params.history.replaceState?o.history.replaceState({value:s},null,s):o.history.pushState({value:s},null,s))},slugify:e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,i){const s=this;if(t)for(let a=0,n=s.slides.length;a<n;a+=1){const n=s.slides.eq(a);if(te.slugify(n.attr("data-history"))===t&&!n.hasClass(s.params.slideDuplicateClass)){const t=n.index();s.slideTo(t,e,i)}}else s.slideTo(0,e,i)}};const ie={onHashCange(){const e=this;e.emit("hashChange");const t=n.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){const i=e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index();if(void 0===i)return;e.slideTo(i)}},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState)o.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{const t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");n.location.hash=i||"",e.emit("hashSet")}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=n.location.hash.replace("#","");if(t){const i=0;for(let s=0,a=e.slides.length;s<a;s+=1){const a=e.slides.eq(s);if((a.attr("data-hash")||a.attr("data-history"))===t&&!a.hasClass(e.params.slideDuplicateClass)){const t=a.index();e.slideTo(t,i,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&d(o).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&d(o).off("hashchange",e.hashNavigation.onHashCange)}};const se={run(){const e=this,t=e.slides.eq(e.activeIndex);let i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=p.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}};const ae={setTranslate(){const e=this,{slides:t}=e;for(let i=0;i<t.length;i+=1){const t=e.slides.eq(i);let s=-t[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);let a=0;e.isHorizontal()||(a=s,s=0);const n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:n}).transform(`translate3d(${s}px, ${a}px, 0px)`)}},setTransition(e){const t=this,{slides:i,$wrapperEl:s}=t;if(i.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)s.trigger(i[e])})}}};const ne={setTranslate(){const{$el:e,$wrapperEl:t,slides:i,width:s,height:a,rtlTranslate:n,size:r}=this,o=this.params.cubeEffect,l=this.isHorizontal(),c=this.virtual&&this.params.virtual.enabled;let u,p=0;o.shadow&&(l?(u=t.find(".swiper-cube-shadow"),0===u.length&&(u=d('<div class="swiper-cube-shadow"></div>'),t.append(u)),u.css({height:s+"px"})):(u=e.find(".swiper-cube-shadow"),0===u.length&&(u=d('<div class="swiper-cube-shadow"></div>'),e.append(u))));for(let e=0;e<i.length;e+=1){const t=i.eq(e);let s=e;c&&(s=parseInt(t.attr("data-swiper-slide-index"),10));let a=90*s,u=Math.floor(a/360);n&&(a=-a,u=Math.floor(-a/360));const h=Math.max(Math.min(t[0].progress,1),-1);let f=0,m=0,v=0;s%4==0?(f=4*-u*r,v=0):(s-1)%4==0?(f=0,v=4*-u*r):(s-2)%4==0?(f=r+4*u*r,v=r):(s-3)%4==0&&(f=-r,v=3*r+4*r*u),n&&(f=-f),l||(m=f,f=0);const g=`rotateX(${l?0:-a}deg) rotateY(${l?a:0}deg) translate3d(${f}px, ${m}px, ${v}px)`;if(h<=1&&h>-1&&(p=90*s+90*h,n&&(p=90*-s-90*h)),t.transform(g),o.slideShadows){let e=l?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=l?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${l?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${l?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=Math.max(-h,0)),i.length&&(i[0].style.opacity=Math.max(h,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${r/2}px`,"-moz-transform-origin":`50% 50% -${r/2}px`,"-ms-transform-origin":`50% 50% -${r/2}px`,"transform-origin":`50% 50% -${r/2}px`}),o.shadow)if(l)u.transform(`translate3d(0px, ${s/2+o.shadowOffset}px, ${-s/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`);else{const e=Math.abs(p)-90*Math.floor(Math.abs(p)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=o.shadowScale,s=o.shadowScale/t,n=o.shadowOffset;u.transform(`scale3d(${i}, 1, ${s}) translate3d(0px, ${a/2+n}px, ${-a/2/s}px) rotateX(-90deg)`)}const h=G.isSafari||G.isUiWebView?-r/2:0;t.transform(`translate3d(0px,0,${h}px) rotateX(${this.isHorizontal()?0:p}deg) rotateY(${this.isHorizontal()?-p:0}deg)`)},setTransition(e){const{$el:t,slides:i}=this;i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const re={setTranslate(){const e=this,{slides:t,rtlTranslate:i}=e;for(let s=0;s<t.length;s+=1){const a=t.eq(s);let n=a[0].progress;e.params.flipEffect.limitRotation&&(n=Math.max(Math.min(a[0].progress,1),-1));let r=-180*n,o=0,l=-a[0].swiperSlideOffset,c=0;if(e.isHorizontal()?i&&(r=-r):(c=l,l=0,o=-r,r=0),a[0].style.zIndex=-Math.abs(Math.round(n))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),i=e.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===t.length&&(t=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),a.append(t)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),a.append(i)),t.length&&(t[0].style.opacity=Math.max(-n,0)),i.length&&(i[0].style.opacity=Math.max(n,0))}a.transform(`translate3d(${l}px, ${c}px, 0px) rotateX(${o}deg) rotateY(${r}deg)`)}},setTransition(e){const t=this,{slides:i,activeIndex:s,$wrapperEl:a}=t;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.eq(s).transitionEnd((function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)a.trigger(i[e])}))}}};const oe={setTranslate(){const{width:e,height:t,slides:i,$wrapperEl:s,slidesSizesGrid:a}=this,n=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,c=r?n.rotate:-n.rotate,u=n.depth;for(let e=0,t=i.length;e<t;e+=1){const t=i.eq(e),s=a[e],o=(l-t[0].swiperSlideOffset-s/2)/s*n.modifier;let p=r?c*o:0,h=r?0:c*o,f=-u*Math.abs(o),m=n.stretch;"string"==typeof m&&-1!==m.indexOf("%")&&(m=parseFloat(n.stretch)/100*s);let v=r?0:m*o,g=r?m*o:0,b=1-(1-n.scale)*Math.abs(o);Math.abs(g)<.001&&(g=0),Math.abs(v)<.001&&(v=0),Math.abs(f)<.001&&(f=0),Math.abs(p)<.001&&(p=0),Math.abs(h)<.001&&(h=0),Math.abs(b)<.001&&(b=0);const y=`translate3d(${g}px,${v}px,${f}px)  rotateX(${h}deg) rotateY(${p}deg) scale(${b})`;if(t.transform(y),t[0].style.zIndex=1-Math.abs(Math.round(o)),n.slideShadows){let e=r?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=r?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${r?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${r?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=o>0?o:0),i.length&&(i[0].style.opacity=-o>0?-o:0)}}if(h.pointerEvents||h.prefixedPointerEvents){s[0].style.perspectiveOrigin=l+"px 50%"}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const le={init(){const e=this,{thumbs:t}=e.params,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,p.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),p.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):p.isObject(t.swiper)&&(e.thumbs.swiper=new i(p.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick(){const e=this,t=e.thumbs.swiper;if(!t)return;const i=t.clickedIndex,s=t.clickedSlide;if(s&&d(s).hasClass(e.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let a;if(a=t.params.loop?parseInt(d(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){let t=e.activeIndex;e.slides.eq(t).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,t=e.activeIndex);const i=e.slides.eq(t).prevAll(`[data-swiper-slide-index="${a}"]`).eq(0).index(),s=e.slides.eq(t).nextAll(`[data-swiper-slide-index="${a}"]`).eq(0).index();a=void 0===i?s:void 0===s?i:s-t<t-i?s:i}e.slideTo(a)},update(e){const t=this,i=t.thumbs.swiper;if(!i)return;const s="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,a=t.params.thumbs.autoScrollOffset,n=a&&!i.params.loop;if(t.realIndex!==i.realIndex||n){let r,o,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);const e=i.slides.eq(l).prevAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index(),s=i.slides.eq(l).nextAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index();r=void 0===e?s:void 0===s?e:s-l==l-e?l:s-l<l-e?s:e,o=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,o=r>t.previousIndex?"next":"prev";n&&(r+="next"===o?a:-1*a),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(r)<0&&(i.params.centeredSlides?r=r>l?r-Math.floor(s/2)+1:r+Math.floor(s/2)-1:r>l&&(r=r-s+1),i.slideTo(r,e?0:void 0))}let r=1;const o=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.removeClass(o),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${t.realIndex+e}"]`).addClass(o);else for(let e=0;e<r;e+=1)i.slides.eq(t.realIndex+e).addClass(o)}};const de=[D,N,H,j,X,V,_,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){p.extend(this,{mousewheel:{enabled:!1,enable:q.enable.bind(this),disable:q.disable.bind(this),handle:q.handle.bind(this),handleMouseEnter:q.handleMouseEnter.bind(this),handleMouseLeave:q.handleMouseLeave.bind(this),animateSlider:q.animateSlider.bind(this),releaseScroll:q.releaseScroll.bind(this),lastScrollTime:p.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init(){const e=this;!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy(){const e=this;e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){p.extend(this,{navigation:{init:R.init.bind(this),update:R.update.bind(this),destroy:R.destroy.bind(this),onNextClick:R.onNextClick.bind(this),onPrevClick:R.onPrevClick.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:i,$prevEl:s}=t.navigation;if(t.params.navigation.hideOnClick&&!d(e.target).is(s)&&!d(e.target).is(i)){let e;i?e=i.hasClass(t.params.navigation.hiddenClass):s&&(e=s.hasClass(t.params.navigation.hiddenClass)),!0===e?t.emit("navigationShow",t):t.emit("navigationHide",t),i&&i.toggleClass(t.params.navigation.hiddenClass),s&&s.toggleClass(t.params.navigation.hiddenClass)}}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){p.extend(this,{pagination:{init:W.init.bind(this),render:W.render.bind(this),update:W.update.bind(this),destroy:W.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!d(e.target).hasClass(t.params.pagination.bulletClass)){!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){p.extend(this,{scrollbar:{init:U.init.bind(this),destroy:U.destroy.bind(this),updateSize:U.updateSize.bind(this),setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this),enableDraggable:U.enableDraggable.bind(this),disableDraggable:U.disableDraggable.bind(this),setDragPosition:U.setDragPosition.bind(this),getPointerPosition:U.getPointerPosition.bind(this),onDragStart:U.onDragStart.bind(this),onDragMove:U.onDragMove.bind(this),onDragEnd:U.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){p.extend(this,{parallax:{setTransform:K.setTransform.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(i=>{t[i]=J[i].bind(e)}),p.extend(e,{zoom:t});let i=1;Object.defineProperty(e.zoom,"scale",{get:()=>i,set(t){if(i!==t){const i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,i,s)}i=t}})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){p.extend(this,{lazy:{initialImageLoaded:!1,load:Z.load.bind(this),loadInSlide:Z.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange(){const e=this;e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){p.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:Q.getInterpolateFunction.bind(this),setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;p.extend(e,{a11y:{liveRegion:d(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(ee).forEach(t=>{e.a11y[t]=ee[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){p.extend(this,{history:{init:te.init.bind(this),setHistory:te.setHistory.bind(this),setHistoryPopState:te.setHistoryPopState.bind(this),scrollToSlide:te.scrollToSlide.bind(this),destroy:te.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange(){const e=this;e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){p.extend(this,{hashNavigation:{initialized:!1,init:ie.init.bind(this),destroy:ie.destroy.bind(this),setHash:ie.setHash.bind(this),onHashCange:ie.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange(){const e=this;e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){const e=this;p.extend(e,{autoplay:{running:!1,paused:!1,run:se.run.bind(e),start:se.start.bind(e),stop:se.stop.bind(e),pause:se.pause.bind(e),onVisibilityChange(){"hidden"===document.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===document.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init(){const e=this;e.params.autoplay.enabled&&(e.autoplay.start(),document.addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart(e,t){const i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd(){const e=this;e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop(),document.removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){p.extend(this,{fadeEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"fade");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};p.extend(this.params,e),p.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){p.extend(this,{cubeEffect:{setTranslate:ne.setTranslate.bind(this),setTransition:ne.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};p.extend(this.params,e),p.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){p.extend(this,{flipEffect:{setTranslate:re.setTranslate.bind(this),setTransition:re.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};p.extend(this.params,e),p.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create(){p.extend(this,{coverflowEffect:{setTranslate:oe.setTranslate.bind(this),setTransition:oe.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create(){p.extend(this,{thumbs:{swiper:null,init:le.init.bind(this),update:le.update.bind(this),onThumbClick:le.onThumbClick.bind(this)}})},on:{beforeInit(){const{thumbs:e}=this.params;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange(){this.thumbs.swiper&&this.thumbs.update()},update(){this.thumbs.swiper&&this.thumbs.update()},resize(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate(){this.thumbs.swiper&&this.thumbs.update()},setTransition(e){const t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy(){const e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];void 0===O.use&&(O.use=O.Class.use,O.installModule=O.Class.installModule),O.use(de);var ce=O,ue=i(58),pe=i.n(ue);i(85),i(86);i(90),i(92);function he(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var fe=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,s;return t=e,(i=[{key:"sendData",value:function(e,t){return fetch(t,{method:"POST",body:e}).then((function(e){return e.ok?e.json():Promise.reject("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e.status))}))}}])&&he(t.prototype,i),s&&he(t,s),e}();function me(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var ve=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.form=t,this.callback=i,this._setEventListenersSubmit()}var t,i,s;return t=e,(i=[{key:"_setEventListenersSubmit",value:function(){var e=this;this.form.addEventListener("submit",(function(t){e.form.checkValidity&&(t.preventDefault(),e.callback(e.form))}))}}])&&me(t.prototype,i),s&&me(t,s),e}();i(103),i(105);function ge(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var be=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.elements=t,this._addEventListeners()}var t,i,s;return t=e,(i=[{key:"_getTarget",value:function(e){var t=e.getAttribute("href");if(t&&t.length>1)return document.querySelector(t)}},{key:"_moveSmoothly",value:function(e){e&&e.scrollIntoView({behavior:"smooth"})}},{key:"_addEventListeners",value:function(){var e=this;this.elements.forEach((function(t){t.addEventListener("click",(function(i){i.preventDefault(),e._moveSmoothly(e._getTarget(t))}))}))}}])&&ge(t.prototype,i),s&&ge(t,s),e}(),ye=(new ce(".swiper-container",{pagination:{el:".swiper-pagination",clickable:!0},autoplay:{delay:2500,disableOnInteraction:!0},loop:!0}),new ce(".swiper-container-menu",{pagination:{el:".swiper-pagination-menu",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+Array.from(document.querySelectorAll(".menu__content")).map((function(e){return e.dataset.name}))[e]+"</span>"},bulletClass:"swiper-pagination-menu-bullet",bulletActiveClass:"swiper-pagination-menu-bullet-active"}}),new pe.a({captions:!1}),document.querySelector(".booking__input-date")),we=document.querySelector(".booking__form"),xe=document.querySelector(".contacts__form");function Ee(e){var t=document.querySelector("#error-".concat(e.id)),i=document.querySelector("#message-".concat(e.id));t.style.display="none",Te.sendData(new FormData(e),e.action).then((function(t){e.style.display="none",i.style.display="flex"})).catch((function(e){t.style.display="block"}))}var Te=new fe;new ve(we,Ee),new ve(xe,Ee);ye.setAttribute("min",function(){var e=new Date,t=String(e.getDate()).padStart(2,"0"),i=String(e.getMonth()+1).padStart(2,"0"),s=e.getFullYear();return"".concat(s,"-").concat(i,"-").concat(t)}());new be(document.querySelectorAll('a[href^="#"]'))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtaW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG9iaWkvZGlzdC9qcy90b2JpaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWJraXQtc3RyaW5nLXBhZC1idWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc3Itd2luZG93L2Rpc3Qvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbTcvZGlzdC9kb203Lm1vZHVsYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9qcy9zd2lwZXIuZXNtLmJ1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvQXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9Gb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpdCIsIk1hdGgiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJzaGFyZWQiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwic3RvcmUiLCJleGVjIiwiZXJyb3IiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsIm9wdGlvbnMiLCJzb3VyY2UiLCJ0YXJnZXQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInVuZGVmaW5lZCIsInNoYW0iLCJERVNDUklQVE9SUyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZmFpbHMiLCJhIiwidG9TdHJpbmciLCJzbGljZSIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJoYXMiLCJuYXRpdmVGdW5jdGlvblRvU3RyaW5nIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInNwbGl0IiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsInRoaXMiLCJJU19QVVJFIiwicHVzaCIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiSW5kZXhlZE9iamVjdCIsImlucHV0IiwiUFJFRkVSUkVEX1NUUklORyIsInZhbCIsInZhbHVlT2YiLCJkb2N1bWVudCIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwia2V5cyIsIm1hdGNoIiwidXNlckFnZW50IiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJnZXRCdWlsdEluIiwiVE9fU1RSSU5HX1RBRyIsIndlbGxLbm93blN5bWJvbCIsIlRBRyIsImNsYXNzb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImluZGV4T2YiLCJuYW1lcyIsInJlc3VsdCIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIml0ZXJhdG9yIiwiRU5UUklFUyIsInJldHVybk1ldGhvZCIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90b3R5cGUiLCJBcnJheSIsInByb3BlcnR5S2V5IiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwibmV4dCIsImRvbmUiLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiaW5kZXgiLCJmb3JFYWNoIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImlzQXJyYXkiLCJTUEVDSUVTIiwib3JpZ2luYWxBcnJheSIsIkMiLCJjb25zdHJ1Y3RvciIsImFyZyIsIlY4X1ZFUlNJT04iLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiZm9vIiwiQm9vbGVhbiIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsImdldFByb3RvdHlwZU9mIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG90eXBlIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImh0bWwiLCJJU19JT1MiLCJsb2NhdGlvbiIsInNldEltbWVkaWF0ZSIsImNsZWFyIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwidGVzdCIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRmb3JFYWNoIiwic2xvcHB5QXJyYXlNZXRob2QiLCJ1c2VyT3B0aW9ucyIsImNvbmZpZyIsImJyb3dzZXJXaW5kb3ciLCJmaWdjYXB0aW9uSWQiLCJsaWdodGJveCIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwiY2xvc2VCdXR0b24iLCJkcmFnIiwiaXNEcmFnZ2luZ1giLCJpc0RyYWdnaW5nWSIsInBvaW50ZXJEb3duIiwibGFzdEZvY3VzIiwiZmlyc3RGb2N1c2FibGVFbCIsImxhc3RGb2N1c2FibGVFbCIsIm9mZnNldCIsIm9mZnNldFRtcCIsInJlc2l6ZVRpY2tpbmciLCJpc1lvdVR1YmVEZXBlbmRlbmNpZUxvYWRlZCIsIndhaXRpbmdFbHMiLCJwbGF5ZXIiLCJwbGF5ZXJJZCIsImdyb3VwQXR0cyIsImdhbGxlcnkiLCJzbGlkZXIiLCJzbGlkZXJFbGVtZW50cyIsImVsZW1lbnRzTGVuZ3RoIiwiY3VycmVudEluZGV4IiwieCIsImdyb3VwcyIsIm5ld0dyb3VwIiwiYWN0aXZlR3JvdXAiLCJzdXBwb3J0ZWRFbGVtZW50cyIsImltYWdlIiwiY2hlY2tTdXBwb3J0IiwiZWwiLCJoYXNBdHRyaWJ1dGUiLCJocmVmIiwiaW5pdCIsImNvbnRhaW5lciIsImZpZ3VyZSIsImZpZ2NhcHRpb24iLCJ0aHVtYm5haWwiLCJxdWVyeVNlbGVjdG9yIiwibG9hZGluZ0luZGljYXRvciIsInN0eWxlIiwib3BhY2l0eSIsImFsdCIsInNldEF0dHJpYnV0ZSIsImNhcHRpb25zIiwiY2FwdGlvbnNTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImNhcHRpb25BdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImNsYXNzTmFtZSIsImxvYWRpbmdJbmRpY2F0b3JMYWJlbCIsIm9uUHJlbG9hZCIsIm9uTG9hZCIsIm9ubG9hZCIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uTGVhdmUiLCJvbkNsZWFudXAiLCJjaGVja1R5cGUiLCJ0YXJnZXRTZWxlY3RvciIsIkVycm9yIiwidmlkZW8iLCJyZWFkeVN0YXRlIiwiY3VycmVudFRpbWUiLCJhdXRvcGxheVZpZGVvIiwicGxheSIsInBhdXNlZCIsInBhdXNlIiwiZHVyYXRpb24iLCJ2aWRlb0Nsb25lIiwiY2xvbmVOb2RlIiwicmVtb3ZlU291cmNlcyIsImxvYWQiLCJwYXJlbnROb2RlIiwiaWZyYW1lIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ5b3V0dWJlIiwiaWZyYW1lUGxhY2Vob2xkZXIiLCJZVCIsIlBsYXllciIsImhlaWdodCIsIndpZHRoIiwidmlkZW9JZCIsInBsYXllclZhcnMiLCJjb250cm9scyIsInJlbCIsInBsYXlzaW5saW5lIiwicGxheVZpZGVvIiwiZ2V0UGxheWVyU3RhdGUiLCJwYXVzZVZpZGVvIiwiZW50cmllcyIsIm9iaiIsIm93blByb3BzIiwicmVzQXJyYXkiLCJjaGVja0RlcGVuZGVuY2llcyIsImNhbGxiYWNrIiwiYWRkIiwiZ2V0RWxlbWVudEJ5SWQiLCJmaXJzdFNjcmlwdFRhZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3JjIiwiaW5zZXJ0QmVmb3JlIiwib25Zb3VUdWJlUGxheWVyQVBJUmVhZHkiLCJ3YWl0aW5nRWwiLCJnZXRHcm91cE5hbWUiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJjcmVhdGVTbGlkZXIiLCJ6b29tIiwiVG9iaWlab29tIiwiaW5uZXJIVE1MIiwiem9vbVRleHQiLCJjbGFzc0xpc3QiLCJ0cmlnZ2VyVG9iaWkiLCJjcmVhdGVTbGlkZSIsImlzT3BlbiIsInVwZGF0ZUNvbmZpZyIsInVwZGF0ZUxpZ2h0Ym94IiwicmVtb3ZlIiwiZ3JvdXBOYW1lIiwic2xpZGVJbmRleCIsInNsaWRlRWwiLCJ6b29tSWNvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjcmVhdGVMaWdodGJveCIsIm5hdkxhYmVsIiwibmF2VGV4dCIsImNsb3NlTGFiZWwiLCJjbG9zZVRleHQiLCJib2R5Iiwic2xpZGVyRWxlbWVudCIsInNsaWRlckVsZW1lbnRDb250ZW50IiwicG9zaXRpb24iLCJsZWZ0Iiwib3BlbiIsImhpZGVTY3JvbGxiYXIiLCJkb2N1bWVudEVsZW1lbnQiLCJjbG9zZSIsImRpc2FibGVkIiwiYWN0aXZlRWxlbWVudCIsImNsZWFyRHJhZyIsImJpbmRFdmVudHMiLCJwcmVsb2FkIiwidW5iaW5kRXZlbnRzIiwiZm9jdXMiLCJwcmV2IiwibGVhdmUiLCJjbGVhbnVwIiwidXBkYXRlT2Zmc2V0Iiwib2Zmc2V0V2lkdGgiLCJ0cmFuc2Zvcm0iLCJzdGFydFgiLCJlbmRYIiwic3RhcnRZIiwiZW5kWSIsInVwZGF0ZUFmdGVyRHJhZyIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIm1vdmVtZW50WERpc3RhbmNlIiwiYWJzIiwibW92ZW1lbnRZRGlzdGFuY2UiLCJ0aHJlc2hvbGQiLCJzd2lwZUNsb3NlIiwicmVzaXplSGFuZGxlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInByZXZlbnREZWZhdWx0IiwiY2xpY2tIYW5kbGVyIiwiZG9jQ2xvc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJrZXlkb3duSGFuZGxlciIsImtleUNvZGUiLCJjb2RlIiwic2hpZnRLZXkiLCJ0b3VjaHN0YXJ0SGFuZGxlciIsImlzSWdub3JlRWxlbWVudCIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidG91Y2htb3ZlSGFuZGxlciIsImRvU3dpcGUiLCJ0b3VjaGVuZEhhbmRsZXIiLCJtb3VzZWRvd25IYW5kbGVyIiwibW91c2Vtb3ZlSGFuZGxlciIsIm1vdXNldXBIYW5kbGVyIiwicm91bmQiLCJrZXlib2FyZCIsImRyYWdnYWJsZSIsImlzVG91Y2hEZXZpY2UiLCJzb3VyY2VzIiwicXVlcnlTZWxlY3RvckFsbCIsImNvbnRhaW5zIiwibmF2IiwiZGlyIiwiZGlzcGxheSIsInVwZGF0ZVNsaWRlciIsImZvY3VzYWJsZUVscyIsInVwZGF0ZUZvY3VzIiwibm9kZU5hbWUiLCJzZWxlY3RvciIsImRvd25sb2FkIiwiZG93bmxvYWRUZXh0IiwiZG93bmxvYWRMYWJlbCIsInJ0bCIsImxvb3AiLCJtZXJnZU9wdGlvbnMiLCJlbHMiLCJkZXN0cm95IiwiZ3JvdXBzRW50cmllcyIsImdyb3Vwc0VudHJpZSIsImN1cnJlbnRTbGlkZSIsInNlbGVjdEdyb3VwIiwiY3VycmVudEdyb3VwIiwiZmFjdG9yeSIsIiQiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpdGVyYWJsZSIsImciLCJlIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsIm1heCIsImludGVnZXIiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsInN0ZXAiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyYXRvck1ldGhvZCIsIiRtYXAiLCJwcm90byIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJjaGFyQXQiLCJkZWZpbmVJdGVyYXRvciIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsInBvaW50IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsIlMiLCJzaXplIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzQ29yZSIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIk5BTUUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwidmFsdWVzIiwiRiIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwibHQiLCJQcm9wZXJ0aWVzIiwib2JqZWN0S2V5cyIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsImsiLCJsZW4iLCJFIiwiQSIsIiRwYWRTdGFydCIsInN0YXJ0IiwicGFkU3RhcnQiLCJtYXhMZW5ndGgiLCJyZXBlYXQiLCJJU19FTkQiLCJmaWxsU3RyaW5nIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJlbmQiLCJjb3VudCIsInN0ciIsIkluZmluaXR5IiwiUmFuZ2VFcnJvciIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwicmVkZWZpbmVBbGwiLCJzZXRTcGVjaWVzIiwiYW5JbnN0YW5jZSIsIml0ZXJhdGUiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiaW5zcGVjdFNvdXJjZSIsIiRmZXRjaCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZha2VQcm9taXNlIiwidGhlbiIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJhbGwiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwiZG9tYWluIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsInJlYXNvbiIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInBhcmVudCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZmV0Y2giLCJ3cmFwIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkcHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIkNPTlNUUlVDVE9SX05BTUUiLCJDb25zdHJ1Y3RvciIsIlJlc3VsdCIsInN0b3BwZWQiLCJBU19FTlRSSUVTIiwiSVNfSVRFUkFUT1IiLCJpdGVyRm4iLCJzdG9wIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsInRvZ2dsZSIsIm5vZGUiLCJtYWNyb3Rhc2siLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInByb21pc2VDYXBhYmlsaXR5IiwiY29uc29sZSIsIkRPTUl0ZXJhYmxlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJleHRlbmQiLCJkb2MiLCJzc3JEb2N1bWVudCIsImJsdXIiLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwiaGFzaCIsImhvc3RuYW1lIiwib3JpZ2luIiwicGF0aG5hbWUiLCJzZWFyY2giLCJ3aW4iLCJuYXZpZ2F0b3IiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsImNsZWFyVGltZW91dCIsIm1hdGNoTWVkaWEiLCJEb203IiwiYXJyIiwiY29udGV4dCIsInRlbXBQYXJlbnQiLCJ0cmltIiwidG9DcmVhdGUiLCJub2RlVHlwZSIsInVuaXF1ZSIsInVuaXF1ZUFycmF5IiwiQ2xhc3MiLCJNZXRob2RzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiaiIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImF0dHIiLCJhdHRycyIsImF0dHJOYW1lIiwicmVtb3ZlQXR0ciIsImRvbTdFbGVtZW50RGF0YVN0b3JhZ2UiLCJkYXRhS2V5IiwiZWxTdHlsZSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJ3ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJvbiIsImV2ZW50VHlwZSIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwicGFyZW50cyIsImhhbmRsZUV2ZW50IiwiZXZlbnRzIiwiZG9tN0xpdmVMaXN0ZW5lcnMiLCJwcm94eUxpc3RlbmVyIiwiZG9tN0xpc3RlbmVycyIsIm9mZiIsImhhbmRsZXJzIiwiZG9tN3Byb3h5Iiwic3BsaWNlIiwidHJpZ2dlciIsImV2dCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGF0YUluZGV4IiwidHJhbnNpdGlvbkVuZCIsImRvbSIsImZpcmVDYWxsQmFjayIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsInN0eWxlcyIsInBhcnNlRmxvYXQiLCJvdXRlckhlaWdodCIsIm9mZnNldEhlaWdodCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsTGVmdCIsInNjcm9sbFgiLCJ0b3AiLCJjc3MiLCJwcm9wcyIsInByb3AiLCJlYWNoIiwidGV4dCIsImNvbXBhcmVXaXRoIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiY2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJlcSIsInJldHVybkluZGV4IiwiYXBwZW5kIiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwiZmlyc3RDaGlsZCIsInByZXBlbmQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0QWxsIiwibmV4dEVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2QWxsIiwicHJldkVscyIsImNsb3Nlc3QiLCJmb3VuZEVsZW1lbnRzIiwiZm91bmQiLCJtYXRjaGVkSXRlbXMiLCJ0b0FkZCIsIm1ldGhvZE5hbWUiLCJVdGlscyIsImRlbGF5IiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJtNDEiLCJtNDIiLCJ1cmwiLCJxdWVyeSIsInBhcmFtcyIsInBhcmFtIiwidXJsVG9QYXJzZSIsInBhcmFtc1BhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0byIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJuZXh0S2V5IiwiZGVzYyIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm9ic2VydmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdlc3R1cmVzIiwiU3dpcGVyQ2xhc3MiLCJldmVudHNMaXN0ZW5lcnMiLCJldmVudE5hbWUiLCJwcmlvcml0eSIsIm9uY2VIYW5kbGVyIiwiZjdwcm94eSIsImV2ZW50SGFuZGxlciIsImluc3RhbmNlUGFyYW1zIiwiaW5zdGFuY2UiLCJtb2R1bGVOYW1lIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtcyIsIm1vZHVsZVByb3BOYW1lIiwibW9kdWxlUHJvcCIsIm1vZHVsZUV2ZW50TmFtZSIsImNvbXBvbmVudHMiLCJ1c2UiLCJzdGF0aWMiLCJpbnN0YWxsIiwiaW5zdGFsbE1vZHVsZSIsInVwZGF0ZSIsInVwZGF0ZVNpemUiLCJzd2lwZXIiLCIkZWwiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsInVwZGF0ZVNsaWRlcyIsIiR3cmFwcGVyRWwiLCJzd2lwZXJTaXplIiwicnRsVHJhbnNsYXRlIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsInNsaWRlc0Zvck1hcmdpbiIsImNzc01vZGUiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNsaWRlc051bWJlckV2ZW5Ub1Jvd3MiLCJzbGlkZVNpemUiLCJzcGFjZUJldHdlZW4iLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwic2xpZGVzUGVyQ29sdW1uIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJzbGlkZXNQZXJSb3ciLCJudW1GdWxsQ29sdW1ucyIsInNsaWRlIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93Iiwic2xpZGVzUGVyR3JvdXAiLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJzd2lwZXJTbGlkZVNpemUiLCJjZW50ZXJlZFNsaWRlcyIsInNsaWRlc1Blckdyb3VwU2tpcCIsIm5ld1NsaWRlc0dyaWQiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsInNsaWRlc0dyaWRJdGVtIiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJhbGxTbGlkZXNTaXplIiwic2xpZGVTaXplVmFsdWUiLCJtYXhTbmFwIiwic25hcCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsInVwZGF0ZVNsaWRlc09mZnNldCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJzcGVlZCIsImFjdGl2ZVNsaWRlcyIsIm5ld0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJ2aXNpYmxlU2xpZGVzIiwiYWN0aXZlSW5kZXgiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInRyYW5zbGF0ZSIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwiYXV0b0hlaWdodCIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsInByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInJlYWxJbmRleCIsImFjdGl2ZVNsaWRlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4Iiwic2tpcCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJnZXRUcmFuc2xhdGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsIndyYXBwZXJFbCIsIm5ld1Byb2dyZXNzIiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJkZXN0cm95ZWQiLCJ0cmFuc2l0aW9uU3RhcnQiLCJkaXJlY3Rpb24iLCJzbGlkZVRvIiwiaW5pdGlhbFNsaWRlIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNjcm9sbFdpZHRoIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwibG9vcGVkU2xpZGVzIiwic2xpZGVOZXh0IiwiaW5jcmVtZW50IiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZJbmRleCIsInByZXZTbmFwIiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwiY3VycmVudFNuYXAiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInNsaWRlVG9JbmRleCIsImxvb3BDcmVhdGUiLCJsb29wRmlsbEdyb3VwV2l0aEJsYW5rIiwiYmxhbmtTbGlkZXNOdW0iLCJibGFua05vZGUiLCJzbGlkZUJsYW5rQ2xhc3MiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJkaWZmIiwibG9vcERlc3Ryb3kiLCJncmFiQ3Vyc29yIiwic2V0R3JhYkN1cnNvciIsIm1vdmluZyIsInNpbXVsYXRlVG91Y2giLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsIm1hbmlwdWxhdGlvbiIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlQWxsU2xpZGVzIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJhbmRyb2lkQ2hyb21lIiwiZGVza3RvcCIsImlwaG9uZSIsImlwb2QiLCJpcGFkIiwiZWRnZSIsImllIiwiZmlyZWZveCIsIm1hY29zIiwid2luZG93cyIsImNvcmRvdmEiLCJwaG9uZWdhcCIsImVsZWN0cm9uIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJvcyIsIm9zVmVyc2lvbiIsIndlYlZpZXciLCJzdGFuZGFsb25lIiwid2VidmlldyIsInBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwib25Ub3VjaFN0YXJ0IiwidG91Y2hFdmVudHNEYXRhIiwib3JpZ2luYWxFdmVudCIsIiR0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiaXNUb3VjaEV2ZW50Iiwid2hpY2giLCJidXR0b24iLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwibm9Td2lwaW5nIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJub1N3aXBpbmdDbGFzcyIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsInRhcmdldFRvdWNoZXMiLCJjdXJyZW50WSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvcm1FbGVtZW50cyIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwiUEkiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJ0b3VjaFJhdGlvIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJmcmVlTW9kZSIsInZlbG9jaXRpZXMiLCJ0aW1lIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwibGFzdENsaWNrVGltZSIsImN1cnJlbnRQb3MiLCJmcmVlTW9kZU1vbWVudHVtIiwibGFzdE1vdmVFdmVudCIsInBvcCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsInZlbG9jaXR5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsIm1vbWVudHVtRHVyYXRpb24iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwiZG9Cb3VuY2UiLCJib3VuY2VBbW91bnQiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJuZWVkc0xvb3BGaXgiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVTdGlja3kiLCJvbmNlIiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsImxvbmdTd2lwZXNNcyIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInJhdGlvIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwiYnJlYWtwb2ludHMiLCJzZXRCcmVha3BvaW50IiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGVmYXVsdHMiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicHJlbG9hZEltYWdlcyIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJwYXNzaXZlTGlzdGVuZXJzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsIndyYXBwZXJDbGFzcyIsInByb3RvdHlwZXMiLCJhdHRhY2hFdmVudHMiLCJ0b3VjaEV2ZW50cyIsIm9uQ2xpY2siLCJtb3ZlIiwicGFzc2l2ZSIsImNhbmNlbCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsInBhcmFtVmFsdWUiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJwb2ludHMiLCJtaW5SYXRpbyIsInN1YnN0ciIsImlubmVySGVpZ2h0Iiwic29ydCIsImlubmVyV2lkdGgiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVQb3NpdGlvbiIsImFkZENsYXNzZXMiLCJjbGFzc05hbWVzIiwic3VmZml4ZXMiLCJzdWZmaXgiLCJyZW1vdmVDbGFzc2VzIiwiaW1hZ2VzIiwibG9hZEltYWdlIiwiaW1hZ2VFbCIsInNyY3NldCIsInNpemVzIiwiY2hlY2tGb3JDb21wbGV0ZSIsIm9uUmVhZHkiLCJjb21wbGV0ZSIsIm9uZXJyb3IiLCJpbWFnZXNMb2FkZWQiLCJpbWFnZXNUb0xvYWQiLCJjdXJyZW50U3JjIiwiZXh0ZW5kZWREZWZhdWx0cyIsInN1cGVyIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm1vZHVsZVBhcmFtTmFtZSIsInN3aXBlclBhcmFtcyIsInVzZU1vZHVsZXNQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJzaGFkb3dSb290IiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsImNsaWNrVGltZW91dCIsInVzZU1vZHVsZXMiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJkZWxldGVQcm9wcyIsIm5ld0RlZmF1bHRzIiwiRGV2aWNlJDEiLCJTdXBwb3J0JDEiLCJzdXBwb3J0IiwiaXNFZGdlIiwiaXNTYWZhcmkiLCJpc1VpV2ViVmlldyIsIkJyb3dzZXIkMSIsImJyb3dzZXIiLCJSZXNpemUiLCJyZXNpemUiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJPYnNlcnZlciIsImZ1bmMiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwiT2JzZXJ2ZXJGdW5jIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0Iiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZVBhcmVudHMiLCJjb250YWluZXJQYXJlbnRzIiwiYXR0YWNoIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJkaXNjb25uZWN0IiwiT2JzZXJ2ZXIkMSIsIlZpcnR1YWwiLCJmb3JjZSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwicHJldmlvdXNGcm9tIiwicHJldmlvdXNUbyIsInByZXZpb3VzU2xpZGVzR3JpZCIsInJlbmRlclNsaWRlIiwicHJldmlvdXNPZmZzZXQiLCJvZmZzZXRQcm9wIiwic2xpZGVzQWZ0ZXIiLCJzbGlkZXNCZWZvcmUiLCJvblJlbmRlcmVkIiwibGF6eSIsInJlbmRlckV4dGVybmFsIiwic2xpZGVzVG9SZW5kZXIiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJjYWNoZSIsIiRzbGlkZUVsIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiJGNhY2hlZEVsIiwiY2FjaGVkRWxJbmRleCIsIlZpcnR1YWwkMSIsIm92ZXJ3cml0ZVBhcmFtcyIsIktleWJvYXJkIiwia2MiLCJjaGFyQ29kZSIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwib25seUluVmlld3BvcnQiLCJpblZpZXciLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsInN3aXBlck9mZnNldCIsInN3aXBlckNvb3JkIiwicmV0dXJuVmFsdWUiLCJoYW5kbGUiLCJLZXlib2FyZCQxIiwiZW5hYmxlIiwiZGlzYWJsZSIsIk1vdXNld2hlZWwiLCJsYXN0U2Nyb2xsVGltZSIsImxhc3RFdmVudEJlZm9yZVNuYXAiLCJyZWNlbnRXaGVlbEV2ZW50cyIsImlzU3VwcG9ydGVkIiwiZWxlbWVudCIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJzWCIsInNZIiwicFgiLCJwWSIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsInBpeGVsWCIsInBpeGVsWSIsIm1vdXNlRW50ZXJlZCIsIm1vdXNld2hlZWwiLCJldmVudHNUYXJnZWQiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJuZXdFdmVudCIsInNpZ24iLCJpZ25vcmVXaGVlbEV2ZW50cyIsInNlbnNpdGl2aXR5IiwidGltZW91dCIsInNoaWZ0IiwicHJldkV2ZW50IiwiZmlyc3RFdmVudCIsInNuYXBUb1RocmVzaG9sZCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJyYXciLCJhbmltYXRlU2xpZGVyIiwicmVsZWFzZVNjcm9sbCIsImdldFRpbWUiLCJoYW5kbGVNb3VzZUVudGVyIiwiaGFuZGxlTW91c2VMZWF2ZSIsIk5hdmlnYXRpb24iLCIkbmV4dEVsIiwiJHByZXZFbCIsImRpc2FibGVkQ2xhc3MiLCJsb2NrQ2xhc3MiLCJvbk5leHRDbGljayIsIm9uUHJldkNsaWNrIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb24iLCJjdXJyZW50IiwidG90YWwiLCJwYWdpbmF0aW9uVHlwZSIsImJ1bGxldHMiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJkeW5hbWljQnVsbGV0cyIsImJ1bGxldFNpemUiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJidWxsZXRBY3RpdmVDbGFzcyIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsIiRmaXJzdERpc3BsYXllZEJ1bGxldCIsIiRsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0IiwiY3VycmVudENsYXNzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwidG90YWxDbGFzcyIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicmVuZGVyQ3VzdG9tIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRDbGFzcyIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlclByb2dyZXNzYmFyIiwiY2xpY2thYmxlIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiaGlkZGVuQ2xhc3MiLCJTY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsIiRkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsImRpdmlkZXIiLCJtb3ZlRGl2aWRlciIsImNsaWVudFgiLCJjbGllbnRZIiwiZHJhZ1N0YXJ0UG9zIiwicG9zaXRpb25SYXRpbyIsImdldFBvaW50ZXJQb3NpdGlvbiIsInNldERyYWdQb3NpdGlvbiIsImRyYWdUaW1lb3V0Iiwic25hcE9uUmVsZWFzZSIsImFjdGl2ZUxpc3RlbmVyIiwib25EcmFnU3RhcnQiLCJvbkRyYWdNb3ZlIiwib25EcmFnRW5kIiwiJHN3aXBlckVsIiwiZHJhZ0NsYXNzIiwiZHJhZ0VsIiwiZW5hYmxlRHJhZ2dhYmxlIiwiZGlzYWJsZURyYWdnYWJsZSIsIlBhcmFsbGF4IiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50U2NhbGUiLCJwYXJhbGxheCIsInNldFRyYW5zZm9ybSIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJab29tIiwieDEiLCJ5MSIsIngyIiwieTIiLCJnZXN0dXJlIiwiZmFrZUdlc3R1cmVUb3VjaGVkIiwiZmFrZUdlc3R1cmVNb3ZlZCIsInNjYWxlU3RhcnQiLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwiJGltYWdlRWwiLCIkaW1hZ2VXcmFwRWwiLCJjb250YWluZXJDbGFzcyIsIm1heFJhdGlvIiwiaXNTY2FsaW5nIiwic2NhbGVNb3ZlIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvdXQiLCJpbiIsInRvdWNoWCIsInRvdWNoWSIsIm9mZnNldFgiLCJvZmZzZXRZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJ0cmFuc2xhdGVNaW5YIiwidHJhbnNsYXRlTWluWSIsInRyYW5zbGF0ZU1heFgiLCJ0cmFuc2xhdGVNYXhZIiwiem9vbWVkU2xpZGVDbGFzcyIsImFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUiLCJzbGlkZVNlbGVjdG9yIiwib25HZXN0dXJlU3RhcnQiLCJvbkdlc3R1cmVDaGFuZ2UiLCJvbkdlc3R1cmVFbmQiLCJMYXp5IiwibG9hZEluRHVwbGljYXRlIiwiJGltYWdlcyIsImVsZW1lbnRDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwiaW1hZ2VJbmRleCIsImJhY2tncm91bmQiLCIkcGljdHVyZUVsIiwic291cmNlSW5kZXgiLCJzb3VyY2VFbCIsIiRzb3VyY2UiLCJwcmVsb2FkZXJDbGFzcyIsInNsaWRlT3JpZ2luYWxJbmRleCIsIm9yaWdpbmFsU2xpZGUiLCJsb2FkSW5TbGlkZSIsImR1cGxpY2F0ZWRTbGlkZSIsInNsaWRlRXhpc3QiLCJpbml0aWFsSW1hZ2VMb2FkZWQiLCJlbEluZGV4IiwibG9hZFByZXZOZXh0IiwibG9hZFByZXZOZXh0QW1vdW50IiwiYW1vdW50IiwibWF4SW5kZXgiLCJtaW5JbmRleCIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJiaW5hcnlTZWFyY2giLCJndWVzcyIsImkxIiwiaTMiLCJpbnRlcnBvbGF0ZSIsImNvbnRyb2xsZXIiLCJzcGxpbmUiLCJjb250cm9sbGVkIiwiY29udHJvbCIsImNvbnRyb2xsZWRUcmFuc2xhdGUiLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiYnkiLCJnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uIiwiaW52ZXJzZSIsInNldENvbnRyb2xsZWRUcmFuc2l0aW9uIiwiYTExeSIsIm1ha2VFbEZvY3VzYWJsZSIsIm1ha2VFbE5vdEZvY3VzYWJsZSIsImFkZEVsUm9sZSIsInJvbGUiLCJhZGRFbExhYmVsIiwibGFiZWwiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsImxhc3RTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJwcmV2U2xpZGVNZXNzYWdlIiwiY2xpY2siLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsImJ1bGxldEVsIiwiJGJ1bGxldEVsIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCJvbkVudGVyS2V5IiwiSGlzdG9yeSIsImhhc2hOYXZpZ2F0aW9uIiwicGF0aHMiLCJnZXRQYXRoVmFsdWVzIiwic2Nyb2xsVG9TbGlkZSIsInNldEhpc3RvcnlQb3BTdGF0ZSIsInBhdGhBcnJheSIsInBhcnQiLCJzbHVnaWZ5IiwiY3VycmVudFN0YXRlIiwiSGFzaE5hdmlnYXRpb24iLCJuZXdIYXNoIiwid2F0Y2hTdGF0ZSIsIm9uSGFzaENhbmdlIiwiQXV0b3BsYXkiLCIkYWN0aXZlU2xpZGVFbCIsInJldmVyc2VEaXJlY3Rpb24iLCJzdG9wT25MYXN0U2xpZGUiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkVuZCIsIkZhZGUiLCJ0eCIsInR5Iiwic2xpZGVPcGFjaXR5IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJpZ2dlckV2ZW50cyIsIkN1YmUiLCJzd2lwZXJXaWR0aCIsInN3aXBlckhlaWdodCIsImN1YmVFZmZlY3QiLCIkY3ViZVNoYWRvd0VsIiwid3JhcHBlclJvdGF0ZSIsInNoYWRvdyIsInNsaWRlQW5nbGUiLCJ0eiIsInNsaWRlU2hhZG93cyIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJzaGFkb3dBbmdsZSIsInNpbiIsImNvcyIsInNjYWxlMSIsInNjYWxlMiIsInpGYWN0b3IiLCJGbGlwIiwiZmxpcEVmZmVjdCIsImxpbWl0Um90YXRpb24iLCJyb3RhdGVZIiwicm90YXRlWCIsInpJbmRleCIsIkNvdmVyZmxvdyIsImNvdmVyZmxvd0VmZmVjdCIsImNlbnRlciIsInJvdGF0ZSIsImRlcHRoIiwib2Zmc2V0TXVsdGlwbGllciIsIm1vZGlmaWVyIiwidHJhbnNsYXRlWiIsInN0cmV0Y2giLCJzbGlkZVRyYW5zZm9ybSIsIiRzaGFkb3dCZWZvcmVFbCIsIiRzaGFkb3dBZnRlckVsIiwicHJlZml4ZWRQb2ludGVyRXZlbnRzIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJUaHVtYnMiLCJ0aHVtYnMiLCJ0aHVtYnNQYXJhbXMiLCJzd2lwZXJDcmVhdGVkIiwidGh1bWJzQ29udGFpbmVyQ2xhc3MiLCJvblRodW1iQ2xpY2siLCJ0aHVtYnNTd2lwZXIiLCJzbGlkZVRodW1iQWN0aXZlQ2xhc3MiLCJpbml0aWFsIiwiYXV0b1Njcm9sbE9mZnNldCIsInVzZU9mZnNldCIsIm5ld1RodW1ic0luZGV4IiwiY3VycmVudFRodW1ic0luZGV4IiwicHJldlRodW1ic0luZGV4IiwibmV4dFRodW1ic0luZGV4IiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJtdWx0aXBsZUFjdGl2ZVRodW1icyIsImhpZGVPbkNsaWNrIiwiaXNIaWRkZW4iLCJudW1iZXIiLCJyZW5kZXIiLCJsb2FkT25UcmFuc2l0aW9uU3RhcnQiLCJub3RpZmljYXRpb25DbGFzcyIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwic2V0SGlzdG9yeSIsInNldEhhc2giLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsInZpc2liaWxpdHlTdGF0ZSIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsIkFwaSIsInJlcyIsImpzb24iLCJzdGF0dXMiLCJGb3JtIiwiZm9ybSIsIl9zZXRFdmVudExpc3RlbmVyc1N1Ym1pdCIsImNoZWNrVmFsaWRpdHkiLCJTY3JvbGwiLCJlbGVtZW50cyIsIl9hZGRFdmVudExpc3RlbmVycyIsImVsZW0iLCJzY3JvbGxJbnRvVmlldyIsIl9tb3ZlU21vb3RobHkiLCJfZ2V0VGFyZ2V0IiwiZGF0ZSIsIlN3aXBlciIsIml0ZW0iLCJkYXRhc2V0IiwiVG9iaWkiLCJib29raW5nRm9ybUVsZW0iLCJjb250YWN0c0Zvcm1FbGVtIiwic3VibWl0Rm9ybSIsImZvcm1FcnJvciIsImZvcm1NZXNzYWdlIiwiYXBpIiwic2VuZERhdGEiLCJGb3JtRGF0YSIsImFjdGlvbiIsImNhdGNoIiwiZXJyIiwiZGF5IiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJmb3JtYXREYXRlRnVsbCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixP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S0FDaEQwckMsRUFBT3BCLEVBQUtxQixjQUNsQixnQkFBVUQsRUFBVixZQUFrQkYsRUFBbEIsWUFBMkJGLEdEMkRKTSxJQUdWLElBQUk3QixHQURDam5ELFNBQVN3VixpQkFBaUIiLCJmaWxlIjoiaW5kZXguMTk1YmNmMjk5NmZjYzIwZTk2YWEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTA3KTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV1cbiAgICB8fCAoTkFUSVZFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCd0b1N0cmluZycpO1xuXG5zaGFyZWQoJ2luc3BlY3RTb3VyY2UnLCBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG59KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjQuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhcmVkKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWlvcycpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJiAhZmFpbHMocG9zdCkpIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2xvcHB5QXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gc2xvcHB5QXJyYXlNZXRob2QoJ2ZvckVhY2gnKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XHJcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcclxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Ub2JpaSA9IGZhY3RvcnkoKSk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvKipcclxuICAgKiBUb2JpaVxyXG4gICAqXHJcbiAgICogQGF1dGhvciBycXJhdWh2bXJhXHJcbiAgICogQHZlcnNpb24gMi4wLjAtYWxwaGFcclxuICAgKiBAdXJsIGh0dHBzOi8vZ2l0aHViLmNvbS9ycXJhdWh2bXJhL1RvYmlpXHJcbiAgICpcclxuICAgKiBNSVQgTGljZW5zZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIFRvYmlpKHVzZXJPcHRpb25zKSB7XHJcbiAgICAvKipcclxuICAgICAqIEdsb2JhbCB2YXJpYWJsZXNcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHZhciBjb25maWcgPSB7fTtcclxuICAgIHZhciBicm93c2VyV2luZG93ID0gd2luZG93O1xyXG4gICAgdmFyIGZpZ2NhcHRpb25JZCA9IDA7XHJcbiAgICB2YXIgbGlnaHRib3ggPSBudWxsO1xyXG4gICAgdmFyIHByZXZCdXR0b24gPSBudWxsO1xyXG4gICAgdmFyIG5leHRCdXR0b24gPSBudWxsO1xyXG4gICAgdmFyIGNsb3NlQnV0dG9uID0gbnVsbDtcclxuICAgIHZhciBjb3VudGVyID0gbnVsbDtcclxuICAgIHZhciBkcmFnID0ge307XHJcbiAgICB2YXIgaXNEcmFnZ2luZ1ggPSBmYWxzZTtcclxuICAgIHZhciBpc0RyYWdnaW5nWSA9IGZhbHNlO1xyXG4gICAgdmFyIHBvaW50ZXJEb3duID0gZmFsc2U7XHJcbiAgICB2YXIgbGFzdEZvY3VzID0gbnVsbDtcclxuICAgIHZhciBmaXJzdEZvY3VzYWJsZUVsID0gbnVsbDtcclxuICAgIHZhciBsYXN0Rm9jdXNhYmxlRWwgPSBudWxsO1xyXG4gICAgdmFyIG9mZnNldCA9IG51bGw7XHJcbiAgICB2YXIgb2Zmc2V0VG1wID0gbnVsbDtcclxuICAgIHZhciByZXNpemVUaWNraW5nID0gZmFsc2U7XHJcbiAgICB2YXIgaXNZb3VUdWJlRGVwZW5kZW5jaWVMb2FkZWQgPSBmYWxzZTtcclxuICAgIHZhciB3YWl0aW5nRWxzID0gW107XHJcbiAgICB2YXIgcGxheWVyID0gW107XHJcbiAgICB2YXIgcGxheWVySWQgPSAwO1xyXG4gICAgdmFyIGdyb3VwQXR0cyA9IHtcclxuICAgICAgZ2FsbGVyeTogW10sXHJcbiAgICAgIHNsaWRlcjogbnVsbCxcclxuICAgICAgc2xpZGVyRWxlbWVudHM6IFtdLFxyXG4gICAgICBlbGVtZW50c0xlbmd0aDogMCxcclxuICAgICAgY3VycmVudEluZGV4OiAwLFxyXG4gICAgICB4OiAwXHJcbiAgICB9O1xyXG4gICAgdmFyIGdyb3VwcyA9IHt9O1xyXG4gICAgdmFyIG5ld0dyb3VwID0gbnVsbDtcclxuICAgIHZhciBhY3RpdmVHcm91cCA9IG51bGw7XHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHVzZXIgb3B0aW9uc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1c2VyT3B0aW9ucyAtIE9wdGlvbmFsIHVzZXIgb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH0gLSBDdXN0b20gb3B0aW9uc1xyXG4gICAgICovXHJcblxyXG4gICAgdmFyIG1lcmdlT3B0aW9ucyA9IGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyh1c2VyT3B0aW9ucykge1xyXG4gICAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2VsZWN0b3I6ICcubGlnaHRib3gnLFxyXG4gICAgICAgIGNhcHRpb25zOiB0cnVlLFxyXG4gICAgICAgIGNhcHRpb25zU2VsZWN0b3I6ICdpbWcnLFxyXG4gICAgICAgIGNhcHRpb25BdHRyaWJ1dGU6ICdhbHQnLFxyXG4gICAgICAgIG5hdjogJ2F1dG8nLFxyXG4gICAgICAgIG5hdlRleHQ6IFsnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld2JveD1cIjAgMCAyNCAyNFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCI+PHBhdGggZD1cIk0xNCAxOGwtNi02IDYtNlwiLz48L3N2Zz4nLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld2JveD1cIjAgMCAyNCAyNFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCI+PHBhdGggZD1cIk0xMCA2bDYgNi02IDZcIi8+PC9zdmc+J10sXHJcbiAgICAgICAgbmF2TGFiZWw6IFsnUHJldmlvdXMgaW1hZ2UnLCAnTmV4dCBpbWFnZSddLFxyXG4gICAgICAgIGNsb3NlOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlVGV4dDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdib3g9XCIwIDAgMjQgMjRcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiPjxwYXRoIGQ9XCJNNiA2bDEyIDEyTTYgMThMMTggNlwiLz48L3N2Zz4nLFxyXG4gICAgICAgIGNsb3NlTGFiZWw6ICdDbG9zZSBsaWdodGJveCcsXHJcbiAgICAgICAgbG9hZGluZ0luZGljYXRvckxhYmVsOiAnSW1hZ2UgbG9hZGluZycsXHJcbiAgICAgICAgY291bnRlcjogdHJ1ZSxcclxuICAgICAgICBkb3dubG9hZDogZmFsc2UsXHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgIGRvd25sb2FkVGV4dDogJycsXHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgIGRvd25sb2FkTGFiZWw6ICdEb3dubG9hZCBpbWFnZScsXHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgIGtleWJvYXJkOiB0cnVlLFxyXG4gICAgICAgIHpvb206IHRydWUsXHJcbiAgICAgICAgem9vbVRleHQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIj48cGF0aCBkPVwiTTIxIDE2djVoLTVcIi8+PHBhdGggZD1cIk04IDIxSDN2LTVcIi8+PHBhdGggZD1cIk0xNiAzaDV2NVwiLz48cGF0aCBkPVwiTTMgOFYzaDVcIi8+PC9zdmc+JyxcclxuICAgICAgICBkb2NDbG9zZTogdHJ1ZSxcclxuICAgICAgICBzd2lwZUNsb3NlOiB0cnVlLFxyXG4gICAgICAgIGhpZGVTY3JvbGxiYXI6IHRydWUsXHJcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxyXG4gICAgICAgIHRocmVzaG9sZDogMTAwLFxyXG4gICAgICAgIHJ0bDogZmFsc2UsXHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgIC8vIFRPRE9cclxuICAgICAgICBhdXRvcGxheVZpZGVvOiBmYWxzZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHVzZXJPcHRpb25zKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModXNlck9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgb3B0aW9uc1trZXldID0gdXNlck9wdGlvbnNba2V5XTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUeXBlcyAtIHlvdSBjYW4gYWRkIG5ldyB0eXBlIHRvIHN1cHBvcnQgc29tZXRoaW5nIG5ld1xyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgc3VwcG9ydGVkRWxlbWVudHMgPSB7XHJcbiAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgY2hlY2tTdXBwb3J0OiBmdW5jdGlvbiBjaGVja1N1cHBvcnQoZWwpIHtcclxuICAgICAgICAgIHJldHVybiAhZWwuaGFzQXR0cmlidXRlKCdkYXRhLXR5cGUnKSAmJiBlbC5ocmVmLm1hdGNoKC9cXC4ocG5nfGpwZT9nfHRpZmZ8dGlmfGdpZnxibXB8d2VicHxzdmd8aWNvKShcXD8uKik/JC9pKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoZWwsIGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgdmFyIGZpZ3VyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ZpZ3VyZScpO1xyXG4gICAgICAgICAgdmFyIGZpZ2NhcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWdjYXB0aW9uJyk7XHJcbiAgICAgICAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICAgIHZhciB0aHVtYm5haWwgPSBlbC5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcclxuICAgICAgICAgIHZhciBsb2FkaW5nSW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7IC8vIEhpZGUgZmlndXJlIHVudGlsIHRoZSBpbWFnZSBpcyBsb2FkZWRcclxuXHJcbiAgICAgICAgICBmaWd1cmUuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuXHJcbiAgICAgICAgICBpZiAodGh1bWJuYWlsKSB7XHJcbiAgICAgICAgICAgIGltYWdlLmFsdCA9IHRodW1ibmFpbC5hbHQgfHwgJyc7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyk7XHJcbiAgICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJywgZWwuaHJlZik7IC8vIEFkZCBpbWFnZSB0byBmaWd1cmVcclxuXHJcbiAgICAgICAgICBmaWd1cmUuYXBwZW5kQ2hpbGQoaW1hZ2UpOyAvLyBDcmVhdGUgZmlnY2FwdGlvblxyXG5cclxuICAgICAgICAgIGlmIChjb25maWcuY2FwdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZy5jYXB0aW9uc1NlbGVjdG9yID09PSAnc2VsZicgJiYgZWwuZ2V0QXR0cmlidXRlKGNvbmZpZy5jYXB0aW9uQXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgIGZpZ2NhcHRpb24udGV4dENvbnRlbnQgPSBlbC5nZXRBdHRyaWJ1dGUoY29uZmlnLmNhcHRpb25BdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5jYXB0aW9uc1NlbGVjdG9yID09PSAnaW1nJyAmJiB0aHVtYm5haWwgJiYgdGh1bWJuYWlsLmdldEF0dHJpYnV0ZShjb25maWcuY2FwdGlvbkF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICBmaWdjYXB0aW9uLnRleHRDb250ZW50ID0gdGh1bWJuYWlsLmdldEF0dHJpYnV0ZShjb25maWcuY2FwdGlvbkF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmaWdjYXB0aW9uLnRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgZmlnY2FwdGlvbi5pZCA9IFwidG9iaWktZmlnY2FwdGlvbi1cIiArIGZpZ2NhcHRpb25JZDtcclxuICAgICAgICAgICAgICBmaWd1cmUuYXBwZW5kQ2hpbGQoZmlnY2FwdGlvbik7XHJcbiAgICAgICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCBmaWdjYXB0aW9uLmlkKTtcclxuICAgICAgICAgICAgICArK2ZpZ2NhcHRpb25JZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSAvLyBBZGQgZmlndXJlIHRvIGNvbnRhaW5lclxyXG5cclxuXHJcbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZmlndXJlKTsgLy8gQ3JlYXRlIGxvYWRpbmcgaW5kaWNhdG9yXHJcblxyXG4gICAgICAgICAgbG9hZGluZ0luZGljYXRvci5jbGFzc05hbWUgPSAndG9iaWktbG9hZGVyJztcclxuICAgICAgICAgIGxvYWRpbmdJbmRpY2F0b3Iuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3Byb2dyZXNzYmFyJyk7XHJcbiAgICAgICAgICBsb2FkaW5nSW5kaWNhdG9yLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy5sb2FkaW5nSW5kaWNhdG9yTGFiZWwpOyAvLyBBZGQgbG9hZGluZyBpbmRpY2F0b3IgdG8gY29udGFpbmVyXHJcblxyXG4gICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxvYWRpbmdJbmRpY2F0b3IpOyAvLyBSZWdpc3RlciB0eXBlXHJcblxyXG4gICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS10eXBlJywgJ2ltYWdlJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblByZWxvYWQ6IGZ1bmN0aW9uIG9uUHJlbG9hZChjb250YWluZXIpIHtcclxuICAgICAgICAgIC8vIFNhbWUgYXMgcHJlbG9hZFxyXG4gICAgICAgICAgc3VwcG9ydGVkRWxlbWVudHMuaW1hZ2Uub25Mb2FkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZChjb250YWluZXIpIHtcclxuICAgICAgICAgIHZhciBpbWFnZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcclxuXHJcbiAgICAgICAgICBpZiAoIWltYWdlLmhhc0F0dHJpYnV0ZSgnZGF0YS1zcmMnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIGZpZ3VyZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdmaWd1cmUnKTtcclxuICAgICAgICAgIHZhciBsb2FkaW5nSW5kaWNhdG9yID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy50b2JpaS1sb2FkZXInKTtcclxuXHJcbiAgICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChsb2FkaW5nSW5kaWNhdG9yKTtcclxuICAgICAgICAgICAgZmlndXJlLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZSgnc3JjJywgaW1hZ2UuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpKTtcclxuICAgICAgICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoY29udGFpbmVyKSB7Ly8gTm90aGluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiBvbkNsZWFudXAoY29udGFpbmVyKSB7Ly8gTm90aGluZ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaHRtbDoge1xyXG4gICAgICAgIGNoZWNrU3VwcG9ydDogZnVuY3Rpb24gY2hlY2tTdXBwb3J0KGVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2hlY2tUeXBlKGVsLCAnaHRtbCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChlbCwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBlbC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSA/IGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpIDogZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xyXG4gICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0U2VsZWN0b3IpO1xyXG5cclxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVwcywgSSBjYW4ndCBmaW5kIHRoZSB0YXJnZXQgXCIgKyB0YXJnZXRTZWxlY3RvciArIFwiLlwiKTtcclxuICAgICAgICAgIH0gLy8gQWRkIGNvbnRlbnQgdG8gY29udGFpbmVyXHJcblxyXG5cclxuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvLyBSZWdpc3RlciB0eXBlXHJcblxyXG4gICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS10eXBlJywgJ2h0bWwnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUHJlbG9hZDogZnVuY3Rpb24gb25QcmVsb2FkKGNvbnRhaW5lcikgey8vIE5vdGhpbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTG9hZDogZnVuY3Rpb24gb25Mb2FkKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgdmFyIHZpZGVvID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJyk7XHJcblxyXG4gICAgICAgICAgaWYgKHZpZGVvKSB7XHJcbiAgICAgICAgICAgIGlmICh2aWRlby5oYXNBdHRyaWJ1dGUoJ2RhdGEtdGltZScpICYmIHZpZGVvLnJlYWR5U3RhdGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgLy8gQ29udGludWUgd2hlcmUgdmlkZW8gd2FzIHN0b3BwZWRcclxuICAgICAgICAgICAgICB2aWRlby5jdXJyZW50VGltZSA9IHZpZGVvLmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb25maWcuYXV0b3BsYXlWaWRlbykge1xyXG4gICAgICAgICAgICAgIC8vIFN0YXJ0IHBsYXliYWNrIChhbmQgbG9hZGluZyBpZiBuZWNlc3NhcnkpXHJcbiAgICAgICAgICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiBvbkxlYXZlKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgdmFyIHZpZGVvID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJyk7XHJcblxyXG4gICAgICAgICAgaWYgKHZpZGVvKSB7XHJcbiAgICAgICAgICAgIGlmICghdmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgICAgICAgICAgLy8gU3RvcCBpZiB2aWRlbyBpcyBwbGF5aW5nXHJcbiAgICAgICAgICAgICAgdmlkZW8ucGF1c2UoKTtcclxuICAgICAgICAgICAgfSAvLyBCYWNrdXAgY3VycmVudFRpbWUgKG5lZWRlZCBmb3IgcmV2aXNpdClcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAodmlkZW8ucmVhZHlTdGF0ZSA+IDApIHtcclxuICAgICAgICAgICAgICB2aWRlby5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGltZScsIHZpZGVvLmN1cnJlbnRUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiBvbkNsZWFudXAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICB2YXIgdmlkZW8gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcigndmlkZW8nKTtcclxuXHJcbiAgICAgICAgICBpZiAodmlkZW8pIHtcclxuICAgICAgICAgICAgaWYgKHZpZGVvLnJlYWR5U3RhdGUgPiAwICYmIHZpZGVvLnJlYWR5U3RhdGUgPCAzICYmIHZpZGVvLmR1cmF0aW9uICE9PSB2aWRlby5jdXJyZW50VGltZSkge1xyXG4gICAgICAgICAgICAgIC8vIFNvbWUgZGF0YSBoYXMgYmVlbiBsb2FkZWQgYnV0IG5vdCB0aGUgd2hvbGUgcGFja2FnZS5cclxuICAgICAgICAgICAgICAvLyBJbiBvcmRlciB0byBzYXZlIGJhbmR3aWR0aCwgc3RvcCBkb3dubG9hZGluZyBhcyBzb29uIGFzIHBvc3NpYmxlLlxyXG4gICAgICAgICAgICAgIHZhciB2aWRlb0Nsb25lID0gdmlkZW8uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgIHJlbW92ZVNvdXJjZXModmlkZW8pO1xyXG4gICAgICAgICAgICAgIHZpZGVvLmxvYWQoKTtcclxuICAgICAgICAgICAgICB2aWRlby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHZpZGVvKTtcclxuICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmlkZW9DbG9uZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGlmcmFtZToge1xyXG4gICAgICAgIGNoZWNrU3VwcG9ydDogZnVuY3Rpb24gY2hlY2tTdXBwb3J0KGVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2hlY2tUeXBlKGVsLCAnaWZyYW1lJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiBpbml0KGVsLCBjb250YWluZXIpIHtcclxuICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICAgICAgICAgIHZhciBocmVmID0gZWwuaGFzQXR0cmlidXRlKCdocmVmJykgPyBlbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSA6IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTtcclxuICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJywgJzAnKTtcclxuICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnKTtcclxuICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJywgaHJlZik7XHJcblxyXG4gICAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnZGF0YS13aWR0aCcpKSB7XHJcbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5tYXhXaWR0aCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS13aWR0aCcpICsgXCJweFwiO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGVpZ2h0JykpIHtcclxuICAgICAgICAgICAgaWZyYW1lLnN0eWxlLm1heEhlaWdodCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1oZWlnaHQnKSArIFwicHhcIjtcclxuICAgICAgICAgIH0gLy8gQWRkIGlmcmFtZSB0byBjb250YWluZXJcclxuXHJcblxyXG4gICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlmcmFtZSk7IC8vIFJlZ2lzdGVyIHR5cGVcclxuXHJcbiAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnLCAnaWZyYW1lJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblByZWxvYWQ6IGZ1bmN0aW9uIG9uUHJlbG9hZChjb250YWluZXIpIHsvLyBOb3RoaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZChjb250YWluZXIpIHtcclxuICAgICAgICAgIHZhciBpZnJhbWUgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XHJcbiAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzcmMnLCBpZnJhbWUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoY29udGFpbmVyKSB7Ly8gTm90aGluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiBvbkNsZWFudXAoY29udGFpbmVyKSB7Ly8gTm90aGluZ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgeW91dHViZToge1xyXG4gICAgICAgIGNoZWNrU3VwcG9ydDogZnVuY3Rpb24gY2hlY2tTdXBwb3J0KGVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2hlY2tUeXBlKGVsLCAneW91dHViZScpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdChlbCwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICB2YXIgaWZyYW1lUGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgLy8gQWRkIGlmcmFtZVBsYWNlaG9sZGVyIHRvIGNvbnRhaW5lclxyXG5cclxuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpZnJhbWVQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICBwbGF5ZXJbcGxheWVySWRdID0gbmV3IHdpbmRvdy5ZVC5QbGF5ZXIoaWZyYW1lUGxhY2Vob2xkZXIsIHtcclxuICAgICAgICAgICAgaG9zdDogJ2h0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tJyxcclxuICAgICAgICAgICAgaGVpZ2h0OiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGVpZ2h0JykgfHwgJzM2MCcsXHJcbiAgICAgICAgICAgIHdpZHRoOiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2lkdGgnKSB8fCAnNjQwJyxcclxuICAgICAgICAgICAgdmlkZW9JZDogZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyksXHJcbiAgICAgICAgICAgIHBsYXllclZhcnM6IHtcclxuICAgICAgICAgICAgICBjb250cm9sczogZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRyb2xzJykgfHwgMSxcclxuICAgICAgICAgICAgICByZWw6IDAsXHJcbiAgICAgICAgICAgICAgcGxheXNpbmxpbmU6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7IC8vIFNldCBwbGF5ZXIgSURcclxuXHJcbiAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXBsYXllcicsIHBsYXllcklkKTsgLy8gUmVnaXN0ZXIgdHlwZVxyXG5cclxuICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScsICd5b3V0dWJlJyk7XHJcbiAgICAgICAgICBwbGF5ZXJJZCsrO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25QcmVsb2FkOiBmdW5jdGlvbiBvblByZWxvYWQoY29udGFpbmVyKSB7Ly8gTm90aGluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Mb2FkOiBmdW5jdGlvbiBvbkxvYWQoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICBpZiAoY29uZmlnLmF1dG9wbGF5VmlkZW8pIHtcclxuICAgICAgICAgICAgcGxheWVyW2NvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxheWVyJyldLnBsYXlWaWRlbygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gb25MZWF2ZShjb250YWluZXIpIHtcclxuICAgICAgICAgIGlmIChwbGF5ZXJbY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1wbGF5ZXInKV0uZ2V0UGxheWVyU3RhdGUoKSA9PT0gMSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJbY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1wbGF5ZXInKV0ucGF1c2VWaWRlbygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGVhbnVwOiBmdW5jdGlvbiBvbkNsZWFudXAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICBpZiAocGxheWVyW2NvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxheWVyJyldLmdldFBsYXllclN0YXRlKCkgPT09IDEpIHtcclxuICAgICAgICAgICAgcGxheWVyW2NvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxheWVyJyldLnBhdXNlVmlkZW8oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBjb21wYXRpYmxlIE9iamVjdC5lbnRyaWVzIHN1cHBvcnQgZm9yIElFXHJcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvZW50cmllcyNQb2x5ZmlsbFxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuICAgIGlmICghT2JqZWN0LmVudHJpZXMpIHtcclxuICAgICAgT2JqZWN0LmVudHJpZXMgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIG93blByb3BzID0gT2JqZWN0LmtleXMob2JqKTtcclxuICAgICAgICB2YXIgaSA9IG93blByb3BzLmxlbmd0aDtcclxuICAgICAgICB2YXIgcmVzQXJyYXkgPSBuZXcgQXJyYXkoaSk7XHJcblxyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgIHJlc0FycmF5W2ldID0gW293blByb3BzW2ldLCBvYmpbb3duUHJvcHNbaV1dXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXNBcnJheTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW5pdFxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQodXNlck9wdGlvbnMpIHtcclxuICAgICAgLy8gTWVyZ2UgdXNlciBvcHRpb25zIGludG8gZGVmYXVsdHNcclxuICAgICAgY29uZmlnID0gbWVyZ2VPcHRpb25zKHVzZXJPcHRpb25zKTsgLy8gQ2hlY2sgaWYgdGhlIGxpZ2h0Ym94IGFscmVhZHkgZXhpc3RzXHJcblxyXG4gICAgICBpZiAoIWxpZ2h0Ym94KSB7XHJcbiAgICAgICAgY3JlYXRlTGlnaHRib3goKTtcclxuICAgICAgfSAvLyBHZXQgYSBsaXN0IG9mIGFsbCBlbGVtZW50cyB3aXRoaW4gdGhlIGRvY3VtZW50XHJcblxyXG5cclxuICAgICAgdmFyIGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLnNlbGVjdG9yKTtcclxuXHJcbiAgICAgIGlmICghZWxzKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXBzLCBJIGNhbid0IGZpbmQgdGhlIHNlbGVjdG9yIFwiICsgY29uZmlnLnNlbGVjdG9yICsgXCIuXCIpO1xyXG4gICAgICB9IC8vIEV4ZWN1dGUgYSBmZXcgdGhpbmdzIG9uY2UgcGVyIGVsZW1lbnRcclxuXHJcblxyXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVscywgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgY2hlY2tEZXBlbmRlbmNpZXMoZWwpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGRlcGVuZGVuY2llc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gRWxlbWVudCB0byBhZGRcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gY2FsbCBhZnRlciBhZGRcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgY2hlY2tEZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiBjaGVja0RlcGVuZGVuY2llcyhlbCwgY2FsbGJhY2spIHtcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBZb3VUdWJlIHZpZGVvIGFuZCBpZiB0aGUgWW91VHViZSBpZnJhbWUtQVBJIGlzIHJlYWR5XHJcbiAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10eXBlPVwieW91dHViZVwiXScpICE9PSBudWxsICYmICFpc1lvdVR1YmVEZXBlbmRlbmNpZUxvYWRlZCkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWZyYW1lX2FwaScpID09PSBudWxsKSB7XHJcbiAgICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XHJcbiAgICAgICAgICB0YWcuaWQgPSAnaWZyYW1lX2FwaSc7XHJcbiAgICAgICAgICB0YWcuc3JjID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xyXG4gICAgICAgICAgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAod2FpdGluZ0Vscy5pbmRleE9mKGVsKSA9PT0gLTEpIHtcclxuICAgICAgICAgIHdhaXRpbmdFbHMucHVzaChlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aW5kb3cub25Zb3VUdWJlUGxheWVyQVBJUmVhZHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHdhaXRpbmdFbHMsIGZ1bmN0aW9uICh3YWl0aW5nRWwpIHtcclxuICAgICAgICAgICAgYWRkKHdhaXRpbmdFbCwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpc1lvdVR1YmVEZXBlbmRlbmNpZUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhZGQoZWwsIGNhbGxiYWNrKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGdyb3VwIG5hbWUgZnJvbSBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgZ2V0R3JvdXBOYW1lID0gZnVuY3Rpb24gZ2V0R3JvdXBOYW1lKGVsKSB7XHJcbiAgICAgIHJldHVybiBlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZ3JvdXAnKSA/IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1ncm91cCcpIDogJ2RlZmF1bHQnO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29weSBhbiBvYmplY3QuIChUaGUgc2VjdXJlIHdheSlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGNvcHlPYmplY3QgPSBmdW5jdGlvbiBjb3B5T2JqZWN0KG9iamVjdCkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3QpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBFbGVtZW50IHRvIGFkZFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB0byBjYWxsIGFmdGVyIGFkZFxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBhZGQgPSBmdW5jdGlvbiBhZGQoZWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgIG5ld0dyb3VwID0gZ2V0R3JvdXBOYW1lKGVsKTtcclxuXHJcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGdyb3VwcywgbmV3R3JvdXApKSB7XHJcbiAgICAgICAgZ3JvdXBzW25ld0dyb3VwXSA9IGNvcHlPYmplY3QoZ3JvdXBBdHRzKTtcclxuICAgICAgICBjcmVhdGVTbGlkZXIoKTtcclxuICAgICAgfSAvLyBDaGVjayBpZiBlbGVtZW50IGFscmVhZHkgZXhpc3RzXHJcblxyXG5cclxuICAgICAgaWYgKGdyb3Vwc1tuZXdHcm91cF0uZ2FsbGVyeS5pbmRleE9mKGVsKSA9PT0gLTEpIHtcclxuICAgICAgICBncm91cHNbbmV3R3JvdXBdLmdhbGxlcnkucHVzaChlbCk7XHJcbiAgICAgICAgZ3JvdXBzW25ld0dyb3VwXS5lbGVtZW50c0xlbmd0aCsrOyAvLyBTZXQgem9vbSBpY29uIGlmIG5lY2Vzc2FyeVxyXG5cclxuICAgICAgICBpZiAoY29uZmlnLnpvb20gJiYgZWwucXVlcnlTZWxlY3RvcignaW1nJykpIHtcclxuICAgICAgICAgIHZhciBUb2JpaVpvb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIFRvYmlpWm9vbS5jbGFzc05hbWUgPSAndG9iaWktem9vbV9faWNvbic7XHJcbiAgICAgICAgICBUb2JpaVpvb20uaW5uZXJIVE1MID0gY29uZmlnLnpvb21UZXh0O1xyXG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndG9iaWktem9vbScpO1xyXG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoVG9iaWlab29tKTtcclxuICAgICAgICB9IC8vIEJpbmQgY2xpY2sgZXZlbnQgaGFuZGxlclxyXG5cclxuXHJcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0cmlnZ2VyVG9iaWkpO1xyXG4gICAgICAgIGNyZWF0ZVNsaWRlKGVsKTtcclxuXHJcbiAgICAgICAgaWYgKGlzT3BlbigpICYmIG5ld0dyb3VwID09PSBhY3RpdmVHcm91cCkge1xyXG4gICAgICAgICAgdXBkYXRlQ29uZmlnKCk7XHJcbiAgICAgICAgICB1cGRhdGVMaWdodGJveCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VwcywgZWxlbWVudCBhbHJlYWR5IGFkZGVkIHRvIHRoZSBsaWdodGJveC4nKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGVsZW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIEVsZW1lbnQgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHRvIGNhbGwgYWZ0ZXIgcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHJlbW92ZSA9IGZ1bmN0aW9uIGFkZChlbCwgY2FsbGJhY2spIHtcclxuICAgICAgdmFyIGdyb3VwTmFtZSA9IGdldEdyb3VwTmFtZShlbCk7IC8vIENoZWNrIGlmIGVsZW1lbnQgZXhpc3RzXHJcblxyXG4gICAgICBpZiAoZ3JvdXBzW2dyb3VwTmFtZV0uZ2FsbGVyeS5pbmRleE9mKGVsKSA9PT0gLTEpIDsgZWxzZSB7XHJcbiAgICAgICAgdmFyIHNsaWRlSW5kZXggPSBncm91cHNbZ3JvdXBOYW1lXS5nYWxsZXJ5LmluZGV4T2YoZWwpO1xyXG4gICAgICAgIHZhciBzbGlkZUVsID0gZ3JvdXBzW2dyb3VwTmFtZV0uc2xpZGVyRWxlbWVudHNbc2xpZGVJbmRleF07IC8vIFRPRE8gSWYgdGhlIGVsZW1lbnQgdG8gYmUgcmVtb3ZlZCBpcyB0aGUgY3VycmVudGx5IHZpc2libGUgc2xpZGVcclxuICAgICAgICAvLyBUT0RPIFJlbW92ZSBlbGVtZW50XHJcbiAgICAgICAgLy8gZ3JvdXBzW2dyb3VwTmFtZV0uZ2FsbGVyeS5zcGxpY2UoZ3JvdXBzW2dyb3VwTmFtZV0uZ2FsbGVyeS5pbmRleE9mKGVsKSkgZG9uJ3Qgd29ya1xyXG5cclxuICAgICAgICBncm91cHNbZ3JvdXBOYW1lXS5lbGVtZW50c0xlbmd0aC0tOyAvLyBSZW1vdmUgem9vbSBpY29uIGlmIG5lY2Vzc2FyeVxyXG5cclxuICAgICAgICBpZiAoY29uZmlnLnpvb20gJiYgZWwucXVlcnlTZWxlY3RvcignLnRvYmlpLXpvb21fX2ljb24nKSkge1xyXG4gICAgICAgICAgdmFyIHpvb21JY29uID0gZWwucXVlcnlTZWxlY3RvcignLnRvYmlpLXpvb21fX2ljb24nKTtcclxuICAgICAgICAgIHpvb21JY29uLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWktem9vbScpO1xyXG4gICAgICAgICAgem9vbUljb24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh6b29tSWNvbik7XHJcbiAgICAgICAgfSAvLyBVbmJpbmQgY2xpY2sgZXZlbnQgaGFuZGxlclxyXG5cclxuXHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0cmlnZ2VyVG9iaWkpOyAvLyBSZW1vdmUgc2xpZGVcclxuXHJcbiAgICAgICAgc2xpZGVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNsaWRlRWwpO1xyXG5cclxuICAgICAgICBpZiAoaXNPcGVuKCkgJiYgZ3JvdXBOYW1lID09PSBhY3RpdmVHcm91cCkge1xyXG4gICAgICAgICAgdXBkYXRlQ29uZmlnKCk7XHJcbiAgICAgICAgICB1cGRhdGVMaWdodGJveCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIHRoZSBsaWdodGJveFxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgY3JlYXRlTGlnaHRib3ggPSBmdW5jdGlvbiBjcmVhdGVMaWdodGJveCgpIHtcclxuICAgICAgLy8gQ3JlYXRlIHRoZSBsaWdodGJveFxyXG4gICAgICBsaWdodGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBsaWdodGJveC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XHJcbiAgICAgIGxpZ2h0Ym94LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICBsaWdodGJveC5jbGFzc05hbWUgPSAndG9iaWknOyAvLyBDcmVhdGUgdGhlIHByZXZpb3VzIGJ1dHRvblxyXG5cclxuICAgICAgcHJldkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICBwcmV2QnV0dG9uLmNsYXNzTmFtZSA9ICd0b2JpaV9fcHJldic7XHJcbiAgICAgIHByZXZCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xyXG4gICAgICBwcmV2QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy5uYXZMYWJlbFswXSk7XHJcbiAgICAgIHByZXZCdXR0b24uaW5uZXJIVE1MID0gY29uZmlnLm5hdlRleHRbMF07XHJcbiAgICAgIGxpZ2h0Ym94LmFwcGVuZENoaWxkKHByZXZCdXR0b24pOyAvLyBDcmVhdGUgdGhlIG5leHQgYnV0dG9uXHJcblxyXG4gICAgICBuZXh0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIG5leHRCdXR0b24uY2xhc3NOYW1lID0gJ3RvYmlpX19uZXh0JztcclxuICAgICAgbmV4dEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XHJcbiAgICAgIG5leHRCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgY29uZmlnLm5hdkxhYmVsWzFdKTtcclxuICAgICAgbmV4dEJ1dHRvbi5pbm5lckhUTUwgPSBjb25maWcubmF2VGV4dFsxXTtcclxuICAgICAgbGlnaHRib3guYXBwZW5kQ2hpbGQobmV4dEJ1dHRvbik7IC8vIENyZWF0ZSB0aGUgY2xvc2UgYnV0dG9uXHJcblxyXG4gICAgICBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICBjbG9zZUJ1dHRvbi5jbGFzc05hbWUgPSAndG9iaWlfX2Nsb3NlJztcclxuICAgICAgY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xyXG4gICAgICBjbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBjb25maWcuY2xvc2VMYWJlbCk7XHJcbiAgICAgIGNsb3NlQnV0dG9uLmlubmVySFRNTCA9IGNvbmZpZy5jbG9zZVRleHQ7XHJcbiAgICAgIGxpZ2h0Ym94LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTsgLy8gQ3JlYXRlIHRoZSBjb3VudGVyXHJcblxyXG4gICAgICBjb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGNvdW50ZXIuY2xhc3NOYW1lID0gJ3RvYmlpX19jb3VudGVyJztcclxuICAgICAgbGlnaHRib3guYXBwZW5kQ2hpbGQoY291bnRlcik7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGlnaHRib3gpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgc2xpZGVyXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGNyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uIGNyZWF0ZVNsaWRlcigpIHtcclxuICAgICAgZ3JvdXBzW25ld0dyb3VwXS5zbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZ3JvdXBzW25ld0dyb3VwXS5zbGlkZXIuY2xhc3NOYW1lID0gJ3RvYmlpX19zbGlkZXInO1xyXG4gICAgICBsaWdodGJveC5hcHBlbmRDaGlsZChncm91cHNbbmV3R3JvdXBdLnNsaWRlcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBzbGlkZVxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgY3JlYXRlU2xpZGUgPSBmdW5jdGlvbiBjcmVhdGVTbGlkZShlbCkge1xyXG4gICAgICAvLyBEZXRlY3QgdHlwZVxyXG4gICAgICBmb3IgKHZhciBpbmRleCBpbiBzdXBwb3J0ZWRFbGVtZW50cykge1xyXG4gICAgICAgIC8vIGNvbnN0IGluZGV4IGRvbid0IHdvcmsgaW4gSUVcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN1cHBvcnRlZEVsZW1lbnRzLCBpbmRleCkpIHtcclxuICAgICAgICAgIGlmIChzdXBwb3J0ZWRFbGVtZW50c1tpbmRleF0uY2hlY2tTdXBwb3J0KGVsKSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgc2xpZGUgZWxlbWVudHNcclxuICAgICAgICAgICAgdmFyIHNsaWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdmFyIHNsaWRlckVsZW1lbnRDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHNsaWRlckVsZW1lbnQuY2xhc3NOYW1lID0gJ3RvYmlpX19zbGlkZXItc2xpZGUnO1xyXG4gICAgICAgICAgICBzbGlkZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgc2xpZGVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gZ3JvdXBzW25ld0dyb3VwXS54ICogMTAwICsgXCIlXCI7IC8vIENyZWF0ZSB0eXBlIGVsZW1lbnRzXHJcblxyXG4gICAgICAgICAgICBzdXBwb3J0ZWRFbGVtZW50c1tpbmRleF0uaW5pdChlbCwgc2xpZGVyRWxlbWVudENvbnRlbnQpOyAvLyBBZGQgc2xpZGUgY29udGVudCBjb250YWluZXIgdG8gc2xpZGVyIGVsZW1lbnRcclxuXHJcbiAgICAgICAgICAgIHNsaWRlckVsZW1lbnQuYXBwZW5kQ2hpbGQoc2xpZGVyRWxlbWVudENvbnRlbnQpOyAvLyBBZGQgc2xpZGVyIGVsZW1lbnQgdG8gc2xpZGVyXHJcblxyXG4gICAgICAgICAgICBncm91cHNbbmV3R3JvdXBdLnNsaWRlci5hcHBlbmRDaGlsZChzbGlkZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgZ3JvdXBzW25ld0dyb3VwXS5zbGlkZXJFbGVtZW50cy5wdXNoKHNsaWRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICArK2dyb3Vwc1tuZXdHcm91cF0ueDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVuIFRvYmlpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gSW5kZXggdG8gbG9hZFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB0byBjYWxsIGFmdGVyIG9wZW5cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgb3BlbiA9IGZ1bmN0aW9uIG9wZW4oaW5kZXgsIGNhbGxiYWNrKSB7XHJcbiAgICAgIGFjdGl2ZUdyb3VwID0gYWN0aXZlR3JvdXAgIT09IG51bGwgPyBhY3RpdmVHcm91cCA6IG5ld0dyb3VwO1xyXG5cclxuICAgICAgaWYgKCFpc09wZW4oKSAmJiAhaW5kZXgpIHtcclxuICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc09wZW4oKSkge1xyXG4gICAgICAgIGlmICghaW5kZXgpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVXBzLCBUb2JpaSBpcyBhbGVhZHkgb3Blbi4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA9PT0gZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXgpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVwcywgc2xpZGUgXCIgKyBpbmRleCArIFwiIGlzIGFscmVhZHkgc2VsZWN0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGluZGV4ID09PSAtMSB8fCBpbmRleCA+PSBncm91cHNbYWN0aXZlR3JvdXBdLmVsZW1lbnRzTGVuZ3RoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXBzLCBJIGNhbid0IGZpbmQgc2xpZGUgXCIgKyBpbmRleCArIFwiLlwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNvbmZpZy5oaWRlU2Nyb2xsYmFyKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RvYmlpLWlzLW9wZW4nKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RvYmlpLWlzLW9wZW4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdXBkYXRlQ29uZmlnKCk7IC8vIEhpZGUgY2xvc2UgaWYgbmVjZXNzYXJ5XHJcblxyXG4gICAgICBpZiAoIWNvbmZpZy5jbG9zZSkge1xyXG4gICAgICAgIGNsb3NlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgIH0gLy8gU2F2ZSB1c2Vy4oCZcyBmb2N1c1xyXG5cclxuXHJcbiAgICAgIGxhc3RGb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7IC8vIFNldCBjdXJyZW50IGluZGV4XHJcblxyXG4gICAgICBncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA9IGluZGV4O1xyXG4gICAgICBjbGVhckRyYWcoKTtcclxuICAgICAgYmluZEV2ZW50cygpOyAvLyBMb2FkIHNsaWRlXHJcblxyXG4gICAgICBsb2FkKGdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4KTsgLy8gTWFrZXMgbGlnaHRib3ggYXBwZWFyLCB0b29cclxuXHJcbiAgICAgIGxpZ2h0Ym94LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgdXBkYXRlTGlnaHRib3goKTsgLy8gUHJlbG9hZCBwcmV2aW91cyBhbmQgbmV4dCBzbGlkZVxyXG5cclxuICAgICAgcHJlbG9hZChncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCArIDEpO1xyXG4gICAgICBwcmVsb2FkKGdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4IC0gMSk7IC8vIEhhY2sgdG8gcHJldmVudCBhbmltYXRpb24gZHVyaW5nIG9wZW5pbmdcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyLmNsYXNzTGlzdC5hZGQoJ3RvYmlpX19zbGlkZXItLWFuaW1hdGUnKTtcclxuICAgICAgfSwgMTAwMCk7XHJcblxyXG4gICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSBUb2JpaVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gY2FsbCBhZnRlciBjbG9zZVxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBjbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGNhbGxiYWNrKSB7XHJcbiAgICAgIGlmICghaXNPcGVuKCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvYmlpIGlzIGFscmVhZHkgY2xvc2VkLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY29uZmlnLmhpZGVTY3JvbGxiYXIpIHtcclxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWktaXMtb3BlbicpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWktaXMtb3BlbicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB1bmJpbmRFdmVudHMoKTsgLy8gUmVlbmFibGUgdGhlIHVzZXLigJlzIGZvY3VzXHJcblxyXG4gICAgICBsYXN0Rm9jdXMuZm9jdXMoKTsgLy8gRG9uJ3QgZm9yZ2V0IHRvIGNsZWFudXAgb3VyIGN1cnJlbnQgZWxlbWVudFxyXG5cclxuICAgICAgdmFyIGNvbnRhaW5lciA9IGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyRWxlbWVudHNbZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXR5cGVdJyk7XHJcbiAgICAgIHZhciB0eXBlID0gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XHJcbiAgICAgIHN1cHBvcnRlZEVsZW1lbnRzW3R5cGVdLm9uTGVhdmUoY29udGFpbmVyKTtcclxuICAgICAgc3VwcG9ydGVkRWxlbWVudHNbdHlwZV0ub25DbGVhbnVwKGNvbnRhaW5lcik7XHJcbiAgICAgIGxpZ2h0Ym94LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpOyAvLyBSZXNldCBjdXJyZW50IGluZGV4XHJcblxyXG4gICAgICBncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA9IDA7IC8vIFJlbW92ZSB0aGUgaGFjayB0byBwcmV2ZW50IGFuaW1hdGlvbiBkdXJpbmcgb3BlbmluZ1xyXG5cclxuICAgICAgZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXIuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWlfX3NsaWRlci0tYW5pbWF0ZScpO1xyXG5cclxuICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJlbG9hZCBzbGlkZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIEluZGV4IHRvIHByZWxvYWRcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgcHJlbG9hZCA9IGZ1bmN0aW9uIHByZWxvYWQoaW5kZXgpIHtcclxuICAgICAgaWYgKGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyRWxlbWVudHNbaW5kZXhdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjb250YWluZXIgPSBncm91cHNbYWN0aXZlR3JvdXBdLnNsaWRlckVsZW1lbnRzW2luZGV4XS5xdWVyeVNlbGVjdG9yKCdbZGF0YS10eXBlXScpO1xyXG4gICAgICB2YXIgdHlwZSA9IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpO1xyXG4gICAgICBzdXBwb3J0ZWRFbGVtZW50c1t0eXBlXS5vblByZWxvYWQoY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIExvYWQgc2xpZGVcclxuICAgICAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gb3BlbmluZyB0aGUgbGlnaHRib3ggb3IgbW92aW5nIGluZGV4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gSW5kZXggdG8gbG9hZFxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZChpbmRleCkge1xyXG4gICAgICBpZiAoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXJFbGVtZW50c1tpbmRleF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGNvbnRhaW5lciA9IGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyRWxlbWVudHNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXR5cGVdJyk7XHJcbiAgICAgIHZhciB0eXBlID0gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XHJcbiAgICAgIHN1cHBvcnRlZEVsZW1lbnRzW3R5cGVdLm9uTG9hZChjb250YWluZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2hvdyB0aGUgcHJldmlvdXMgc2xpZGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHByZXYgPSBmdW5jdGlvbiBwcmV2KGNhbGxiYWNrKSB7XHJcbiAgICAgIGlmIChncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA+IDApIHtcclxuICAgICAgICBsZWF2ZShncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCk7XHJcbiAgICAgICAgbG9hZCgtLWdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4KTtcclxuICAgICAgICB1cGRhdGVMaWdodGJveCgnbGVmdCcpO1xyXG4gICAgICAgIGNsZWFudXAoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXggKyAxKTtcclxuICAgICAgICBwcmVsb2FkKGdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4IC0gMSk7XHJcblxyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNob3cgdGhlIG5leHQgc2xpZGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGNhbGxiYWNrKSB7XHJcbiAgICAgIGlmIChncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA8IGdyb3Vwc1thY3RpdmVHcm91cF0uZWxlbWVudHNMZW5ndGggLSAxKSB7XHJcbiAgICAgICAgbGVhdmUoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXgpO1xyXG4gICAgICAgIGxvYWQoKytncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCk7XHJcbiAgICAgICAgdXBkYXRlTGlnaHRib3goJ3JpZ2h0Jyk7XHJcbiAgICAgICAgY2xlYW51cChncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCAtIDEpO1xyXG4gICAgICAgIHByZWxvYWQoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXggKyAxKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTGVhdmUgc2xpZGVcclxuICAgICAqIFdpbGwgYmUgY2FsbGVkIGJlZm9yZSBtb3ZpbmcgaW5kZXhcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBJbmRleCB0byBsZWF2ZVxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBsZWF2ZSA9IGZ1bmN0aW9uIGxlYXZlKGluZGV4KSB7XHJcbiAgICAgIGlmIChncm91cHNbYWN0aXZlR3JvdXBdLnNsaWRlckVsZW1lbnRzW2luZGV4XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY29udGFpbmVyID0gZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXJFbGVtZW50c1tpbmRleF0ucXVlcnlTZWxlY3RvcignW2RhdGEtdHlwZV0nKTtcclxuICAgICAgdmFyIHR5cGUgPSBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcclxuICAgICAgc3VwcG9ydGVkRWxlbWVudHNbdHlwZV0ub25MZWF2ZShjb250YWluZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYW51cCBzbGlkZVxyXG4gICAgICogV2lsbCBiZSBjYWxsZWQgYWZ0ZXIgbW92aW5nIGluZGV4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gSW5kZXggdG8gY2xlYW51cFxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cChpbmRleCkge1xyXG4gICAgICBpZiAoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXJFbGVtZW50c1tpbmRleF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGNvbnRhaW5lciA9IGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyRWxlbWVudHNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXR5cGVdJyk7XHJcbiAgICAgIHZhciB0eXBlID0gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XHJcbiAgICAgIHN1cHBvcnRlZEVsZW1lbnRzW3R5cGVdLm9uQ2xlYW51cChjb250YWluZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIG9mZnNldFxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gdXBkYXRlT2Zmc2V0KCkge1xyXG4gICAgICBhY3RpdmVHcm91cCA9IGFjdGl2ZUdyb3VwICE9PSBudWxsID8gYWN0aXZlR3JvdXAgOiBuZXdHcm91cDtcclxuICAgICAgb2Zmc2V0ID0gLWdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4ICogbGlnaHRib3gub2Zmc2V0V2lkdGg7XHJcbiAgICAgIGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyBvZmZzZXQgKyBcInB4LCAwLCAwKVwiO1xyXG4gICAgICBvZmZzZXRUbXAgPSBvZmZzZXQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgY291bnRlclxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdXBkYXRlQ291bnRlciA9IGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXIoKSB7XHJcbiAgICAgIGNvdW50ZXIudGV4dENvbnRlbnQgPSBncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCArIDEgKyBcIi9cIiArIGdyb3Vwc1thY3RpdmVHcm91cF0uZWxlbWVudHNMZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZm9jdXMgdG8gdGhlIG5leHQgc2xpZGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyIC0gQ3VycmVudCBzbGlkZSBkaXJlY3Rpb25cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdXBkYXRlRm9jdXMgPSBmdW5jdGlvbiB1cGRhdGVGb2N1cyhkaXIpIHtcclxuICAgICAgdmFyIGZvY3VzYWJsZUVscyA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoY29uZmlnLm5hdikge1xyXG4gICAgICAgIHByZXZCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBuZXh0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChkaXIgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgcHJldkJ1dHRvbi5mb2N1cygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZXh0QnV0dG9uLmZvY3VzKCk7XHJcbiAgICAgICAgfSAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBzbGlkZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGdyb3Vwc1thY3RpdmVHcm91cF0uZWxlbWVudHNMZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgIHByZXZCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgbmV4dEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgaWYgKGNvbmZpZy5jbG9zZSkge1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBJZiB0aGUgZmlyc3Qgc2xpZGUgaXMgZGlzcGxheWVkXHJcbiAgICAgICAgICBpZiAoZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgcHJldkJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIG5leHRCdXR0b24uZm9jdXMoKTtcclxuICAgICAgICAgIH0gLy8gSWYgdGhlIGxhc3Qgc2xpZGUgaXMgZGlzcGxheWVkXHJcblxyXG5cclxuICAgICAgICAgIGlmIChncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA9PT0gZ3JvdXBzW2FjdGl2ZUdyb3VwXS5lbGVtZW50c0xlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgbmV4dEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHByZXZCdXR0b24uZm9jdXMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmNsb3NlKSB7XHJcbiAgICAgICAgY2xvc2VCdXR0b24uZm9jdXMoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9jdXNhYmxlRWxzID0gbGlnaHRib3gucXVlcnlTZWxlY3RvckFsbCgnLnRvYmlpID4gYnV0dG9uOm5vdCg6ZGlzYWJsZWQpJyk7XHJcbiAgICAgIGZpcnN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbMF07XHJcbiAgICAgIGxhc3RGb2N1c2FibGVFbCA9IGZvY3VzYWJsZUVscy5sZW5ndGggPT09IDEgPyBmb2N1c2FibGVFbHNbMF0gOiBmb2N1c2FibGVFbHNbZm9jdXNhYmxlRWxzLmxlbmd0aCAtIDFdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXIgZHJhZyBhZnRlciB0b3VjaGVuZCBhbmQgbW91c3VwIGV2ZW50XHJcbiAgICAgKlxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBjbGVhckRyYWcgPSBmdW5jdGlvbiBjbGVhckRyYWcoKSB7XHJcbiAgICAgIGRyYWcgPSB7XHJcbiAgICAgICAgc3RhcnRYOiAwLFxyXG4gICAgICAgIGVuZFg6IDAsXHJcbiAgICAgICAgc3RhcnRZOiAwLFxyXG4gICAgICAgIGVuZFk6IDBcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY2FsY3VsYXRlIGRyYWcgLyBzd2lwZSBldmVudFxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdXBkYXRlQWZ0ZXJEcmFnID0gZnVuY3Rpb24gdXBkYXRlQWZ0ZXJEcmFnKCkge1xyXG4gICAgICB2YXIgbW92ZW1lbnRYID0gZHJhZy5lbmRYIC0gZHJhZy5zdGFydFg7XHJcbiAgICAgIHZhciBtb3ZlbWVudFkgPSBkcmFnLmVuZFkgLSBkcmFnLnN0YXJ0WTtcclxuICAgICAgdmFyIG1vdmVtZW50WERpc3RhbmNlID0gTWF0aC5hYnMobW92ZW1lbnRYKTtcclxuICAgICAgdmFyIG1vdmVtZW50WURpc3RhbmNlID0gTWF0aC5hYnMobW92ZW1lbnRZKTtcclxuXHJcbiAgICAgIGlmIChtb3ZlbWVudFggPiAwICYmIG1vdmVtZW50WERpc3RhbmNlID4gY29uZmlnLnRocmVzaG9sZCAmJiBncm91cHNbYWN0aXZlR3JvdXBdLmN1cnJlbnRJbmRleCA+IDApIHtcclxuICAgICAgICBwcmV2KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAobW92ZW1lbnRYIDwgMCAmJiBtb3ZlbWVudFhEaXN0YW5jZSA+IGNvbmZpZy50aHJlc2hvbGQgJiYgZ3JvdXBzW2FjdGl2ZUdyb3VwXS5jdXJyZW50SW5kZXggIT09IGdyb3Vwc1thY3RpdmVHcm91cF0uZWxlbWVudHNMZW5ndGggLSAxKSB7XHJcbiAgICAgICAgbmV4dCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKG1vdmVtZW50WSA8IDAgJiYgbW92ZW1lbnRZRGlzdGFuY2UgPiBjb25maWcudGhyZXNob2xkICYmIGNvbmZpZy5zd2lwZUNsb3NlKSB7XHJcbiAgICAgICAgY2xvc2UoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB1cGRhdGVPZmZzZXQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplIGV2ZW50IHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgcmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XHJcbiAgICAgIGlmICghcmVzaXplVGlja2luZykge1xyXG4gICAgICAgIHJlc2l6ZVRpY2tpbmcgPSB0cnVlO1xyXG4gICAgICAgIGJyb3dzZXJXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHVwZGF0ZU9mZnNldCgpO1xyXG4gICAgICAgICAgcmVzaXplVGlja2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGljayBldmVudCBoYW5kbGVyIHRvIHRyaWdnZXIgVG9iaWlcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHRyaWdnZXJUb2JpaSA9IGZ1bmN0aW9uIHRyaWdnZXJUb2JpaShldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBhY3RpdmVHcm91cCA9IGdldEdyb3VwTmFtZSh0aGlzKTtcclxuICAgICAgb3Blbihncm91cHNbYWN0aXZlR3JvdXBdLmdhbGxlcnkuaW5kZXhPZih0aGlzKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGljayBldmVudCBoYW5kbGVyXHJcbiAgICAgKlxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBjbGlja0hhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gcHJldkJ1dHRvbikge1xyXG4gICAgICAgIHByZXYoKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQgPT09IG5leHRCdXR0b24pIHtcclxuICAgICAgICBuZXh0KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSBjbG9zZUJ1dHRvbiB8fCBldmVudC50YXJnZXQuY2xhc3NOYW1lID09PSAndG9iaWlfX3NsaWRlci1zbGlkZScgJiYgY29uZmlnLmRvY0Nsb3NlKSB7XHJcbiAgICAgICAgY2xvc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBLZXlkb3duIGV2ZW50IGhhbmRsZXJcclxuICAgICAqXHJcbiAgICAgKiBAVE9ETzogUmVtb3ZlIHRoZSBkZXByZWNhdGVkIGV2ZW50LmtleUNvZGUgd2hlbiBFZGdlIHN1cHBvcnQgZXZlbnQuY29kZSBhbmQgd2UgZHJvcCBmKmNraW5nIElFXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleUNvZGVcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIga2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihldmVudCkge1xyXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gOSB8fCBldmVudC5jb2RlID09PSAnVGFiJykge1xyXG4gICAgICAgIC8vIGBUQUJgIEtleTogTmF2aWdhdGUgdG8gdGhlIG5leHQgLyBwcmV2aW91cyBmb2N1c2FibGUgZWxlbWVudFxyXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgLy8gU3RlcCBiYWNrd2FyZHMgaW4gdGhlIHRhYi1vcmRlclxyXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGZpcnN0Rm9jdXNhYmxlRWwpIHtcclxuICAgICAgICAgICAgbGFzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIFN0ZXAgZm9yd2FyZCBpbiB0aGUgdGFiLW9yZGVyXHJcbiAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgICAgIGZpcnN0Rm9jdXNhYmxlRWwuZm9jdXMoKTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcgfHwgZXZlbnQuY29kZSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAvLyBgRVNDYCBLZXk6IENsb3NlIFRvYmlpXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjbG9zZSgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3IHx8IGV2ZW50LmNvZGUgPT09ICdBcnJvd0xlZnQnKSB7XHJcbiAgICAgICAgLy8gYFBSRVZgIEtleTogU2hvdyB0aGUgcHJldmlvdXMgc2xpZGVcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHByZXYoKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSB8fCBldmVudC5jb2RlID09PSAnQXJyb3dSaWdodCcpIHtcclxuICAgICAgICAvLyBgTkVYVGAgS2V5OiBTaG93IHRoZSBuZXh0IHNsaWRlXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBuZXh0KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRvdWNoc3RhcnQgZXZlbnQgaGFuZGxlclxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdG91Y2hzdGFydEhhbmRsZXIgPSBmdW5jdGlvbiB0b3VjaHN0YXJ0SGFuZGxlcihldmVudCkge1xyXG4gICAgICAvLyBQcmV2ZW50IGRyYWdnaW5nIC8gc3dpcGluZyBvbiB0ZXh0YXJlYXMgaW5wdXRzIGFuZCBzZWxlY3RzXHJcbiAgICAgIGlmIChpc0lnbm9yZUVsZW1lbnQoZXZlbnQudGFyZ2V0KSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIHBvaW50ZXJEb3duID0gdHJ1ZTtcclxuICAgICAgZHJhZy5zdGFydFggPSBldmVudC50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICBkcmFnLnN0YXJ0WSA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVk7XHJcbiAgICAgIGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyLmNsYXNzTGlzdC5hZGQoJ3RvYmlpX19zbGlkZXItLWlzLWRyYWdnaW5nJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb3VjaG1vdmUgZXZlbnQgaGFuZGxlclxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdG91Y2htb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIHRvdWNobW92ZUhhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICBpZiAocG9pbnRlckRvd24pIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGRyYWcuZW5kWCA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgICAgZHJhZy5lbmRZID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgICBkb1N3aXBlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRvdWNoZW5kIGV2ZW50IGhhbmRsZXJcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHRvdWNoZW5kSGFuZGxlciA9IGZ1bmN0aW9uIHRvdWNoZW5kSGFuZGxlcihldmVudCkge1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgcG9pbnRlckRvd24gPSBmYWxzZTtcclxuICAgICAgZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXIuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWlfX3NsaWRlci0taXMtZHJhZ2dpbmcnKTtcclxuXHJcbiAgICAgIGlmIChkcmFnLmVuZFgpIHtcclxuICAgICAgICBpc0RyYWdnaW5nWCA9IGZhbHNlO1xyXG4gICAgICAgIGlzRHJhZ2dpbmdZID0gZmFsc2U7XHJcbiAgICAgICAgdXBkYXRlQWZ0ZXJEcmFnKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNsZWFyRHJhZygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2Vkb3duIGV2ZW50IGhhbmRsZXJcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIG1vdXNlZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZWRvd25IYW5kbGVyKGV2ZW50KSB7XHJcbiAgICAgIC8vIFByZXZlbnQgZHJhZ2dpbmcgLyBzd2lwaW5nIG9uIHRleHRhcmVhcyBpbnB1dHMgYW5kIHNlbGVjdHNcclxuICAgICAgaWYgKGlzSWdub3JlRWxlbWVudChldmVudC50YXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgcG9pbnRlckRvd24gPSB0cnVlO1xyXG4gICAgICBkcmFnLnN0YXJ0WCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICBkcmFnLnN0YXJ0WSA9IGV2ZW50LnBhZ2VZO1xyXG4gICAgICBncm91cHNbYWN0aXZlR3JvdXBdLnNsaWRlci5jbGFzc0xpc3QuYWRkKCd0b2JpaV9fc2xpZGVyLS1pcy1kcmFnZ2luZycpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2Vtb3ZlIGV2ZW50IGhhbmRsZXJcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIG1vdXNlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZW1vdmVIYW5kbGVyKGV2ZW50KSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICBpZiAocG9pbnRlckRvd24pIHtcclxuICAgICAgICBkcmFnLmVuZFggPSBldmVudC5wYWdlWDtcclxuICAgICAgICBkcmFnLmVuZFkgPSBldmVudC5wYWdlWTtcclxuICAgICAgICBkb1N3aXBlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1vdXNldXAgZXZlbnQgaGFuZGxlclxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgbW91c2V1cEhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZXVwSGFuZGxlcihldmVudCkge1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgcG9pbnRlckRvd24gPSBmYWxzZTtcclxuICAgICAgZ3JvdXBzW2FjdGl2ZUdyb3VwXS5zbGlkZXIuY2xhc3NMaXN0LnJlbW92ZSgndG9iaWlfX3NsaWRlci0taXMtZHJhZ2dpbmcnKTtcclxuXHJcbiAgICAgIGlmIChkcmFnLmVuZFgpIHtcclxuICAgICAgICBpc0RyYWdnaW5nWCA9IGZhbHNlO1xyXG4gICAgICAgIGlzRHJhZ2dpbmdZID0gZmFsc2U7XHJcbiAgICAgICAgdXBkYXRlQWZ0ZXJEcmFnKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNsZWFyRHJhZygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGVjaWRlIHdoZXRoZXIgdG8gZG8gaG9yaXpvbnRhbCBvZiB2ZXJ0aWNhbCBzd2lwZVxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgZG9Td2lwZSA9IGZ1bmN0aW9uIGRvU3dpcGUoKSB7XHJcbiAgICAgIGlmIChNYXRoLmFicyhkcmFnLnN0YXJ0WCAtIGRyYWcuZW5kWCkgPiAwICYmICFpc0RyYWdnaW5nWSAmJiBjb25maWcuc3dpcGVDbG9zZSkge1xyXG4gICAgICAgIC8vIEhvcml6b250YWwgc3dpcGVcclxuICAgICAgICBncm91cHNbYWN0aXZlR3JvdXBdLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgKG9mZnNldFRtcCAtIE1hdGgucm91bmQoZHJhZy5zdGFydFggLSBkcmFnLmVuZFgpKSArIFwicHgsIDAsIDApXCI7XHJcbiAgICAgICAgaXNEcmFnZ2luZ1ggPSB0cnVlO1xyXG4gICAgICAgIGlzRHJhZ2dpbmdZID0gZmFsc2U7XHJcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZHJhZy5zdGFydFkgLSBkcmFnLmVuZFkpID4gMCAmJiAhaXNEcmFnZ2luZ1gpIHtcclxuICAgICAgICAvLyBWZXJ0aWNhbCBzd2lwZVxyXG4gICAgICAgIGdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyBvZmZzZXRUbXAgKyBcInB4LCAtXCIgKyBNYXRoLnJvdW5kKGRyYWcuc3RhcnRZIC0gZHJhZy5lbmRZKSArIFwicHgsIDApXCI7XHJcbiAgICAgICAgaXNEcmFnZ2luZ1ggPSBmYWxzZTtcclxuICAgICAgICBpc0RyYWdnaW5nWSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEJpbmQgZXZlbnRzXHJcbiAgICAgKlxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBiaW5kRXZlbnRzID0gZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcclxuICAgICAgaWYgKGNvbmZpZy5rZXlib2FyZCkge1xyXG4gICAgICAgIGJyb3dzZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25IYW5kbGVyKTtcclxuICAgICAgfSAvLyBSZXNpemUgZXZlbnRcclxuXHJcblxyXG4gICAgICBicm93c2VyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOyAvLyBDbGljayBldmVudFxyXG5cclxuICAgICAgbGlnaHRib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0hhbmRsZXIpO1xyXG5cclxuICAgICAgaWYgKGNvbmZpZy5kcmFnZ2FibGUpIHtcclxuICAgICAgICBpZiAoaXNUb3VjaERldmljZSgpKSB7XHJcbiAgICAgICAgICAvLyBUb3VjaCBldmVudHNcclxuICAgICAgICAgIGxpZ2h0Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaHN0YXJ0SGFuZGxlcik7XHJcbiAgICAgICAgICBsaWdodGJveC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaG1vdmVIYW5kbGVyKTtcclxuICAgICAgICAgIGxpZ2h0Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdG91Y2hlbmRIYW5kbGVyKTtcclxuICAgICAgICB9IC8vIE1vdXNlIGV2ZW50c1xyXG5cclxuXHJcbiAgICAgICAgbGlnaHRib3guYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2Vkb3duSGFuZGxlcik7XHJcbiAgICAgICAgbGlnaHRib3guYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNldXBIYW5kbGVyKTtcclxuICAgICAgICBsaWdodGJveC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmVIYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVW5iaW5kIGV2ZW50c1xyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdW5iaW5kRXZlbnRzID0gZnVuY3Rpb24gdW5iaW5kRXZlbnRzKCkge1xyXG4gICAgICBpZiAoY29uZmlnLmtleWJvYXJkKSB7XHJcbiAgICAgICAgYnJvd3NlcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5ZG93bkhhbmRsZXIpO1xyXG4gICAgICB9IC8vIFJlc2l6ZSBldmVudFxyXG5cclxuXHJcbiAgICAgIGJyb3dzZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7IC8vIENsaWNrIGV2ZW50XHJcblxyXG4gICAgICBsaWdodGJveC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XHJcblxyXG4gICAgICBpZiAoY29uZmlnLmRyYWdnYWJsZSkge1xyXG4gICAgICAgIGlmIChpc1RvdWNoRGV2aWNlKCkpIHtcclxuICAgICAgICAgIC8vIFRvdWNoIGV2ZW50c1xyXG4gICAgICAgICAgbGlnaHRib3gucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvdWNoc3RhcnRIYW5kbGVyKTtcclxuICAgICAgICAgIGxpZ2h0Ym94LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNobW92ZUhhbmRsZXIpO1xyXG4gICAgICAgICAgbGlnaHRib3gucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaGVuZEhhbmRsZXIpO1xyXG4gICAgICAgIH0gLy8gTW91c2UgZXZlbnRzXHJcblxyXG5cclxuICAgICAgICBsaWdodGJveC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZWRvd25IYW5kbGVyKTtcclxuICAgICAgICBsaWdodGJveC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2V1cEhhbmRsZXIpO1xyXG4gICAgICAgIGxpZ2h0Ym94LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlbW92ZUhhbmRsZXIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciBlbGVtZW50IGhhcyByZXF1ZXN0ZWQgZGF0YS10eXBlIHZhbHVlXHJcbiAgICAgKlxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciBjaGVja1R5cGUgPSBmdW5jdGlvbiBjaGVja1R5cGUoZWwsIHR5cGUpIHtcclxuICAgICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJykgPT09IHR5cGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYWxsIGBzcmNgIGF0dHJpYnV0ZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIEVsZW1lbnQgdG8gcmVtb3ZlIGFsbCBgc3JjYCBhdHRyaWJ1dGVzXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHJlbW92ZVNvdXJjZXMgPSBmdW5jdGlvbiBzZXRWaWRlb1NvdXJjZXMoZWwpIHtcclxuICAgICAgdmFyIHNvdXJjZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCdzcmMnKTtcclxuXHJcbiAgICAgIGlmIChzb3VyY2VzKSB7XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzb3VyY2VzLCBmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgICBzb3VyY2Uuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBDb25maWdcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIHVwZGF0ZUNvbmZpZyA9IGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZygpIHtcclxuICAgICAgaWYgKGNvbmZpZy5kcmFnZ2FibGUgJiYgZ3JvdXBzW2FjdGl2ZUdyb3VwXS5lbGVtZW50c0xlbmd0aCA+IDEgJiYgIWdyb3Vwc1thY3RpdmVHcm91cF0uc2xpZGVyLmNsYXNzTGlzdC5jb250YWlucygndG9iaWlfX3NsaWRlci0taXMtZHJhZ2dhYmxlJykpIHtcclxuICAgICAgICBncm91cHNbYWN0aXZlR3JvdXBdLnNsaWRlci5jbGFzc0xpc3QuYWRkKCd0b2JpaV9fc2xpZGVyLS1pcy1kcmFnZ2FibGUnKTtcclxuICAgICAgfSAvLyBIaWRlIGJ1dHRvbnMgaWYgbmVjZXNzYXJ5XHJcblxyXG5cclxuICAgICAgaWYgKCFjb25maWcubmF2IHx8IGdyb3Vwc1thY3RpdmVHcm91cF0uZWxlbWVudHNMZW5ndGggPT09IDEgfHwgY29uZmlnLm5hdiA9PT0gJ2F1dG8nICYmIGlzVG91Y2hEZXZpY2UoKSkge1xyXG4gICAgICAgIHByZXZCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgbmV4dEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcmV2QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgICBuZXh0QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgfSAvLyBIaWRlIGNvdW50ZXIgaWYgbmVjZXNzYXJ5XHJcblxyXG5cclxuICAgICAgaWYgKCFjb25maWcuY291bnRlciB8fCBncm91cHNbYWN0aXZlR3JvdXBdLmVsZW1lbnRzTGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgY291bnRlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb3VudGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHNsaWRlclxyXG4gICAgICovXHJcblxyXG5cclxuICAgIHZhciB1cGRhdGVTbGlkZXIgPSBmdW5jdGlvbiB1cGRhdGVTbGlkZXIoKSB7XHJcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gZ3JvdXBzKSB7XHJcbiAgICAgICAgLy8gY29uc3QgbmFtZSBkb24ndCB3b3JrIGluIElFXHJcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZ3JvdXBzLCBuYW1lKSkgY29udGludWU7XHJcbiAgICAgICAgZ3JvdXBzW25hbWVdLnNsaWRlci5zdHlsZS5kaXNwbGF5ID0gYWN0aXZlR3JvdXAgPT09IG5hbWUgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgbGlnaHRib3hcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyIC0gQ3VycmVudCBzbGlkZSBkaXJlY3Rpb25cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgdXBkYXRlTGlnaHRib3ggPSBmdW5jdGlvbiB1cGRhdGVMaWdodGJveChkaXIpIHtcclxuICAgICAgdXBkYXRlU2xpZGVyKCk7XHJcbiAgICAgIHVwZGF0ZU9mZnNldCgpO1xyXG4gICAgICB1cGRhdGVDb3VudGVyKCk7XHJcbiAgICAgIHVwZGF0ZUZvY3VzKGRpcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95IFRvYmlpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB0byBjYWxsIGFmdGVyIGRlc3Ryb3lcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koY2FsbGJhY2spIHtcclxuICAgICAgaWYgKGlzT3BlbigpKSB7XHJcbiAgICAgICAgY2xvc2UoKTtcclxuICAgICAgfSAvLyBUT0RPIENsZWFudXBcclxuXHJcblxyXG4gICAgICB2YXIgZ3JvdXBzRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGdyb3Vwcyk7XHJcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZ3JvdXBzRW50cmllcywgZnVuY3Rpb24gKGdyb3Vwc0VudHJpZSkge1xyXG4gICAgICAgIHZhciBlbHMgPSBncm91cHNFbnRyaWVbMV0uZ2FsbGVyeTtcclxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVscywgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICByZW1vdmUoZWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgbGlnaHRib3gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaWdodGJveCk7XHJcbiAgICAgIGdyb3VwcyA9IHt9O1xyXG4gICAgICBuZXdHcm91cCA9IGFjdGl2ZUdyb3VwID0gbnVsbDtcclxuICAgICAgZmlnY2FwdGlvbklkID0gMDsgLy8gVE9ET1xyXG5cclxuICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgVG9iaWkgaXMgb3BlblxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgaXNPcGVuID0gZnVuY3Rpb24gaXNPcGVuKCkge1xyXG4gICAgICByZXR1cm4gbGlnaHRib3guZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAnZmFsc2UnO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGV0ZWN0IHdoZXRoZXIgZGV2aWNlIGlzIHRvdWNoIGNhcGFibGVcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGlzVG91Y2hEZXZpY2UgPSBmdW5jdGlvbiBpc1RvdWNoRGV2aWNlKCkge1xyXG4gICAgICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgZWxlbWVudCdzIG5vZGVOYW1lIGlzIHBhcnQgb2YgYXJyYXlcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGlzSWdub3JlRWxlbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JlRWxlbWVudChlbCkge1xyXG4gICAgICByZXR1cm4gWydURVhUQVJFQScsICdPUFRJT04nLCAnSU5QVVQnLCAnU0VMRUNUJ10uaW5kZXhPZihlbC5ub2RlTmFtZSkgIT09IC0xIHx8IGVsID09PSBwcmV2QnV0dG9uIHx8IGVsID09PSBuZXh0QnV0dG9uIHx8IGVsID09PSBjbG9zZUJ1dHRvbiB8fCBncm91cHNbYWN0aXZlR3JvdXBdLmVsZW1lbnRzTGVuZ3RoID09PSAxO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGN1cnJlbnQgaW5kZXhcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uIGN1cnJlbnRTbGlkZSgpIHtcclxuICAgICAgcmV0dXJuIGdyb3Vwc1thY3RpdmVHcm91cF0uY3VycmVudEluZGV4O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGN1cnJlbnQgZ3JvdXBcclxuICAgICAqXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIGN1cnJlbnRHcm91cCA9IGZ1bmN0aW9uIGN1cnJlbnRHcm91cCgpIHtcclxuICAgICAgcmV0dXJuIGFjdGl2ZUdyb3VwICE9PSBudWxsID8gYWN0aXZlR3JvdXAgOiBuZXdHcm91cDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNlbGVjdCBhIHNwZWNpZmljIGdyb3VwXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICB2YXIgc2VsZWN0R3JvdXAgPSBmdW5jdGlvbiBzZWxlY3RHcm91cChuYW1lKSB7XHJcbiAgICAgIGlmIChpc09wZW4oKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVXBzLCBJIGNhblxcJ3QgZG8gdGhpcy4gVG9iaWkgaXMgb3Blbi4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmFtZSAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGdyb3VwcywgbmFtZSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVcHMsIEkgZG9uJ3QgaGF2ZSBhIGdyb3VwIGNhbGxlZCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYWN0aXZlR3JvdXAgPSBuYW1lO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbml0KHVzZXJPcHRpb25zKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9wZW46IG9wZW4sXHJcbiAgICAgIHByZXY6IHByZXYsXHJcbiAgICAgIG5leHQ6IG5leHQsXHJcbiAgICAgIGNsb3NlOiBjbG9zZSxcclxuICAgICAgYWRkOiBjaGVja0RlcGVuZGVuY2llcyxcclxuICAgICAgcmVtb3ZlOiByZW1vdmUsXHJcbiAgICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXHJcbiAgICAgIGlzT3BlbjogaXNPcGVuLFxyXG4gICAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcclxuICAgICAgc2VsZWN0R3JvdXA6IHNlbGVjdEdyb3VwLFxyXG4gICAgICBjdXJyZW50R3JvdXA6IGN1cnJlbnRHcm91cFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiBUb2JpaTtcclxuXHJcbn0pKSk7XHJcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoV2Vha01hcCkpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmdcbiAgICAgICAgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSlcbiAgICAgICAgOiBzdGVwLnZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBzY3JpcHQgPSAnc2NyaXB0JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIganMgPSAnamF2YScgKyBzY3JpcHQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhqcyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyBzY3JpcHQgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvJyArIHNjcmlwdCArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlYmtpdC1zdHJpbmctcGFkLWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgcGFkU3RhcnQsIHBhZEVuZCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG4gICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBjZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICAgIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG5tb2R1bGUuZXhwb3J0cyA9ICcnLnJlcGVhdCB8fCBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleFxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICh0b1N0cmluZyAhPT0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpICE9PSAnW29iamVjdCB6XScgPyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufSA6IHRlc3QudG9TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHNoYXJlZCgnaW5zcGVjdFNvdXJjZScpO1xudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gIC8vIFdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmICFJU19OT0RFICYmIHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgIT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICByZXR1cm4gIShwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IGNoYWluW2luZGV4KytdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgICAgICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUucmVhY3Rpb25zID0gW107XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgcHJvbWlzZSwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4ocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgd3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB0aGlzLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHRoaXMsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHRoaXMsIHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pb3MnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhbWV0aG9kIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiLyoqXG4gKiBTU1IgV2luZG93IDIuMC4wXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTWF5IDEyLCAyMDIwXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICByZXR1cm4gKG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnY29uc3RydWN0b3InIGluIG9iaiAmJlxuICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHsgdGFyZ2V0ID0ge307IH1cbiAgICBpZiAoc3JjID09PSB2b2lkIDApIHsgc3JjID0ge307IH1cbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xudmFyIHNzckRvY3VtZW50ID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgICBibHVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIG5vZGVOYW1lOiAnJyxcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICBpbXBvcnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcblxudmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG52YXIgc3NyV2luZG93ID0ge1xuICAgIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgICBuYXZpZ2F0b3I6IHtcbiAgICAgICAgdXNlckFnZW50OiAnJyxcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBob3N0OiAnJyxcbiAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgIHNlYXJjaDogJycsXG4gICAgfSxcbiAgICBoaXN0b3J5OiB7XG4gICAgICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgZ286IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgYmFjazogZnVuY3Rpb24gKCkgeyB9LFxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBJbWFnZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIERhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBtYXRjaE1lZGlhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxufTtcbmV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG5cbmV4cG9ydCB7IGRvYyBhcyBkb2N1bWVudCwgZXh0ZW5kLCB3aW4gYXMgd2luZG93IH07XG4iLCIvKipcbiAqIERvbTcgMi4xLjVcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHA6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tLmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqIFRoZSBpRGFuZ2Vyby51c1xuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTWF5IDE1LCAyMDIwXG4gKi9cbmltcG9ydCB7IGRvY3VtZW50LCB3aW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuY2xhc3MgRG9tNyB7XG4gIGNvbnN0cnVjdG9yKGFycikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vIENyZWF0ZSBhcnJheS1saWtlIG9iamVjdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzZWxmW2ldID0gYXJyW2ldO1xuICAgIH1cbiAgICBzZWxmLmxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgLy8gUmV0dXJuIGNvbGxlY3Rpb24gd2l0aCBtZXRob2RzXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgbGV0IGkgPSAwO1xuICBpZiAoc2VsZWN0b3IgJiYgIWNvbnRleHQpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICB9XG4gIGlmIChzZWxlY3Rvcikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBlbHM7XG4gICAgICBsZXQgdGVtcFBhcmVudDtcbiAgICAgIGNvbnN0IGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICAgIGxldCB0b0NyZWF0ZSA9ICdkaXYnO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgICAgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWNvbnRleHQgJiYgc2VsZWN0b3JbMF0gPT09ICcjJyAmJiAhc2VsZWN0b3IubWF0Y2goL1sgLjw+On5dLykpIHtcbiAgICAgICAgICAvLyBQdXJlIElEIHNlbGVjdG9yXG4gICAgICAgICAgZWxzID0gW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yLnRyaW0oKS5zcGxpdCgnIycpWzFdKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXIgc2VsZWN0b3JzXG4gICAgICAgICAgZWxzID0gKGNvbnRleHQgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IudHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGVsc1tpXSkgYXJyLnB1c2goZWxzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICAgIC8vIE5vZGUvZWxlbWVudFxuICAgICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubGVuZ3RoID4gMCAmJiBzZWxlY3RvclswXS5ub2RlVHlwZSkge1xuICAgICAgLy8gQXJyYXkgb2YgZWxlbWVudHMgb3IgaW5zdGFuY2Ugb2YgRG9tXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2goc2VsZWN0b3JbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbn1cblxuJC5mbiA9IERvbTcucHJvdG90eXBlO1xuJC5DbGFzcyA9IERvbTc7XG4kLkRvbTcgPSBEb203O1xuXG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gIGNvbnN0IHVuaXF1ZUFycmF5ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHVuaXF1ZUFycmF5LmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHVuaXF1ZUFycmF5LnB1c2goYXJyW2ldKTtcbiAgfVxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgKG1hdGNoLCBncm91cDEpID0+IGdyb3VwMS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gIGVsc2UgaWYgKHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xufVxuZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgaWYgKHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gIGVsc2UgaWYgKHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gIHJldHVybiB3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTtcbn1cblxuLy8gQ2xhc3NlcyBhbmQgYXR0cmlidXRlc1xuZnVuY3Rpb24gYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXNbal0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXNbal0uY2xhc3NMaXN0LmFkZChjbGFzc2VzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgdGhpc1tqXS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICBpZiAoIXRoaXNbMF0pIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRoaXNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG59XG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgdGhpc1tqXS5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgYXR0clxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXQgYXR0cnNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiBwcm9wKHByb3BzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IHByb3BcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF1bcHJvcHNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNldCBwcm9wc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV1bcHJvcHNdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gIGxldCBlbDtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbCA9IHRoaXNbMF07XG4gICAgLy8gR2V0IHZhbHVlXG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiAoa2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpKSB7XG4gICAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHtrZXl9YCk7XG4gICAgICBpZiAoZGF0YUtleSkge1xuICAgICAgICByZXR1cm4gZGF0YUtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXQgdmFsdWVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gcmVtb3ZlRGF0YShrZXkpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGNvbnN0IGRhdGFzZXQgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoZWwuZGF0YXNldCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICBkYXRhc2V0W2RhdGFLZXldID0gZWwuZGF0YXNldFtkYXRhS2V5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnN0IGF0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgaWYgKGF0dHIubmFtZS5pbmRleE9mKCdkYXRhLScpID49IDApIHtcbiAgICAgICAgZGF0YXNldFt0b0NhbWVsQ2FzZShhdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IGF0dHIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7XG4gICAgZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7XG4gICAgZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuICByZXR1cm4gZGF0YXNldDtcbn1cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb21bMF0pIHtcbiAgICAgIGlmIChkb21bMF0ubXVsdGlwbGUgJiYgZG9tWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbVswXS5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChkb21bMF0uc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbVswXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSBkb21baV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLm9wdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoZWwub3B0aW9uc1tqXS52YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRvbTtcbn1cbi8vIFRyYW5zZm9ybXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbFN0eWxlID0gdGhpc1tpXS5zdHlsZTtcbiAgICBlbFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBlbFN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgaWYgKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICBkdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgIGVsU3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgZWxTdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIEV2ZW50c1xuZnVuY3Rpb24gb24oLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgIGlmICgkKHBhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkocGFyZW50c1trXSwgZXZlbnREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gIH1cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGxldCBqO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBvZmYoLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbaV07XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG4gICAgICBsZXQgaGFuZGxlcnM7XG4gICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBvbmNlKC4uLmFyZ3MpIHtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IFtldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmV2ZW50QXJncykge1xuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50QXJncyk7XG4gICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuZnVuY3Rpb24gdHJpZ2dlciguLi5hcmdzKSB7XG4gIGNvbnN0IGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTtcbiAgICAgIGxldCBldnQ7XG4gICAgICB0cnkge1xuICAgICAgICBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgICAgICBldnQuZGV0YWlsID0gZXZlbnREYXRhO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoKGRhdGEsIGRhdGFJbmRleCkgPT4gZGF0YUluZGV4ID4gMCk7XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGRvbS5vbihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0QW5pbWF0aW9uRW5kJywgJ2FuaW1hdGlvbmVuZCddO1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgaTtcbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGRvbS5vZmYoZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBkb20ub24oZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIFNpemluZy9TdHlsZXNcbmZ1bmN0aW9uIHdpZHRoKCkge1xuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gb3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogKGJveC50b3AgKyBzY3JvbGxUb3ApIC0gY2xpZW50VG9wLFxuICAgICAgbGVmdDogKGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCkgLSBjbGllbnRMZWZ0LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNob3coKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCk7XG4gIHJldHVybiB7fTtcbn1cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgbGV0IGk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gRG9tIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgY29uc3QgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGFyci5wdXNoKHRoaXNbaV0pO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG4vLyBJdGVyYXRlIG92ZXIgdGhlIGNvbGxlY3Rpb24gcGFzc2luZyBlbGVtZW50cyB0byBgY2FsbGJhY2tgXG5mdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gIC8vIERvbid0IGJvdGhlciBjb250aW51aW5nIHdpdGhvdXQgYSBjYWxsYmFja1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IGNvbGxlY3Rpb25cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzW2ldLCBpLCB0aGlzW2ldKSA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIEVuZCB0aGUgbG9vcCBlYXJseVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIC8vIFJldHVybiBgdGhpc2AgdG8gYWxsb3cgY2hhaW5lZCBET00gb3BlcmF0aW9uc1xuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAvLyBJdGVyYXRlIG92ZXIgdGhlIGN1cnJlbnQgY29sbGVjdGlvblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNbaV0sIHRoaXNbaV0sIGkpID09PSBmYWxzZSkge1xuICAgICAgLy8gRW5kIHRoZSBsb29wIGVhcmx5XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgLy8gUmV0dXJuIGB0aGlzYCB0byBhbGxvdyBjaGFpbmVkIERPTSBvcGVyYXRpb25zXG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gIGNvbnN0IG1hdGNoZWRJdGVtcyA9IFtdO1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChjYWxsYmFjay5jYWxsKGRvbVtpXSwgaSwgZG9tW2ldKSkgbWF0Y2hlZEl0ZW1zLnB1c2goZG9tW2ldKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcobWF0Y2hlZEl0ZW1zKTtcbn1cbmZ1bmN0aW9uIG1hcChjYWxsYmFjaykge1xuICBjb25zdCBtb2RpZmllZEl0ZW1zID0gW107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbW9kaWZpZWRJdGVtcy5wdXNoKGNhbGxiYWNrLmNhbGwoZG9tW2ldLCBpLCBkb21baV0pKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcobW9kaWZpZWRJdGVtcyk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodGhpc1swXSkge1xuICAgICAgcmV0dXJuIHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICBsZXQgY29tcGFyZVdpdGg7XG4gIGxldCBpO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG5cbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIGVsc2UgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cpIHJldHVybiBlbCA9PT0gd2luZG93O1xuXG4gIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICBjb21wYXJlV2l0aCA9IHNlbGVjdG9yLm5vZGVUeXBlID8gW3NlbGVjdG9yXSA6IHNlbGVjdG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpbmRleE9mKGVsKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldID09PSBlbCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIGxldCBjaGlsZCA9IHRoaXNbMF07XG4gIGxldCBpO1xuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIGxldCByZXR1cm5JbmRleDtcbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH1cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KFt0aGlzW2luZGV4XV0pO1xufVxuZnVuY3Rpb24gYXBwZW5kKC4uLmFyZ3MpIHtcbiAgbGV0IG5ld0NoaWxkO1xuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgYXJncy5sZW5ndGg7IGsgKz0gMSkge1xuICAgIG5ld0NoaWxkID0gYXJnc1trXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICBsZXQgaTtcbiAgbGV0IGo7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG4gICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgY29uc3QgYmVmb3JlID0gJChzZWxlY3Rvcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChiZWZvcmUubGVuZ3RoID09PSAxKSB7XG4gICAgICBiZWZvcmVbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYmVmb3JlWzBdKTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJlZm9yZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBiZWZvcmVbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGJlZm9yZVtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICBjb25zdCBhZnRlciA9ICQoc2VsZWN0b3IpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYWZ0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZnRlclswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBhZnRlclswXS5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFmdGVyLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFmdGVyW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBhZnRlcltqXS5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhbXSk7XG59XG5mdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgbGV0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKG5leHQpLmlzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgZWwgPSBuZXh0O1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhuZXh0RWxzKTtcbn1cbmZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tNyhbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcoW10pO1xufVxuZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIGxldCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKHByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgZWwgPSBwcmV2O1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhwcmV2RWxzKTtcbn1cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xufVxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChwYXJlbnQpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xufVxuZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICBsZXQgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICBjbG9zZXN0ID0gY2xvc2VzdC5wYXJlbnRzKHNlbGVjdG9yKS5lcSgwKTtcbiAgfVxuICByZXR1cm4gY2xvc2VzdDtcbn1cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgY29uc3QgZm91bmRFbGVtZW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KGZvdW5kRWxlbWVudHMpO1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZE5vZGVzO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxKSBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxICYmICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRG9tNyh1bmlxdWUoY2hpbGRyZW4pKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cbmZ1bmN0aW9uIGFkZCguLi5hcmdzKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBsZXQgajtcbiAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB0b0FkZCA9ICQoYXJnc1tpXSk7XG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb21bZG9tLmxlbmd0aF0gPSB0b0FkZFtqXTtcbiAgICAgIGRvbS5sZW5ndGggKz0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRvbTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbC5jaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIGVhc2luZyA9ICdzd2luZyc7XG5cbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcztcbiAgICBsZXQgY3VycmVudFRvcDtcbiAgICBsZXQgY3VycmVudExlZnQ7XG4gICAgbGV0IG1heFRvcDtcbiAgICBsZXQgbWF4TGVmdDtcbiAgICBsZXQgbmV3VG9wO1xuICAgIGxldCBuZXdMZWZ0O1xuICAgIGxldCBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBsZXQgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGxldCBhbmltYXRlVG9wID0gdG9wID4gMCB8fCB0b3AgPT09IDA7XG4gICAgbGV0IGFuaW1hdGVMZWZ0ID0gbGVmdCA+IDAgfHwgbGVmdCA9PT0gMDtcbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFkdXJhdGlvbikgcmV0dXJuO1xuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID09PSBjdXJyZW50VG9wKSBhbmltYXRlVG9wID0gZmFsc2U7XG4gICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPT09IGN1cnJlbnRMZWZ0KSBhbmltYXRlTGVmdCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6ICgwLjUgLSAoTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDIpKTtcbiAgICAgIGxldCBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyAoZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgKGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpKTtcbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA+IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPj0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufVxuLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcbmZ1bmN0aW9uIHNjcm9sbFRvcCguLi5hcmdzKSB7XG4gIGxldCBbdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFt0b3AsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cbiAgY29uc3QgZG9tID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZG9tLnNjcm9sbFRvKHVuZGVmaW5lZCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBzY3JvbGxMZWZ0KC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtsZWZ0LCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZG9tLnNjcm9sbFRvKGxlZnQsIHVuZGVmaW5lZCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKGluaXRpYWxQcm9wcywgaW5pdGlhbFBhcmFtcykge1xuICBjb25zdCBlbHMgPSB0aGlzO1xuICBjb25zdCBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnLCAvLyBvciAnbGluZWFyJ1xuICAgICAgLyogQ2FsbGJhY2tzXG4gICAgICBiZWdpbihlbGVtZW50cylcbiAgICAgIGNvbXBsZXRlKGVsZW1lbnRzKVxuICAgICAgcHJvZ3Jlc3MoZWxlbWVudHMsIGNvbXBsZXRlLCByZW1haW5pbmcsIHN0YXJ0LCB0d2VlblZhbHVlKVxuICAgICAgKi9cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcblxuICAgIGVsZW1lbnRzOiBlbHMsXG4gICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICBxdWU6IFtdLFxuXG4gICAgZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gKE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgIH0sXG4gICAgc3RvcCgpIHtcbiAgICAgIGlmIChhLmZyYW1lSWQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGEucXVlID0gW107XG4gICAgfSxcbiAgICBkb25lKGNvbXBsZXRlKSB7XG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29tcGxldGUpIGNvbXBsZXRlKGVscyk7XG4gICAgICBpZiAoYS5xdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBxdWUgPSBhLnF1ZS5zaGlmdCgpO1xuICAgICAgICBhLmFuaW1hdGUocXVlWzBdLCBxdWVbMV0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0ZShwcm9wcywgcGFyYW1zKSB7XG4gICAgICBpZiAoYS5hbmltYXRpbmcpIHtcbiAgICAgICAgYS5xdWUucHVzaChbcHJvcHMsIHBhcmFtc10pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG5cbiAgICAgIC8vIERlZmluZSAmIENhY2hlIEluaXRpYWxzICYgVW5pdHNcbiAgICAgIGEuZWxlbWVudHMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGxldCBpbml0aWFsRnVsbFZhbHVlO1xuICAgICAgICBsZXQgaW5pdGlhbFZhbHVlO1xuICAgICAgICBsZXQgdW5pdDtcbiAgICAgICAgbGV0IGZpbmFsVmFsdWU7XG4gICAgICAgIGxldCBmaW5hbEZ1bGxWYWx1ZTtcblxuICAgICAgICBpZiAoIWVsLmRvbTdBbmltYXRlSW5zdGFuY2UpIGEuZWxlbWVudHNbaW5kZXhdLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuXG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsLFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgICBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGluaXRpYWxGdWxsVmFsdWUpO1xuICAgICAgICAgIHVuaXQgPSBpbml0aWFsRnVsbFZhbHVlLnJlcGxhY2UoaW5pdGlhbFZhbHVlLCAnJyk7XG4gICAgICAgICAgZmluYWxWYWx1ZSA9IHBhcnNlRmxvYXQocHJvcHNbcHJvcF0pO1xuICAgICAgICAgIGZpbmFsRnVsbFZhbHVlID0gcHJvcHNbcHJvcF0gKyB1bml0O1xuICAgICAgICAgIGVsZW1lbnRzW2luZGV4XVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgICBsZXQgdGltZTtcbiAgICAgIGxldCBlbGVtZW50c0RvbmUgPSAwO1xuICAgICAgbGV0IHByb3BzRG9uZSA9IDA7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGxldCBiZWdhbiA9IGZhbHNlO1xuXG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgcHJvZ3Jlc3M7XG4gICAgICAgIGxldCBlYXNlUHJvZ3Jlc3M7XG4gICAgICAgIC8vIGxldCBlbDtcbiAgICAgICAgaWYgKCFiZWdhbikge1xuICAgICAgICAgIGJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocGFyYW1zLmJlZ2luKSBwYXJhbXMuYmVnaW4oZWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksICgoc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uKSAtIHRpbWUgPCAwID8gMCA6IChzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24pIC0gdGltZSksIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xuICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgY29uc3QgeyBpbml0aWFsVmFsdWUsIGZpbmFsVmFsdWUsIHVuaXQgfSA9IGVsW3Byb3BdO1xuICAgICAgICAgICAgZWxbcHJvcF0uY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlICsgKGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUpIHx8XG4gICAgICAgICAgICAgIChmaW5hbFZhbHVlIDwgaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA8PSBmaW5hbFZhbHVlKSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZWxlbWVudHNEb25lID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAvLyBUaGVuIGNhbGxcbiAgICAgICAgYS5mcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG4gICAgICBhLmZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH0sXG4gIH07XG5cbiAgaWYgKGEuZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVscztcbiAgfVxuXG4gIGxldCBhbmltYXRlSW5zdGFuY2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGFuaW1hdGVJbnN0YW5jZSA9IGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICB9IGVsc2UgYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG5vVHJpZ2dlciA9ICgncmVzaXplIHNjcm9sbCcpLnNwbGl0KCcgJyk7XG5mdW5jdGlvbiBldmVudFNob3J0Y3V0KG5hbWUsIC4uLmFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKG5vVHJpZ2dlci5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICQodGhpc1tpXSkudHJpZ2dlcihuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gdGhpcy5vbihuYW1lLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gY2xpY2soLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdjbGljaycsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gYmx1ciguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2JsdXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGZvY3VzKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnZm9jdXMnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGZvY3VzaW4oLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdmb2N1c2luJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBmb2N1c291dCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2ZvY3Vzb3V0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBrZXl1cCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2tleXVwJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBrZXlkb3duKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgna2V5ZG93bicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24ga2V5cHJlc3MoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdrZXlwcmVzcycsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc3VibWl0KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnc3VibWl0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBjaGFuZ2UoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdjaGFuZ2UnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlZG93biguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlZG93bicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2Vtb3ZlKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2Vtb3ZlJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZXVwKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2V1cCcsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2VlbnRlciguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlZW50ZXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlbGVhdmUoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZWxlYXZlJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZW91dCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlb3V0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZW92ZXIoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZW92ZXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHRvdWNoc3RhcnQoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCd0b3VjaHN0YXJ0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiB0b3VjaGVuZCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3RvdWNoZW5kJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiB0b3VjaG1vdmUoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCd0b3VjaG1vdmUnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHJlc2l6ZSguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3Jlc2l6ZScsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc2Nyb2xsKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnc2Nyb2xsJywgLi4uYXJncyk7XG59XG5cbmV4cG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCBwcm9wLCBkYXRhLCByZW1vdmVEYXRhLCBkYXRhc2V0LCB2YWwsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgb24sIG9mZiwgb25jZSwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kLCB3aWR0aCwgb3V0ZXJXaWR0aCwgaGVpZ2h0LCBvdXRlckhlaWdodCwgb2Zmc2V0LCBoaWRlLCBzaG93LCBzdHlsZXMsIGNzcywgdG9BcnJheSwgZWFjaCwgZm9yRWFjaCwgZmlsdGVyLCBtYXAsIGh0bWwsIHRleHQsIGlzLCBpbmRleE9mLCBpbmRleCwgZXEsIGFwcGVuZCwgYXBwZW5kVG8sIHByZXBlbmQsIHByZXBlbmRUbywgaW5zZXJ0QmVmb3JlLCBpbnNlcnRBZnRlciwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgc2libGluZ3MsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIHJlbW92ZSwgZGV0YWNoLCBhZGQsIGVtcHR5LCBzY3JvbGxUbywgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0LCBhbmltYXRlLCBzdG9wLCBjbGljaywgYmx1ciwgZm9jdXMsIGZvY3VzaW4sIGZvY3Vzb3V0LCBrZXl1cCwga2V5ZG93biwga2V5cHJlc3MsIHN1Ym1pdCwgY2hhbmdlLCBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2VvdXQsIG1vdXNlb3ZlciwgdG91Y2hzdGFydCwgdG91Y2hlbmQsIHRvdWNobW92ZSwgcmVzaXplLCBzY3JvbGwgfTtcbiIsIi8qKlxuICogU3dpcGVyIDUuNC4yXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cDovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjAgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogSnVuZSAzLCAyMDIwXG4gKi9cblxuaW1wb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIGRhdGEsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiBhcyB0cmFuc2l0aW9uJDEsIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQgYXMgdHJhbnNpdGlvbkVuZCQxLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwgb2Zmc2V0LCBjc3MsIGVhY2gsIGh0bWwsIHRleHQsIGlzLCBpbmRleCwgZXEsIGFwcGVuZCwgcHJlcGVuZCwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgZmlsdGVyLCByZW1vdmUsIGFkZCwgc3R5bGVzIH0gZnJvbSAnZG9tNy9kaXN0L2RvbTcubW9kdWxhcic7XG5pbXBvcnQgeyB3aW5kb3csIGRvY3VtZW50IGFzIGRvY3VtZW50JDEgfSBmcm9tICdzc3Itd2luZG93JztcblxuY29uc3QgTWV0aG9kcyA9IHtcbiAgYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3MsXG4gIGF0dHIsXG4gIHJlbW92ZUF0dHIsXG4gIGRhdGEsXG4gIHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiQxLFxuICBvbixcbiAgb2ZmLFxuICB0cmlnZ2VyLFxuICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kJDEsXG4gIG91dGVyV2lkdGgsXG4gIG91dGVySGVpZ2h0LFxuICBvZmZzZXQsXG4gIGNzcyxcbiAgZWFjaCxcbiAgaHRtbCxcbiAgdGV4dCxcbiAgaXMsXG4gIGluZGV4LFxuICBlcSxcbiAgYXBwZW5kLFxuICBwcmVwZW5kLFxuICBuZXh0LFxuICBuZXh0QWxsLFxuICBwcmV2LFxuICBwcmV2QWxsLFxuICBwYXJlbnQsXG4gIHBhcmVudHMsXG4gIGNsb3Nlc3QsXG4gIGZpbmQsXG4gIGNoaWxkcmVuLFxuICBmaWx0ZXIsXG4gIHJlbW92ZSxcbiAgYWRkLFxuICBzdHlsZXMsXG59O1xuXG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICQuZm5bbWV0aG9kTmFtZV0gPSAkLmZuW21ldGhvZE5hbWVdIHx8IE1ldGhvZHNbbWV0aG9kTmFtZV07XG59KTtcblxuY29uc3QgVXRpbHMgPSB7XG4gIGRlbGV0ZVByb3BzKG9iaikge1xuICAgIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSA9IDApIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xuICB9LFxuICBub3coKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH0sXG4gIGdldFRyYW5zbGF0ZShlbCwgYXhpcyA9ICd4Jykge1xuICAgIGxldCBtYXRyaXg7XG4gICAgbGV0IGN1clRyYW5zZm9ybTtcbiAgICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuXG4gICAgY29uc3QgY3VyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoKGEpID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgICB9XG4gICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgICB9XG4gICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xuICB9LFxuICBwYXJzZVVybFF1ZXJ5KHVybCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0ge307XG4gICAgbGV0IHVybFRvUGFyc2UgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IGk7XG4gICAgbGV0IHBhcmFtcztcbiAgICBsZXQgcGFyYW07XG4gICAgbGV0IGxlbmd0aDtcbiAgICBpZiAodHlwZW9mIHVybFRvUGFyc2UgPT09ICdzdHJpbmcnICYmIHVybFRvUGFyc2UubGVuZ3RoKSB7XG4gICAgICB1cmxUb1BhcnNlID0gdXJsVG9QYXJzZS5pbmRleE9mKCc/JykgPiAtMSA/IHVybFRvUGFyc2UucmVwbGFjZSgvXFxTKlxcPy8sICcnKSA6ICcnO1xuICAgICAgcGFyYW1zID0gdXJsVG9QYXJzZS5zcGxpdCgnJicpLmZpbHRlcigocGFyYW1zUGFydCkgPT4gcGFyYW1zUGFydCAhPT0gJycpO1xuICAgICAgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHBhcmFtID0gcGFyYW1zW2ldLnJlcGxhY2UoLyNcXFMrL2csICcnKS5zcGxpdCgnPScpO1xuICAgICAgICBxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMF0pXSA9IHR5cGVvZiBwYXJhbVsxXSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMV0pIHx8ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnk7XG4gIH0sXG4gIGlzT2JqZWN0KG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBvLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gIH0sXG4gIGV4dGVuZCguLi5hcmdzKSB7XG4gICAgY29uc3QgdG8gPSBPYmplY3QoYXJnc1swXSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBuZXh0U291cmNlID0gYXJnc1tpXTtcbiAgICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgIFV0aWxzLmV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9LFxufTtcblxuY29uc3QgU3VwcG9ydCA9IChmdW5jdGlvbiBTdXBwb3J0KCkge1xuICByZXR1cm4ge1xuICAgIHRvdWNoOiAhISgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQkMSBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSksXG5cbiAgICBwb2ludGVyRXZlbnRzOiAhIXdpbmRvdy5Qb2ludGVyRXZlbnQgJiYgKCdtYXhUb3VjaFBvaW50cycgaW4gd2luZG93Lm5hdmlnYXRvcikgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+PSAwLFxuXG4gICAgb2JzZXJ2ZXI6IChmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgcmV0dXJuICgnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93IHx8ICdXZWJraXRNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpO1xuICAgIH0oKSksXG5cbiAgICBwYXNzaXZlTGlzdGVuZXI6IChmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgIGxldCBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE5vIHN1cHBvcnRcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfSgpKSxcblxuICAgIGdlc3R1cmVzOiAoZnVuY3Rpb24gY2hlY2tHZXN0dXJlcygpIHtcbiAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbmRvdztcbiAgICB9KCkpLFxuICB9O1xufSgpKTtcblxuY2xhc3MgU3dpcGVyQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYucGFyYW1zID0gcGFyYW1zO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgc2VsZi5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcblxuICAgIGlmIChzZWxmLnBhcmFtcyAmJiBzZWxmLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc2VsZi5wYXJhbXMub24pLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICBzZWxmLm9uKGV2ZW50TmFtZSwgc2VsZi5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLmY3cHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmY3cHJveHk7XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cbiAgICBvbmNlSGFuZGxlci5mN3Byb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH1cblxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0ubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCAoZXZlbnRIYW5kbGVyLmY3cHJveHkgJiYgZXZlbnRIYW5kbGVyLmY3cHJveHkgPT09IGhhbmRsZXIpKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgZW1pdCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBoYW5kbGVycy5wdXNoKGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgdXNlTW9kdWxlc1BhcmFtcyhpbnN0YW5jZVBhcmFtcykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgLy8gRXh0ZW5kIHBhcmFtc1xuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKGluc3RhbmNlUGFyYW1zLCBtb2R1bGUucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVzZU1vZHVsZXMobW9kdWxlc1BhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goKG1vZHVsZU5hbWUpID0+IHtcbiAgICAgIGNvbnN0IG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9O1xuICAgICAgLy8gRXh0ZW5kIGluc3RhbmNlIG1ldGhvZHMgYW5kIHByb3BzXG4gICAgICBpZiAobW9kdWxlLmluc3RhbmNlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5pbnN0YW5jZSkuZm9yRWFjaCgobW9kdWxlUHJvcE5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBtb2R1bGVQcm9wID0gbW9kdWxlLmluc3RhbmNlW21vZHVsZVByb3BOYW1lXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3AuYmluZChpbnN0YW5jZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKChtb2R1bGVFdmVudE5hbWUpID0+IHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzZXQgY29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmICghQ2xhc3MudXNlKSByZXR1cm47XG4gICAgQ2xhc3MudXNlKGNvbXBvbmVudHMpO1xuICB9XG5cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy5wcm90b3R5cGUubW9kdWxlcykgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICBjb25zdCBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKGAke09iamVjdC5rZXlzKENsYXNzLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGh9XyR7VXRpbHMubm93KCl9YCk7XG4gICAgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG4gICAgLy8gUHJvdG90eXBlXG4gICAgaWYgKG1vZHVsZS5wcm90bykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnByb3RvKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3MucHJvdG90eXBlW2tleV0gPSBtb2R1bGUucHJvdG9ba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDbGFzc1xuICAgIGlmIChtb2R1bGUuc3RhdGljKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGUuc3RhdGljKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3Nba2V5XSA9IG1vZHVsZS5zdGF0aWNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDYWxsYmFja1xuICAgIGlmIChtb2R1bGUuaW5zdGFsbCkge1xuICAgICAgbW9kdWxlLmluc3RhbGwuYXBwbHkoQ2xhc3MsIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcztcbiAgfVxuXG4gIHN0YXRpYyB1c2UobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goKG0pID0+IENsYXNzLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIENsYXNzO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3MuaW5zdGFsbE1vZHVsZShtb2R1bGUsIC4uLnBhcmFtcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCB3aWR0aDtcbiAgbGV0IGhlaWdodDtcbiAgY29uc3QgJGVsID0gc3dpcGVyLiRlbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLCAxMCk7XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcyAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgY29uc3Qge1xuICAgICR3cmFwcGVyRWwsIHNpemU6IHN3aXBlclNpemUsIHJ0bFRyYW5zbGF0ZTogcnRsLCB3cm9uZ1JUTCxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuXG4gIGZ1bmN0aW9uIHNsaWRlc0Zvck1hcmdpbihzbGlkZUluZGV4KSB7XG4gICAgaWYgKCFwYXJhbXMuY3NzTW9kZSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gIH1cblxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IChwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCkgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIGlmIChydGwpIHNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiAnJywgbWFyZ2luVG9wOiAnJyB9KTtcbiAgZWxzZSBzbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6ICcnLCBtYXJnaW5Cb3R0b206ICcnIH0pO1xuXG4gIGxldCBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGMgc2xpZGVzXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXMuZXEoaSk7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAvLyBTZXQgc2xpZGVzIG9yZGVyXG4gICAgICBsZXQgbmV3U2xpZGVPcmRlckluZGV4O1xuICAgICAgbGV0IGNvbHVtbjtcbiAgICAgIGxldCByb3c7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSk7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgICBjb25zdCBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDBcbiAgICAgICAgICA/IHBhcmFtcy5zbGlkZXNQZXJHcm91cFxuICAgICAgICAgIDogTWF0aC5taW4oTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBncm91cEluZGV4ICogc2xpZGVzUGVyQ29sdW1uICogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSAvIHNsaWRlc1BlckNvbHVtbiksIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleEluR3JvdXAgLyBjb2x1bW5zSW5Hcm91cCk7XG4gICAgICAgIGNvbHVtbiA9IChzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwKSArIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgKChyb3cgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzKSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgIHNsaWRlXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICctbW96LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICBvcmRlcjogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgcm93ID0gaSAtIChjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgKGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4gLSAxKSkge1xuICAgICAgICAgIHJvdyArPSAxO1xuICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICAgICAgY29sdW1uICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgICBjb2x1bW4gPSBpIC0gKHJvdyAqIHNsaWRlc1BlclJvdyk7XG4gICAgICB9XG4gICAgICBzbGlkZS5jc3MoXG4gICAgICAgIGBtYXJnaW4tJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0J31gLFxuICAgICAgICAocm93ICE9PSAwICYmIHBhcmFtcy5zcGFjZUJldHdlZW4pICYmIChgJHtwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChzbGlkZS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGNvbnN0IHNsaWRlU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2xpZGVbMF0sIG51bGwpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICA/IHNsaWRlLm91dGVyV2lkdGgodHJ1ZSlcbiAgICAgICAgICA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSk7XG4gICAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKTtcbiAgICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgICAgICAgIGNvbnN0IG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b20gKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSkgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG5cbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS53aWR0aCA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLmhlaWdodCA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyAoc2xpZGVTaXplIC8gMikgKyAocHJldlNsaWRlU2l6ZSAvIDIpICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gKHN3aXBlclNpemUgLyAyKSAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXgpICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcblxuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG5cbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgbGV0IG5ld1NsaWRlc0dyaWQ7XG5cbiAgaWYgKFxuICAgIHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICAkd3JhcHBlckVsLmNzcyh7IHdpZHRoOiBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgfVxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgZWxzZSAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgZWxzZSAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKHJ0bCkgc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7IG1hcmdpbkxlZnQ6IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgICBlbHNlIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3MoeyBtYXJnaW5SaWdodDogYCR7c3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgICB9IGVsc2Ugc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7IG1hcmdpbkJvdHRvbTogYCR7c3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKChzbGlkZVNpemVWYWx1ZSkgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgc25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoKHNuYXApID0+IHtcbiAgICAgIGlmIChzbmFwIDwgMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKChzbGlkZVNpemVWYWx1ZSkgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICBpZiAoYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgfSk7XG5cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodCAoc3BlZWQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5lYWNoKChpbmRleCwgc2xpZGUpID0+IHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzICh0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHsgc2xpZGVzLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuXG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuXG4gIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVmlzaWJsZSBTbGlkZXNcbiAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG5cbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKFxuICAgICAgKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldFxuICAgICkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkpIHtcbiAgICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3QgaXNWaXNpYmxlID0gKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZSk7XG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzICh0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdHJhbnNsYXRlID0gKHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIChzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllcikpIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7IHByb2dyZXNzLCBpc0JlZ2lubmluZywgaXNFbmQgfSA9IHN3aXBlcjtcbiAgY29uc3Qgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gKHRyYW5zbGF0ZXNEaWZmKTtcbiAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICB9XG4gIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgfSk7XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICgod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZykgfHwgKHdhc0VuZCAmJiAhaXNFbmQpKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsIHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXgsIHJlYWxJbmRleCxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZVByZXZDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzfWApO1xuXG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5lcShhY3RpdmVJbmRleCk7XG4gIH1cblxuICAvLyBBY3RpdmUgY2xhc3Nlc1xuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgfVxuICAvLyBOZXh0IFNsaWRlXG4gIGxldCBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICBpZiAocGFyYW1zLmxvb3AgJiYgbmV4dFNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIG5leHRTbGlkZSA9IHNsaWRlcy5lcSgwKTtcbiAgICBuZXh0U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgfVxuICAvLyBQcmV2IFNsaWRlXG4gIGxldCBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICBpZiAocGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgcHJldlNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9XG4gICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3ByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXggKG5ld0FjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLCBzbmFwR3JpZCwgcGFyYW1zLCBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCwgcmVhbEluZGV4OiBwcmV2aW91c1JlYWxJbmRleCwgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleCxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBza2lwID0gTWF0aC5taW4ocGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgYWN0aXZlSW5kZXgpO1xuICAgIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChhY3RpdmVJbmRleCAtIHNraXApIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgfVxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEdldCByZWFsIGluZGV4XG4gIGNvbnN0IHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcblxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgc25hcEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICB9KTtcbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZSAoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCBzbGlkZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApWzBdO1xuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoJChzbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn1cblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZSxcbn07XG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZSAoYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneScpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7XG4gICAgcGFyYW1zLCBydGxUcmFuc2xhdGU6IHJ0bCwgdHJhbnNsYXRlLCAkd3JhcHBlckVsLFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cblxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IFV0aWxzLmdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuXG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZSAodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLCBwYXJhbXMsICR3cmFwcGVyRWwsIHdyYXBwZXJFbCwgcHJvZ3Jlc3MsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgKTtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUgKCkge1xuICByZXR1cm4gKC10aGlzLnNuYXBHcmlkWzBdKTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlICgpIHtcbiAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8gKHRyYW5zbGF0ZSA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO1xuICBlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7XG4gIGVsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciB0cmFuc2xhdGUgPSB7XG4gIGdldFRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG8sXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uIChkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydCAocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHBhcmFtcywgcHJldmlvdXNJbmRleCB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO1xuICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO1xuICAgIGVsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCAocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHByZXZpb3VzSW5kZXgsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztcbiAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztcbiAgICBlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydCxcbiAgdHJhbnNpdGlvbkVuZCxcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8gKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcblxuICBjb25zdCB7XG4gICAgcGFyYW1zLCBzbmFwR3JpZCwgc2xpZGVzR3JpZCwgcHJldmlvdXNJbmRleCwgYWN0aXZlSW5kZXgsIHJ0bFRyYW5zbGF0ZTogcnRsLCB3cmFwcGVyRWwsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG5cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKSA+PSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztcbiAgZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7XG4gIGVsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuXG4gIC8vIFVwZGF0ZSBJbmRleFxuICBpZiAoKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB8fCAoIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgbGV0IHQgPSAtdHJhbnNsYXRlO1xuICAgIGlmIChydGwpIHtcbiAgICAgIHQgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB0O1xuICAgIH1cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AgKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0IChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgYW5pbWF0aW5nIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVByZXYgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsIGFuaW1hdGluZywgc25hcEdyaWQsIHNsaWRlc0dyaWQsIHJ0bFRyYW5zbGF0ZSxcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCgodmFsKSA9PiBub3JtYWxpemUodmFsKSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbGlkZXNHcmlkID0gc2xpZGVzR3JpZC5tYXAoKHZhbCkgPT4gbm9ybWFsaXplKHZhbCkpO1xuXG4gIGNvbnN0IGN1cnJlbnRTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSldO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXApID0+IHtcbiAgICAgIGlmICghcHJldlNuYXAgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSBwcmV2U25hcCA9IHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgbGV0IHByZXZJbmRleDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0IChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3QgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsLCB0aHJlc2hvbGQgPSAwLjUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAoKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwKSA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAoKHRyYW5zbGF0ZSAtIHByZXZTbmFwKSA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG4gIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG5cbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gKHNsaWRlc1BlclZpZXcgLyAyKSlcbiAgICAgICAgfHwgKHNsaWRlVG9JbmRleCA+IChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpICsgKHNsaWRlc1BlclZpZXcgLyAyKSlcbiAgICAgICkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl06bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKVxuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIC5pbmRleCgpO1xuXG4gICAgICAgIFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYClcbiAgICAgICAgLmVxKDApXG4gICAgICAgIC5pbmRleCgpO1xuXG4gICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGUsXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBwYXJhbXMsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfWApLnJlbW92ZSgpO1xuXG4gIGxldCBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICBjb25zdCBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIChzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGJsYW5rTm9kZSA9ICQoZG9jdW1lbnQkMS5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoYCR7cGFyYW1zLnNsaWRlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKTtcbiAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcblxuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgY29uc3QgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXMgPSBbXTtcbiAgc2xpZGVzLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlID0gJChlbCk7XG4gICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykgYXBwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxuICBmb3IgKGxldCBpID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZCgkKHByZXBlbmRTbGlkZXNbaV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvb3BGaXggKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG5cbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LCBzbGlkZXMsIGxvb3BlZFNsaWRlcywgYWxsb3dTbGlkZVByZXYsIGFsbG93U2xpZGVOZXh0LCBzbmFwR3JpZCwgcnRsVHJhbnNsYXRlOiBydGwsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBuZXdJbmRleDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcblxuICBjb25zdCBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTtcbiAgY29uc3QgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG5cbiAgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBuZXdJbmRleCA9IChzbGlkZXMubGVuZ3RoIC0gKGxvb3BlZFNsaWRlcyAqIDMpKSArIGFjdGl2ZUluZGV4O1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICBjb25zdCBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVJbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgLy8gRml4IEZvciBQb3NpdGl2ZSBPdmVyc2xpZGluZ1xuICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95ICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkd3JhcHBlckVsLCBwYXJhbXMsIHNsaWRlcyB9ID0gc3dpcGVyO1xuICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30sLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59XG5cbnZhciBsb29wID0ge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveSxcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IgKG1vdmluZykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoU3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvciAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChTdXBwb3J0LnRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yLFxufTtcblxuZnVuY3Rpb24gYXBwZW5kU2xpZGUgKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7ICR3cmFwcGVyRWwsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGVuZFNsaWRlIChzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBwYXJhbXMsICR3cmFwcGVyRWwsIGFjdGl2ZUluZGV4IH0gPSBzd2lwZXI7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBhZGRTbGlkZSAoaW5kZXgsIHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7ICR3cmFwcGVyRWwsIHBhcmFtcywgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICB9XG4gIGNvbnN0IGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcblxuICBjb25zdCBzbGlkZXNCdWZmZXIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICBjb25zdCBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNCdWZmZXJbaV0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVTbGlkZSAoc2xpZGVzSW5kZXhlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcblxuICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGxldCBpbmRleFRvUmVtb3ZlO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9IGVsc2Uge1xuICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59XG5cbnZhciBtYW5pcHVsYXRpb24gPSB7XG4gIGFwcGVuZFNsaWRlLFxuICBwcmVwZW5kU2xpZGUsXG4gIGFkZFNsaWRlLFxuICByZW1vdmVTbGlkZSxcbiAgcmVtb3ZlQWxsU2xpZGVzLFxufTtcblxuY29uc3QgRGV2aWNlID0gKGZ1bmN0aW9uIERldmljZSgpIHtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlLFxuICAgIGFuZHJvaWRDaHJvbWU6IGZhbHNlLFxuICAgIGRlc2t0b3A6IGZhbHNlLFxuICAgIGlwaG9uZTogZmFsc2UsXG4gICAgaXBvZDogZmFsc2UsXG4gICAgaXBhZDogZmFsc2UsXG4gICAgZWRnZTogZmFsc2UsXG4gICAgaWU6IGZhbHNlLFxuICAgIGZpcmVmb3g6IGZhbHNlLFxuICAgIG1hY29zOiBmYWxzZSxcbiAgICB3aW5kb3dzOiBmYWxzZSxcbiAgICBjb3Jkb3ZhOiAhISh3aW5kb3cuY29yZG92YSB8fCB3aW5kb3cucGhvbmVnYXApLFxuICAgIHBob25lZ2FwOiAhISh3aW5kb3cuY29yZG92YSB8fCB3aW5kb3cucGhvbmVnYXApLFxuICAgIGVsZWN0cm9uOiBmYWxzZSxcbiAgfTtcblxuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuXG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGllID0gdWEuaW5kZXhPZignTVNJRSAnKSA+PSAwIHx8IHVhLmluZGV4T2YoJ1RyaWRlbnQvJykgPj0gMDtcbiAgY29uc3QgZWRnZSA9IHVhLmluZGV4T2YoJ0VkZ2UvJykgPj0gMDtcbiAgY29uc3QgZmlyZWZveCA9IHVhLmluZGV4T2YoJ0dlY2tvLycpID49IDAgJiYgdWEuaW5kZXhPZignRmlyZWZveC8nKSA+PSAwO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGNvbnN0IGVsZWN0cm9uID0gdWEudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdlbGVjdHJvbicpID49IDA7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gIC8vIGlQYWRPcyAxMyBmaXhcbiAgaWYgKCFpcGFkXG4gICAgJiYgbWFjb3NcbiAgICAmJiBTdXBwb3J0LnRvdWNoXG4gICAgJiYgKFxuICAgICAgKHNjcmVlbldpZHRoID09PSAxMDI0ICYmIHNjcmVlbkhlaWdodCA9PT0gMTM2NikgLy8gUHJvIDEyLjlcbiAgICAgIHx8IChzY3JlZW5XaWR0aCA9PT0gODM0ICYmIHNjcmVlbkhlaWdodCA9PT0gMTE5NCkgLy8gUHJvIDExXG4gICAgICB8fCAoc2NyZWVuV2lkdGggPT09IDgzNCAmJiBzY3JlZW5IZWlnaHQgPT09IDExMTIpIC8vIFBybyAxMC41XG4gICAgICB8fCAoc2NyZWVuV2lkdGggPT09IDc2OCAmJiBzY3JlZW5IZWlnaHQgPT09IDEwMjQpIC8vIG90aGVyXG4gICAgKVxuICApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICBkZXZpY2UuaWUgPSBpZTtcbiAgZGV2aWNlLmVkZ2UgPSBlZGdlO1xuICBkZXZpY2UuZmlyZWZveCA9IGZpcmVmb3g7XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2Uub3NWZXJzaW9uID0gYW5kcm9pZFsyXTtcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gICAgZGV2aWNlLmFuZHJvaWRDaHJvbWUgPSB1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2Nocm9tZScpID49IDA7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuICAvLyBpT1NcbiAgaWYgKGlwaG9uZSAmJiAhaXBvZCkge1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcGhvbmVbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgIGRldmljZS5pcGhvbmUgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwYWRbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgIGRldmljZS5pcGFkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBvZCkge1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcG9kWzNdID8gaXBvZFszXS5yZXBsYWNlKC9fL2csICcuJykgOiBudWxsO1xuICAgIGRldmljZS5pcG9kID0gdHJ1ZTtcbiAgfVxuICAvLyBpT1MgOCsgY2hhbmdlZCBVQVxuICBpZiAoZGV2aWNlLmlvcyAmJiBkZXZpY2Uub3NWZXJzaW9uICYmIHVhLmluZGV4T2YoJ1ZlcnNpb24vJykgPj0gMCkge1xuICAgIGlmIChkZXZpY2Uub3NWZXJzaW9uLnNwbGl0KCcuJylbMF0gPT09ICcxMCcpIHtcbiAgICAgIGRldmljZS5vc1ZlcnNpb24gPSB1YS50b0xvd2VyQ2FzZSgpLnNwbGl0KCd2ZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF07XG4gICAgfVxuICB9XG5cbiAgLy8gV2Vidmlld1xuICBkZXZpY2Uud2ViVmlldyA9ICEhKChpcGhvbmUgfHwgaXBhZCB8fCBpcG9kKSAmJiAodWEubWF0Y2goLy4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaSkgfHwgd2luZG93Lm5hdmlnYXRvci5zdGFuZGFsb25lKSlcbiAgICB8fCAod2luZG93Lm1hdGNoTWVkaWEgJiYgd2luZG93Lm1hdGNoTWVkaWEoJyhkaXNwbGF5LW1vZGU6IHN0YW5kYWxvbmUpJykubWF0Y2hlcyk7XG4gIGRldmljZS53ZWJ2aWV3ID0gZGV2aWNlLndlYlZpZXc7XG4gIGRldmljZS5zdGFuZGFsb25lID0gZGV2aWNlLndlYlZpZXc7XG5cbiAgLy8gRGVza3RvcFxuICBkZXZpY2UuZGVza3RvcCA9ICEoZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCkgfHwgZWxlY3Ryb247XG4gIGlmIChkZXZpY2UuZGVza3RvcCkge1xuICAgIGRldmljZS5lbGVjdHJvbiA9IGVsZWN0cm9uO1xuICAgIGRldmljZS5tYWNvcyA9IG1hY29zO1xuICAgIGRldmljZS53aW5kb3dzID0gd2luZG93cztcbiAgICBpZiAoZGV2aWNlLm1hY29zKSB7XG4gICAgICBkZXZpY2Uub3MgPSAnbWFjb3MnO1xuICAgIH1cbiAgICBpZiAoZGV2aWNlLndpbmRvd3MpIHtcbiAgICAgIGRldmljZS5vcyA9ICd3aW5kb3dzJztcbiAgICB9XG4gIH1cblxuICAvLyBQaXhlbCBSYXRpb1xuICBkZXZpY2UucGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufSgpKTtcblxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0IChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoZXMgfSA9IHN3aXBlcjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0ICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuXG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghJHRhcmdldEVsLmNsb3Nlc3Qoc3dpcGVyLndyYXBwZXJFbCkubGVuZ3RoKSByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJHRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gKVswXSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoXG4gICAgZWRnZVN3aXBlRGV0ZWN0aW9uXG4gICAgJiYgKChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkKVxuICAgIHx8IChzdGFydFggPj0gd2luZG93LnNjcmVlbi53aWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIFV0aWxzLmV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICB9KTtcblxuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICBpZiAoJHRhcmdldEVsLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSkgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICBpZiAoXG4gICAgICBkb2N1bWVudCQxLmFjdGl2ZUVsZW1lbnRcbiAgICAgICYmICQoZG9jdW1lbnQkMS5hY3RpdmVFbGVtZW50KS5pcyhkYXRhLmZvcm1FbGVtZW50cylcbiAgICAgICYmIGRvY3VtZW50JDEuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdXG4gICAgKSB7XG4gICAgICBkb2N1bWVudCQxLmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gICAgaWYgKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZSAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZS50eXBlICE9PSAndG91Y2htb3ZlJykgcmV0dXJuO1xuICBjb25zdCB0YXJnZXRUb3VjaCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzICYmIChlLnRhcmdldFRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVkgOiBlLnBhZ2VZO1xuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICAvLyBpc01vdmVkID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgVXRpbHMuZXh0ZW5kKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVksXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgLy8gVmVydGljYWxcbiAgICAgIGlmIChcbiAgICAgICAgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpXG4gICAgICAgIHx8IChwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKVxuICAgICAgKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKVxuICAgICAgfHwgKHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBkb2N1bWVudCQxLmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50JDEuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcblxuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcblxuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoKGRpZmZYICoqIDIpICsgKGRpZmZZICoqIDIpKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG5cbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmICgoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZKSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoKGRpZmZYICogZGlmZlgpICsgKGRpZmZZICogZGlmZlkpID49IDI1KSB7XG4gICAgICAgIHRvdWNoQW5nbGUgPSAoTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODApIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6ICg5MCAtIHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuXG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcblxuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG5cbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoKGRpZmYgPiAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSkgKyAoKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgMSkgLSAoKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW8pO1xuICB9XG5cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuXG4gIC8vIFRocmVzaG9sZFxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgfSk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZCAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcywgdG91Y2hlcywgcnRsVHJhbnNsYXRlOiBydGwsICR3cmFwcGVyRWwsIHNsaWRlc0dyaWQsIHNuYXBHcmlkLFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IFV0aWxzLm5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiAodG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lKSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEubGFzdENsaWNrVGltZSA9IFV0aWxzLm5vdygpO1xuICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcblxuICBsZXQgY3VycmVudFBvcztcbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIGNvbnN0IHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCAoVXRpbHMubm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUpID4gMzAwKSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG5cbiAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgbGV0IG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuXG4gICAgICBsZXQgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuXG4gICAgICBsZXQgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgIGxldCBhZnRlckJvdW5jZVBvc2l0aW9uO1xuICAgICAgY29uc3QgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgIGxldCBuZWVkc0xvb3BGaXg7XG4gICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uICsgc3dpcGVyLm1heFRyYW5zbGF0ZSgpIDwgLWJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgbGV0IG5leHRTbGlkZTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgc3dpcGVyLm9uY2UoJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBGaXggZHVyYXRpb25cbiAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIElmIGZyZWVNb2RlU3RpY2t5IGlzIGFjdGl2ZSBhbmQgdGhlIHVzZXIgZW5kcyBhIHN3aXBlIHdpdGggYSBzbG93LXZlbG9jaXR5XG4gICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuXG4gICAgICAgICAgLy8gSXQncyBlYXN5IHRvIHNlZSB0aGlzIHdoZW4gc2ltdWxhdGluZyB0b3VjaCB3aXRoIG1vdXNlIGV2ZW50cy4gVG8gZml4IHRoaXMsXG4gICAgICAgICAgLy8gbGltaXQgc2luZ2xlLXNsaWRlIHN3aXBlcyB0byB0aGUgZGVmYXVsdCBzbGlkZSBkdXJhdGlvbi4gVGhpcyBhbHNvIGhhcyB0aGVcbiAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZVxuICAgICAgICAgIC8vIGxpZnRpbmcgZmluZ2VyIG9yIG1vdXNlIHZzLiBtb3Zpbmcgc2xvd2x5IGJlZm9yZSBsaWZ0aW5nIHRoZSBmaW5nZXIvbW91c2UuXG4gICAgICAgICAgLy8gRm9yIGZhc3RlciBzd2lwZXMsIGFsc28gYXBwbHkgbGltaXRzIChhbGJlaXQgaGlnaGVyIG9uZXMpLlxuICAgICAgICAgIGNvbnN0IG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW92ZURpc3RhbmNlIDwgMiAqIGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAyLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAoaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IChpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSAoc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIGVsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAoMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHsgcGFyYW1zLCBlbCB9ID0gc3dpcGVyO1xuXG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7IGFsbG93U2xpZGVOZXh0LCBhbGxvd1NsaWRlUHJldiwgc25hcEdyaWQgfSA9IHN3aXBlcjtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuXG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyB3cmFwcGVyRWwsIHJ0bFRyYW5zbGF0ZSB9ID0gc3dpcGVyO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9ICgod3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoKSAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuXG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmxldCBkdW1teUV2ZW50QXR0YWNoZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcywgdG91Y2hFdmVudHMsIGVsLCB3cmFwcGVyRWwsXG4gIH0gPSBzd2lwZXI7XG5cbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgU3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50JDEuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50JDEuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlIH0gOiBjYXB0dXJlKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKCFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICAgICAgZG9jdW1lbnQkMS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZHVtbXlFdmVudExpc3RlbmVyKTtcbiAgICAgICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQkMS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQkMS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXIub24oKERldmljZS5pb3MgfHwgRGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnKSwgb25SZXNpemUsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5vbignb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsIHRvdWNoRXZlbnRzLCBlbCwgd3JhcHBlckVsLFxuICB9ID0gc3dpcGVyO1xuXG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGlmICghU3VwcG9ydC50b3VjaCAmJiBTdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQkMS5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQkMS5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoU3VwcG9ydC50b3VjaCkge1xuICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIURldmljZS5pb3MgJiYgIURldmljZS5hbmRyb2lkKSB8fCAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIVN1cHBvcnQudG91Y2ggJiYgRGV2aWNlLmlvcykpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50JDEucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50JDEucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIHN3aXBlci5vZmYoKERldmljZS5pb3MgfHwgRGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnKSwgb25SZXNpemUpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50cyxcbn07XG5cbmZ1bmN0aW9uIHNldEJyZWFrcG9pbnQgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsIGluaXRpYWxpemVkLCBsb29wZWRTbGlkZXMgPSAwLCBwYXJhbXMsICRlbCxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgKGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzKTtcblxuICBpZiAoYnJlYWtwb2ludCAmJiBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgIT09IGJyZWFrcG9pbnQpIHtcbiAgICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoYnJlYWtwb2ludE9ubHlQYXJhbXMpIHtcbiAgICAgIFsnc2xpZGVzUGVyVmlldycsICdzcGFjZUJldHdlZW4nLCAnc2xpZGVzUGVyR3JvdXAnLCAnc2xpZGVzUGVyR3JvdXBTa2lwJywgJ3NsaWRlc1BlckNvbHVtbiddLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtVmFsdWUgPSBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV07XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycgJiYgKHBhcmFtVmFsdWUgPT09ICdBVVRPJyB8fCBwYXJhbVZhbHVlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gJ2F1dG8nO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlSW50KHBhcmFtVmFsdWUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgICBjb25zdCB3YXNNdWx0aVJvdyA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuICAgIGNvbnN0IGlzTXVsdGlSb3cgPSBicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9bXVsdGlyb3cgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31tdWx0aXJvdy1jb2x1bW5gKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9bXVsdGlyb3dgKTtcbiAgICAgIGlmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31tdWx0aXJvdy1jb2x1bW5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaXJlY3Rpb25DaGFuZ2VkID0gYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gICAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgIH0pO1xuXG4gICAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcblxuICAgIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzKSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnQgKGJyZWFrcG9pbnRzKSB7XG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGhcbiAgaWYgKCFicmVha3BvaW50cykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcblxuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKChwb2ludCkgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IHdpbmRvdy5pbm5lckhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHsgdmFsdWUsIHBvaW50IH07XG4gICAgfVxuICAgIHJldHVybiB7IHZhbHVlOiBwb2ludCwgcG9pbnQgfTtcbiAgfSk7XG5cbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgeyBwb2ludCwgdmFsdWUgfSA9IHBvaW50c1tpXTtcbiAgICBpZiAodmFsdWUgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59XG5cbnZhciBicmVha3BvaW50cyA9IHsgc2V0QnJlYWtwb2ludCwgZ2V0QnJlYWtwb2ludCB9O1xuXG5mdW5jdGlvbiBhZGRDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsIHBhcmFtcywgcnRsLCAkZWwsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHN1ZmZpeGVzID0gW107XG5cbiAgc3VmZml4ZXMucHVzaCgnaW5pdGlhbGl6ZWQnKTtcbiAgc3VmZml4ZXMucHVzaChwYXJhbXMuZGlyZWN0aW9uKTtcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnZnJlZS1tb2RlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3VmZml4ZXMucHVzaCgnYXV0b2hlaWdodCcpO1xuICB9XG4gIGlmIChydGwpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdycpO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93LWNvbHVtbicpO1xuICAgIH1cbiAgfVxuICBpZiAoRGV2aWNlLmFuZHJvaWQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhbmRyb2lkJyk7XG4gIH1cbiAgaWYgKERldmljZS5pb3MpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdpb3MnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2Nzcy1tb2RlJyk7XG4gIH1cblxuICBzdWZmaXhlcy5mb3JFYWNoKChzdWZmaXgpID0+IHtcbiAgICBjbGFzc05hbWVzLnB1c2gocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBzdWZmaXgpO1xuICB9KTtcblxuICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkZWwsIGNsYXNzTmFtZXMgfSA9IHN3aXBlcjtcblxuICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xufVxuXG52YXIgY2xhc3NlcyA9IHsgYWRkQ2xhc3NlcywgcmVtb3ZlQ2xhc3NlcyB9O1xuXG5mdW5jdGlvbiBsb2FkSW1hZ2UgKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgbGV0IGltYWdlO1xuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuICBjb25zdCBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gIGlmICghaXNQaWN0dXJlICYmICghaW1hZ2VFbC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkpIHtcbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICB9XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgIG9uUmVhZHkoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVsb2FkSW1hZ2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShcbiAgICAgIGltYWdlRWwsXG4gICAgICBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxuICAgICAgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLFxuICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgIHRydWUsXG4gICAgICBvblJlYWR5XG4gICAgKTtcbiAgfVxufVxuXG52YXIgaW1hZ2VzID0ge1xuICBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXMsXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gIGNvbnN0IGxhc3RTbGlkZVBvc2l0aW9uID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggPiAwICYmIChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gKiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKSkgKyAoKHN3aXBlci5zbGlkZXNbMF0pLm9mZnNldFdpZHRoKSAqIHN3aXBlci5zbGlkZXMubGVuZ3RoKTtcblxuICBpZiAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgJiYgbGFzdFNsaWRlUG9zaXRpb24pIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBsYXN0U2xpZGVQb3NpdGlvbiA8PSBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcblxuICAvLyBldmVudHNcbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG5cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICB9XG59XG5cbnZhciBjaGVja092ZXJmbG93JDEgPSB7IGNoZWNrT3ZlcmZsb3cgfTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcblxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG5cbiAgLy8gRnJlZSBtb2RlXG4gIGZyZWVNb2RlOiBmYWxzZSxcbiAgZnJlZU1vZGVNb21lbnR1bTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gIGZyZWVNb2RlTWluaW11bVZlbG9jaXR5OiAwLjAyLFxuXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG5cbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLCAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcblxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgc2xpZGVzUGVyQ29sdW1uRmlsbDogJ2NvbHVtbicsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLCAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcblxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcblxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcblxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcblxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG5cbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJywgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG5cbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbn07XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzLFxuICBpbWFnZXMsXG59O1xuXG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbmNsYXNzIFN3aXBlciBleHRlbmRzIFN3aXBlckNsYXNzIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuXG4gICAgcGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKChwcm90b3R5cGVHcm91cCkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goKHByb3RvTWV0aG9kKSA9PiB7XG4gICAgICAgIGlmICghU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0pIHtcbiAgICAgICAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUucGFyYW1zKVswXTtcbiAgICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlLnBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHJldHVybjtcbiAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7IGVuYWJsZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0J1xuICAgICAgICAgICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgc3dpcGVyLnVzZU1vZHVsZXNQYXJhbXMoc3dpcGVyUGFyYW1zKTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICBzd2lwZXIucGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgLy8gU2F2ZSBEb20gbGliXG4gICAgc3dpcGVyLiQgPSAkO1xuXG4gICAgLy8gRmluZCBlbFxuICAgIGNvbnN0ICRlbCA9ICQoc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgJGVsLmVhY2goKGluZGV4LCBjb250YWluZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcywgeyBlbDogY29udGFpbmVyRWwgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgJGVsLmRhdGEoJ3N3aXBlcicsIHN3aXBlcik7XG5cbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgJHdyYXBwZXJFbDtcbiAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICR3cmFwcGVyRWwgPSAkKGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3N9YCkpO1xuICAgICAgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4gPSAob3B0aW9ucykgPT4gJGVsLmNoaWxkcmVuKG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsID0gJGVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzc31gKTtcbiAgICB9XG4gICAgLy8gRXh0ZW5kIFN3aXBlclxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcblxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG5cbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiAkKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnLFxuXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcblxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcblxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG5cbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHM6IChmdW5jdGlvbiB0b3VjaEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XG4gICAgICAgIGxldCBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcbiAgICAgICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgIHN0YXJ0OiB0b3VjaFswXSxcbiAgICAgICAgICBtb3ZlOiB0b3VjaFsxXSxcbiAgICAgICAgICBlbmQ6IHRvdWNoWzJdLFxuICAgICAgICAgIGNhbmNlbDogdG91Y2hbM10sXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB9KCkpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNUb3VjaEV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICB9LFxuXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG5cbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDAsXG4gICAgICB9LFxuXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDAsXG5cbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLCBzbGlkZXMsIHNsaWRlc0dyaWQsIHNpemU6IHN3aXBlclNpemUsIGFjdGl2ZUluZGV4LFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbGV0IHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgc25hcEdyaWQsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmICgobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uKSB8fCAobmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSkge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKVxuICAgICAgLmFkZENsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcblxuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuXG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKChzbGlkZUluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgfVxuXG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UgPSB0cnVlLCBjbGVhblN0eWxlcyA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcywgJGVsLCAkd3JhcHBlckVsLCBzbGlkZXMsXG4gICAgfSA9IHN3aXBlcjtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXNcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoW1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLFxuICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MsXG4gICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICBzd2lwZXIuJGVsLmRhdGEoJ3N3aXBlcicsIG51bGwpO1xuICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIFV0aWxzLmV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFN3aXBlckNsYXNzO1xuICB9XG5cbiAgc3RhdGljIGdldCAkKCkge1xuICAgIHJldHVybiAkO1xuICB9XG59XG5cbnZhciBEZXZpY2UkMSA9IHtcbiAgbmFtZTogJ2RldmljZScsXG4gIHByb3RvOiB7XG4gICAgZGV2aWNlOiBEZXZpY2UsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIGRldmljZTogRGV2aWNlLFxuICB9LFxufTtcblxudmFyIFN1cHBvcnQkMSA9IHtcbiAgbmFtZTogJ3N1cHBvcnQnLFxuICBwcm90bzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG59O1xuXG5jb25zdCBCcm93c2VyID0gKGZ1bmN0aW9uIEJyb3dzZXIoKSB7XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNFZGdlOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgIGlzU2FmYXJpOiBpc1NhZmFyaSgpLFxuICAgIGlzVWlXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLFxuICB9O1xufSgpKTtcblxudmFyIEJyb3dzZXIkMSA9IHtcbiAgbmFtZTogJ2Jyb3dzZXInLFxuICBwcm90bzoge1xuICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gIH0sXG59O1xuXG52YXIgUmVzaXplID0ge1xuICBuYW1lOiAncmVzaXplJyxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcmVzaXplOiB7XG4gICAgICAgIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIC8vIEVtaXQgcmVzaXplXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcblxuICAgICAgLy8gRW1pdCBvcmllbnRhdGlvbmNoYW5nZVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgT2JzZXJ2ZXIgPSB7XG4gIGZ1bmM6IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyLFxuICBhdHRhY2godGFyZ2V0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gT2JzZXJ2ZXIuZnVuYztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoKG11dGF0aW9ucykgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhLFxuICAgIH0pO1xuXG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghU3VwcG9ydC5vYnNlcnZlciB8fCAhc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kZWxbMF0sIHsgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuIH0pO1xuXG4gICAgLy8gT2JzZXJ2ZSB3cmFwcGVyXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwgeyBhdHRyaWJ1dGVzOiBmYWxzZSB9KTtcbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIpID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gIH0sXG59O1xuXG52YXIgT2JzZXJ2ZXIkMSA9IHtcbiAgbmFtZTogJ29ic2VydmVyJyxcbiAgcGFyYW1zOiB7XG4gICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICBvYnNlcnZlU2xpZGVDaGlsZHJlbjogZmFsc2UsXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIG9ic2VydmVyOiB7XG4gICAgICAgIGluaXQ6IE9ic2VydmVyLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBhdHRhY2g6IE9ic2VydmVyLmF0dGFjaC5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IE9ic2VydmVyLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICBvYnNlcnZlcnM6IFtdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5vYnNlcnZlci5pbml0KCk7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5vYnNlcnZlci5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFZpcnR1YWwgPSB7XG4gIHVwZGF0ZShmb3JjZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXNQZXJWaWV3LCBzbGlkZXNQZXJHcm91cCwgY2VudGVyZWRTbGlkZXMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3QgeyBhZGRTbGlkZXNCZWZvcmUsIGFkZFNsaWRlc0FmdGVyIH0gPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgY29uc3Qge1xuICAgICAgZnJvbTogcHJldmlvdXNGcm9tLFxuICAgICAgdG86IHByZXZpb3VzVG8sXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkOiBwcmV2aW91c1NsaWRlc0dyaWQsXG4gICAgICByZW5kZXJTbGlkZSxcbiAgICAgIG9mZnNldDogcHJldmlvdXNPZmZzZXQsXG4gICAgfSA9IHN3aXBlci52aXJ0dWFsO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG5cbiAgICBsZXQgb2Zmc2V0UHJvcDtcbiAgICBpZiAoc3dpcGVyLnJ0bFRyYW5zbGF0ZSkgb2Zmc2V0UHJvcCA9ICdyaWdodCc7XG4gICAgZWxzZSBvZmZzZXRQcm9wID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCc7XG5cbiAgICBsZXQgc2xpZGVzQWZ0ZXI7XG4gICAgbGV0IHNsaWRlc0JlZm9yZTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgIH1cbiAgICBjb25zdCBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTtcbiAgICBjb25zdCB0byA9IE1hdGgubWluKChhY3RpdmVJbmRleCB8fCAwKSArIHNsaWRlc0FmdGVyLCBzbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKHN3aXBlci5zbGlkZXNHcmlkW2Zyb21dIHx8IDApIC0gKHN3aXBlci5zbGlkZXNHcmlkWzBdIHx8IDApO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgICBmcm9tLFxuICAgICAgdG8sXG4gICAgICBvZmZzZXQsXG4gICAgICBzbGlkZXNHcmlkOiBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uUmVuZGVyZWQoKSB7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICBpZiAoc3dpcGVyLmxhenkgJiYgc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2aW91c0Zyb20gPT09IGZyb20gJiYgcHJldmlvdXNUbyA9PT0gdG8gJiYgIWZvcmNlKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc0dyaWQgIT09IHByZXZpb3VzU2xpZGVzR3JpZCAmJiBvZmZzZXQgIT09IHByZXZpb3VzT2Zmc2V0KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZXMuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHN3aXBlciwge1xuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICBzbGlkZXM6IChmdW5jdGlvbiBnZXRTbGlkZXMoKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVzVG9SZW5kZXIgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8PSB0bzsgaSArPSAxKSB7XG4gICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzbGlkZXNUb1JlbmRlcjtcbiAgICAgICAgfSgpKSxcbiAgICAgIH0pO1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmVwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGNvbnN0IGFwcGVuZEluZGV4ZXMgPSBbXTtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2l9XCJdYCkucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChpID49IGZyb20gJiYgaSA8PSB0bykge1xuICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgYXBwZW5kSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpID4gcHJldmlvdXNUbykgYXBwZW5kSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgIGlmIChpIDwgcHJldmlvdXNGcm9tKSBwcmVwZW5kSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGFwcGVuZEluZGV4ZXMuZm9yRWFjaCgoaW5kZXgpID0+IHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIHByZXBlbmRJbmRleGVzLnNvcnQoKGEsIGIpID0+IGIgLSBhKS5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApO1xuICAgIG9uUmVuZGVyZWQoKTtcbiAgfSxcbiAgcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgaWYgKHBhcmFtcy5jYWNoZSAmJiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0pIHtcbiAgICAgIHJldHVybiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF07XG4gICAgfVxuICAgIGNvbnN0ICRzbGlkZUVsID0gcGFyYW1zLnJlbmRlclNsaWRlXG4gICAgICA/ICQocGFyYW1zLnJlbmRlclNsaWRlLmNhbGwoc3dpcGVyLCBzbGlkZSwgaW5kZXgpKVxuICAgICAgOiAkKGA8ZGl2IGNsYXNzPVwiJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9XCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiPiR7c2xpZGV9PC9kaXY+YCk7XG4gICAgaWYgKCEkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICBpZiAocGFyYW1zLmNhY2hlKSBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0gPSAkc2xpZGVFbDtcbiAgICByZXR1cm4gJHNsaWRlRWw7XG4gIH0sXG4gIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzKTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICB9LFxuICBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgbGV0IG51bWJlck9mTmV3U2xpZGVzID0gMTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlc1tpXSk7XG4gICAgICB9XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIG51bWJlck9mTmV3U2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgY29uc3QgY2FjaGUgPSBzd2lwZXIudmlydHVhbC5jYWNoZTtcbiAgICAgIGNvbnN0IG5ld0NhY2hlID0ge307XG4gICAgICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaCgoY2FjaGVkSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgJGNhY2hlZEVsID0gY2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgICBjb25zdCBjYWNoZWRFbEluZGV4ID0gJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIGlmIChjYWNoZWRFbEluZGV4KSB7XG4gICAgICAgICAgJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3Q2FjaGVbcGFyc2VJbnQoY2FjaGVkSW5kZXgsIDEwKSArIG51bWJlck9mTmV3U2xpZGVzXSA9ICRjYWNoZWRFbDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc107XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCwgMCk7XG4gIH0sXG4gIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0ge307XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgfSxcbn07XG5cbnZhciBWaXJ0dWFsJDEgPSB7XG4gIG5hbWU6ICd2aXJ0dWFsJyxcbiAgcGFyYW1zOiB7XG4gICAgdmlydHVhbDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDAsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgdmlydHVhbDoge1xuICAgICAgICB1cGRhdGU6IFZpcnR1YWwudXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgYXBwZW5kU2xpZGU6IFZpcnR1YWwuYXBwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICBwcmVwZW5kU2xpZGU6IFZpcnR1YWwucHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVtb3ZlU2xpZGU6IFZpcnR1YWwucmVtb3ZlU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICByZW1vdmVBbGxTbGlkZXM6IFZpcnR1YWwucmVtb3ZlQWxsU2xpZGVzLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVuZGVyU2xpZGU6IFZpcnR1YWwucmVuZGVyU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzbGlkZXM6IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXMsXG4gICAgICAgIGNhY2hlOiB7fSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc312aXJ0dWFsYCk7XG4gICAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB9O1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBLZXlib2FyZCA9IHtcbiAgaGFuZGxlKGV2ZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM5KSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiBrYyA9PT0gNDApIHx8IGtjID09PSAzNCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM3KSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiBrYyA9PT0gMzgpIHx8IGtjID09PSAzMykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50JDEuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudCQxLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgJiYgKGRvY3VtZW50JDEuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50JDEuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGtjID09PSAzMyB8fCBrYyA9PT0gMzQgfHwga2MgPT09IDM3IHx8IGtjID09PSAzOSB8fCBrYyA9PT0gMzggfHwga2MgPT09IDQwKSkge1xuICAgICAgbGV0IGluVmlldyA9IGZhbHNlO1xuICAgICAgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG4gICAgICBpZiAoc3dpcGVyLiRlbC5wYXJlbnRzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID4gMCAmJiBzd2lwZXIuJGVsLnBhcmVudHMoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpO1xuICAgICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0O1xuICAgICAgY29uc3Qgc3dpcGVyQ29vcmQgPSBbXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLFxuICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XSxcbiAgICAgIF07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwb2ludFswXSA+PSAwICYmIHBvaW50WzBdIDw9IHdpbmRvd1dpZHRoXG4gICAgICAgICAgJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHRcbiAgICAgICAgKSB7XG4gICAgICAgICAgaW5WaWV3ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChrYyA9PT0gMzMgfHwga2MgPT09IDM0IHx8IGtjID09PSAzNyB8fCBrYyA9PT0gMzkpIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoKChrYyA9PT0gMzQgfHwga2MgPT09IDM5KSAmJiAhcnRsKSB8fCAoKGtjID09PSAzMyB8fCBrYyA9PT0gMzcpICYmIHJ0bCkpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoKGtjID09PSAzMyB8fCBrYyA9PT0gMzcpICYmICFydGwpIHx8ICgoa2MgPT09IDM0IHx8IGtjID09PSAzOSkgJiYgcnRsKSkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2MgPT09IDMzIHx8IGtjID09PSAzNCB8fCBrYyA9PT0gMzggfHwga2MgPT09IDQwKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGtjID09PSAzNCB8fCBrYyA9PT0gNDApIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmIChrYyA9PT0gMzMgfHwga2MgPT09IDM4KSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LFxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICAkKGRvY3VtZW50JDEpLm9uKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSB0cnVlO1xuICB9LFxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICQoZG9jdW1lbnQkMSkub2ZmKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfSxcbn07XG5cbnZhciBLZXlib2FyZCQxID0ge1xuICBuYW1lOiAna2V5Ym9hcmQnLFxuICBwYXJhbXM6IHtcbiAgICBrZXlib2FyZDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBrZXlib2FyZDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgZW5hYmxlOiBLZXlib2FyZC5lbmFibGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkaXNhYmxlOiBLZXlib2FyZC5kaXNhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaGFuZGxlOiBLZXlib2FyZC5oYW5kbGUuYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZCgpIHtcbiAgY29uc3QgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICBsZXQgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQkMTtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWRcbiAgICAmJiBkb2N1bWVudCQxLmltcGxlbWVudGF0aW9uXG4gICAgJiYgZG9jdW1lbnQkMS5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgJiYgZG9jdW1lbnQkMS5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWVcbiAgKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQkMS5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5jb25zdCBNb3VzZXdoZWVsID0ge1xuICBsYXN0U2Nyb2xsVGltZTogVXRpbHMubm93KCksXG4gIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgcmVjZW50V2hlZWxFdmVudHM6IFtdLFxuICBldmVudCgpIHtcbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHJldHVybiAnRE9NTW91c2VTY3JvbGwnO1xuICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICB9LFxuICBub3JtYWxpemUoZSkge1xuICAgIC8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbiAgICBjb25zdCBQSVhFTF9TVEVQID0gMTA7XG4gICAgY29uc3QgTElORV9IRUlHSFQgPSA0MDtcbiAgICBjb25zdCBQQUdFX0hFSUdIVCA9IDgwMDtcblxuICAgIGxldCBzWCA9IDA7XG4gICAgbGV0IHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG4gICAgbGV0IHBYID0gMDtcbiAgICBsZXQgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gICAgLy8gTGVnYWN5XG4gICAgaWYgKCdkZXRhaWwnIGluIGUpIHtcbiAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YScgaW4gZSkge1xuICAgICAgc1kgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBlKSB7XG4gICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgIH1cblxuICAgIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgICBpZiAoJ2F4aXMnIGluIGUgJiYgZS5heGlzID09PSBlLkhPUklaT05UQUxfQVhJUykge1xuICAgICAgc1ggPSBzWTtcbiAgICAgIHNZID0gMDtcbiAgICB9XG5cbiAgICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICBwWSA9IGUuZGVsdGFZO1xuICAgIH1cbiAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgcFggPSBlLmRlbHRhWDtcbiAgICB9XG5cbiAgICBpZiAoZS5zaGlmdEtleSAmJiAhcFgpIHsgLy8gaWYgdXNlciBzY3JvbGxzIHdpdGggc2hpZnQgaGUgd2FudHMgaG9yaXpvbnRhbCBzY3JvbGxcbiAgICAgIHBYID0gcFk7XG4gICAgICBwWSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkgeyAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIH0gZWxzZSB7IC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgc1ggPSAocFggPCAxKSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHBZICYmICFzWSkge1xuICAgICAgc1kgPSAocFkgPCAxKSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFksXG4gICAgfTtcbiAgfSxcbiAgaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICB9LFxuICBoYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICB9LFxuICBoYW5kbGUoZXZlbnQpIHtcbiAgICBsZXQgZSA9IGV2ZW50O1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGxldCB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICF0YXJnZXRbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeFxuICAgIGxldCBkZWx0YSA9IDA7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcblxuICAgIGNvbnN0IGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSAtZGF0YS5waXhlbFggKiBydGxGYWN0b3I7XG4gICAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7XG4gICAgICBlbHNlIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSxcbiAgICAgICAgcmF3OiBldmVudCxcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuICAgICAgY29uc3QgcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcbiAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICBpZiAocHJldkV2ZW50KSB7XG4gICAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24gfHwgbmV3RXZlbnQuZGVsdGEgPiBwcmV2RXZlbnQuZGVsdGEgfHwgbmV3RXZlbnQudGltZSA+IHByZXZFdmVudC50aW1lICsgMTUwKSB7XG4gICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBpdCdzIHRpbWUgdG8gcmVsZWFzZSB0aGUgc2Nyb2xsOlxuICAgICAgLy8gICBSZXR1cm4gbm93IHNvIHlvdSBkb24ndCBoaXQgdGhlIHByZXZlbnREZWZhdWx0LlxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG5cbiAgICAgIC8vIElmIHdlIHJlY2VudGx5IHNuYXBwZWQgYWZ0ZXIgYSBtb21lbnR1bSBzY3JvbGwsIHRoZW4gaWdub3JlIHdoZWVsIGV2ZW50c1xuICAgICAgLy8gdG8gZ2l2ZSB0aW1lIGZvciB0aGUgZGVjZWxlcmF0aW9uIHRvIGZpbmlzaC4gU3RvcCBpZ25vcmluZyBhZnRlciA1MDAgbXNlY3NcbiAgICAgIC8vIG9yIGlmIGl0J3MgYSBuZXcgc2Nyb2xsIChsYXJnZXIgZGVsdGEgb3IgaW52ZXJzZSBzaWduIGFzIGxhc3QgZXZlbnQgYmVmb3JlXG4gICAgICAvLyBhbiBlbmQtb2YtbW9tZW50dW0gc25hcCkuXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHsgdGltZTogVXRpbHMubm93KCksIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSB9O1xuICAgICAgY29uc3QgeyBsYXN0RXZlbnRCZWZvcmVTbmFwIH0gPSBzd2lwZXIubW91c2V3aGVlbDtcbiAgICAgIGNvbnN0IGlnbm9yZVdoZWVsRXZlbnRzID0gbGFzdEV2ZW50QmVmb3JlU25hcFxuICAgICAgICAmJiBuZXdFdmVudC50aW1lIDwgbGFzdEV2ZW50QmVmb3JlU25hcC50aW1lICsgNTAwXG4gICAgICAgICYmIG5ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGFcbiAgICAgICAgJiYgbmV3RXZlbnQuZGlyZWN0aW9uID09PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRpcmVjdGlvbjtcbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcG9zaXRpb24gPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyAoZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHkpO1xuICAgICAgICBjb25zdCB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIGNvbnN0IHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcblxuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG5cbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgICAgaWYgKCghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZykgfHwgKCF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIFdoZW4gd2hlZWwgc2Nyb2xsaW5nIHN0YXJ0cyB3aXRoIHN0aWNreSAoYWthIHNuYXApIGVuYWJsZWQsIHRoZW4gZGV0ZWN0XG4gICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy5cbiAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAvLyAyLiBkaWQgYWxsIE4gZXZlbnRzIGFycml2ZSBpbiB0aGUgbGFzdCBNIChNPTUwMD8pIG1zZWNzP1xuICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3NcbiAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAvLyA0LiBkb2VzIHRoZSBsYXRlc3QgZXZlbnQgaGF2ZSBhIGRlbHRhIHRoYXQncyBzbWFsbGVyIHRoYW4gUSAoUT02PykgcGl4ZWxzP1xuICAgICAgICAgIC8vIElmIDEtNCBhcmUgXCJ5ZXNcIiB0aGVuIHdlJ3JlIG5lYXIgdGhlIGVuZCBvZiBhIG1vbXVudHVtIHNjcm9sbCBkZWNlbGVyYXRpb24uXG4gICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgZm9yIFwicmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbFwiIGRldGVybWluYXRpb24uXG4gICAgICAgICAgLy8gSWYgMS00IGFyZW4ndCBzYXRpc2ZpZWQsIHRoZW4gd2FpdCB0byBzbmFwIHVudGlsIDUwMG1zIGFmdGVyIHRoZSBsYXN0IGV2ZW50LlxuICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IHJlY2VudFdoZWVsRXZlbnRzID0gc3dpcGVyLm1vdXNld2hlZWwucmVjZW50V2hlZWxFdmVudHM7XG4gICAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSkge1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBmaXJzdEV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHNbMF07XG4gICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7XG4gICAgICAgICAgaWYgKHByZXZFdmVudCAmJiAobmV3RXZlbnQuZGVsdGEgPiBwcmV2RXZlbnQuZGVsdGEgfHwgbmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTVcbiAgICAgICAgICAgICAgJiYgbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMFxuICAgICAgICAgICAgICAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gbmV3RXZlbnQuZGVsdGEgPj0gMVxuICAgICAgICAgICAgICAmJiBuZXdFdmVudC5kZWx0YSA8PSA2XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgLy8gdG8gd2FpdCBmb3IgbW9yZSBldmVudHMuIFNuYXAgQVNBUCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgICAgICAgICAgLy8gQWxzbywgYmVjYXVzZSB0aGVyZSdzIHNvbWUgcmVtYWluaW5nIG1vbWVudHVtIHdlJ2xsIGJpYXMgdGhlIHNuYXAgaW4gdGhlXG4gICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgLy8gaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBzY3JvbGwgaW5zdGVhZCBvZiByZXZlcnNpbmcgdG8gc25hcC4gIFRoZXJlZm9yZSxcbiAgICAgICAgICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBtb3JlIHRoYW4gMjAlIGluIHRoZSBjdXJyZW50IGRpcmVjdGlvbiwga2VlcCBnb2luZy5cbiAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDtcbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCkge1xuICAgICAgICAgICAgLy8gaWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgaGF2ZW4ndCBkZXRlY3RlZCB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsLCBzb1xuICAgICAgICAgICAgLy8gd2UnbGwgY29uc2lkZXIgYSBzY3JvbGwgXCJjb21wbGV0ZVwiIHdoZW4gdGhlcmUgaGF2ZW4ndCBiZWVuIGFueSB3aGVlbCBldmVudHNcbiAgICAgICAgICAgIC8vIGZvciA1MDBtcy5cbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVtaXQgZXZlbnRcbiAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb24gPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIC8vIElmIHRoZSBtb3ZlbWVudCBpcyBOT1QgYmlnIGVub3VnaCBhbmRcbiAgICAvLyBpZiB0aGUgbGFzdCB0aW1lIHRoZSB1c2VyIHNjcm9sbGVkIHdhcyB0b28gY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lIChhdm9pZCBjb250aW51b3VzbHkgdHJpZ2dlcmluZyB0aGUgc2xpZGVyKTpcbiAgICAvLyAgIERvbid0IGdvIGFueSBmdXJ0aGVyIChhdm9pZCBpbnNpZ25pZmljYW50IHNjcm9sbCBtb3ZlbWVudCkuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgVXRpbHMubm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gSWYgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgZW5kOlxuICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgIC8vICAgICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIC8vIEVsc2UgKHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBiZWdpbm5pbmcpIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgIC8vICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgIH1cbiAgICAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcbiAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA9IChuZXcgd2luZG93LkRhdGUoKSkuZ2V0VGltZSgpO1xuICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCk7XG4gICAgfVxuICAgIHRhcmdldC5vbignbW91c2VlbnRlcicsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIpO1xuICAgIHRhcmdldC5vbignbW91c2VsZWF2ZScsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUpO1xuICAgIHRhcmdldC5vbihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHRhcmdldCA9IHN3aXBlci4kZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgIH1cbiAgICB0YXJnZXQub2ZmKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbn07XG5cbnZhciBNb3VzZXdoZWVsJDEgPSB7XG4gIG5hbWU6ICdtb3VzZXdoZWVsJyxcbiAgcGFyYW1zOiB7XG4gICAgbW91c2V3aGVlbDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByZWxlYXNlT25FZGdlczogZmFsc2UsXG4gICAgICBpbnZlcnQ6IGZhbHNlLFxuICAgICAgZm9yY2VUb0F4aXM6IGZhbHNlLFxuICAgICAgc2Vuc2l0aXZpdHk6IDEsXG4gICAgICBldmVudHNUYXJnZWQ6ICdjb250YWluZXInLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGVuYWJsZTogTW91c2V3aGVlbC5lbmFibGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkaXNhYmxlOiBNb3VzZXdoZWVsLmRpc2FibGUuYmluZChzd2lwZXIpLFxuICAgICAgICBoYW5kbGU6IE1vdXNld2hlZWwuaGFuZGxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaGFuZGxlTW91c2VFbnRlcjogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUVudGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaGFuZGxlTW91c2VMZWF2ZTogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgYW5pbWF0ZVNsaWRlcjogTW91c2V3aGVlbC5hbmltYXRlU2xpZGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVsZWFzZVNjcm9sbDogTW91c2V3aGVlbC5yZWxlYXNlU2Nyb2xsLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgbGFzdFNjcm9sbFRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmRpc2FibGUoKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgTmF2aWdhdGlvbiA9IHtcbiAgdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBjb25zdCB7ICRuZXh0RWwsICRwcmV2RWwgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgICAkcHJldkVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSxcbiAgb25QcmV2Q2xpY2soZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgfSxcbiAgb25OZXh0Q2xpY2soZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgJG5leHRFbCA9ICQocGFyYW1zLm5leHRFbCk7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgJiYgdHlwZW9mIHBhcmFtcy5uZXh0RWwgPT09ICdzdHJpbmcnXG4gICAgICAgICYmICRuZXh0RWwubGVuZ3RoID4gMVxuICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCkubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy5wcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzXG4gICAgICAgICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiAkcHJldkVsLmxlbmd0aCA+IDFcbiAgICAgICAgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMVxuICAgICAgKSB7XG4gICAgICAgICRwcmV2RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkbmV4dEVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXSxcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIE5hdmlnYXRpb24kMSA9IHtcbiAgbmFtZTogJ25hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG5cbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIGluaXQ6IE5hdmlnYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZTogTmF2aWdhdGlvbi51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBOYXZpZ2F0aW9uLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICBvbk5leHRDbGljazogTmF2aWdhdGlvbi5vbk5leHRDbGljay5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uUHJldkNsaWNrOiBOYXZpZ2F0aW9uLm9uUHJldkNsaWNrLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi5pbml0KCk7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIHRvRWRnZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGZyb21FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBjbGljayhlKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrXG4gICAgICAgICYmICEkKGUudGFyZ2V0KS5pcygkcHJldkVsKVxuICAgICAgICAmJiAhJChlLnRhcmdldCkuaXMoJG5leHRFbClcbiAgICAgICkge1xuICAgICAgICBsZXQgaXNIaWRkZW47XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycsIHN3aXBlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25IaWRlJywgc3dpcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICRuZXh0RWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBQYWdpbmF0aW9uID0ge1xuICB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgLy8gQ3VycmVudC9Ub3RhbFxuICAgIGxldCBjdXJyZW50O1xuICAgIGNvbnN0IHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBjdXJyZW50ID0gTWF0aC5jZWlsKChzd2lwZXIuYWN0aXZlSW5kZXggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkge1xuICAgICAgICBjdXJyZW50IC09IChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSBjdXJyZW50IC09IHRvdGFsO1xuICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBsZXQgZmlyc3RJbmRleDtcbiAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgYCR7c3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCl9cHhgKTtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggKz0gKGN1cnJlbnQgLSBzd2lwZXIucHJldmlvdXNJbmRleCk7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA+IChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkpIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RJbmRleCA9IGN1cnJlbnQgLSBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXg7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfSAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dCAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXYgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmVhY2goKGluZGV4LCBidWxsZXQpID0+IHtcbiAgICAgICAgICBjb25zdCAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gZmlyc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXZgKVxuICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXRcbiAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dGApXG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQtbmV4dGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0ICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgY29uc3QgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHM7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIGkpLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApXG4gICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYtcHJldmApO1xuICAgICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0YClcbiAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXZgKVxuICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYtcHJldmApO1xuICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0YClcbiAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHRgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKCgoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoKSAtIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKSkgLyAyKSAtIChtaWRJbmRleCAqIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBgJHtidWxsZXRzT2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy5jdXJyZW50Q2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChgLiR7cGFyYW1zLnRvdGFsQ2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgIGxldCBzY2FsZVggPSAxO1xuICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31gKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWApLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIsICRlbFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgc3dpcGVyLCAkZWxbMF0pO1xuICAgIH1cbiAgICAkZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIGNvbnN0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoYC4ke3BhcmFtcy5idWxsZXRDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YFxuICAgICAgICArICcgLyAnXG4gICAgICAgICsgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuXG4gICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKFxuICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZydcbiAgICAgICYmICRlbC5sZW5ndGggPiAxXG4gICAgKSB7XG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGAuJHtwYXJhbXMuYnVsbGV0Q2xhc3N9YCwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9mZignY2xpY2snLCBgLiR7cGFyYW1zLmJ1bGxldENsYXNzfWApO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBQYWdpbmF0aW9uJDEgPSB7XG4gIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLCAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IChudW1iZXIpID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IChudW1iZXIpID0+IG51bWJlcixcbiAgICAgIGJ1bGxldENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0JyxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScsXG4gICAgICBtb2RpZmllckNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tJywgLy8gTkVXXG4gICAgICBjdXJyZW50Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jdXJyZW50JyxcbiAgICAgIHRvdGFsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi10b3RhbCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWhpZGRlbicsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLWZpbGwnLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUnLFxuICAgICAgY2xpY2thYmxlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGUnLCAvLyBORVdcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWxvY2snLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgaW5pdDogUGFnaW5hdGlvbi5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVuZGVyOiBQYWdpbmF0aW9uLnJlbmRlci5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZTogUGFnaW5hdGlvbi51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBQYWdpbmF0aW9uLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXg6IDAsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGFjdGl2ZUluZGV4Q2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBJbmRleENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlc0xlbmd0aENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2soZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsXG4gICAgICAgICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGlja1xuICAgICAgICAmJiBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID4gMFxuICAgICAgICAmJiAhJChlLnRhcmdldCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGlzSGlkZGVuID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uU2hvdycsIHN3aXBlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25IaWRlJywgc3dpcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgU2Nyb2xsYmFyID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsIHJ0bFRyYW5zbGF0ZTogcnRsLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGRyYWdTaXplLCB0cmFja1NpemUsICRkcmFnRWwsICRlbCxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuXG4gICAgbGV0IG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtuZXdQb3N9cHgsIDAsIDApYCk7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWApO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0KTtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLiRkcmFnRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0sXG4gIHVwZGF0ZVNpemUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHNjcm9sbGJhciB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGRyYWdFbCwgJGVsIH0gPSBzY3JvbGxiYXI7XG5cbiAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICBjb25zdCB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkZWxbMF0ub2Zmc2V0V2lkdGggOiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY29uc3QgZGl2aWRlciA9IHN3aXBlci5zaXplIC8gc3dpcGVyLnZpcnR1YWxTaXplO1xuICAgIGNvbnN0IG1vdmVEaXZpZGVyID0gZGl2aWRlciAqICh0cmFja1NpemUgLyBzd2lwZXIuc2l6ZSk7XG4gICAgbGV0IGRyYWdTaXplO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9XG5cbiAgICBpZiAoZGl2aWRlciA+PSAxKSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmhpZGUpIHtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG4gICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgdHJhY2tTaXplLFxuICAgICAgZGl2aWRlcixcbiAgICAgIG1vdmVEaXZpZGVyLFxuICAgICAgZHJhZ1NpemUsXG4gICAgfSk7XG4gICAgc2Nyb2xsYmFyLiRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gIH0sXG4gIGdldFBvaW50ZXJQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYKTtcbiAgICB9XG4gICAgcmV0dXJuICgoZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WSk7XG4gIH0sXG4gIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgcnRsVHJhbnNsYXRlOiBydGwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICAkZWwsXG4gICAgICBkcmFnU2l6ZSxcbiAgICAgIHRyYWNrU2l6ZSxcbiAgICAgIGRyYWdTdGFydFBvcyxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuXG4gICAgbGV0IHBvc2l0aW9uUmF0aW87XG4gICAgcG9zaXRpb25SYXRpbyA9ICgoc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSkgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddXG4gICAgICAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyAoKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvKTtcblxuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfSxcbiAgb25EcmFnU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7ICRlbCwgJGRyYWdFbCB9ID0gc2Nyb2xsYmFyO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdTdGFydFBvcyA9IChlLnRhcmdldCA9PT0gJGRyYWdFbFswXSB8fCBlLnRhcmdldCA9PT0gJGRyYWdFbClcbiAgICAgID8gc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSA6IG51bGw7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuXG4gICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICdub25lJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnU3RhcnQnLCBlKTtcbiAgfSxcbiAgb25EcmFnTW92ZShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCAkZHJhZ0VsIH0gPSBzY3JvbGxiYXI7XG5cbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH0sXG4gIG9uRHJhZ0VuZChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwgfSA9IHNjcm9sbGJhcjtcblxuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICcnKTtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbignJyk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH0sXG4gIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsIHRvdWNoRXZlbnRzVG91Y2gsIHRvdWNoRXZlbnRzRGVza3RvcCwgcGFyYW1zLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBjb25zdCB0YXJnZXQgPSAkZWxbMF07XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGlmICghU3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudCQxLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQkMS5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsIHRvdWNoRXZlbnRzVG91Y2gsIHRvdWNoRXZlbnRzRGVza3RvcCwgcGFyYW1zLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBjb25zdCB0YXJnZXQgPSAkZWxbMF07XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGlmICghU3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudCQxLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQkMS5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJGVsOiAkc3dpcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgIGxldCAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgbGV0ICRkcmFnRWwgPSAkZWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApO1xuICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGRyYWdFbCA9ICQoYDxkaXYgY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzc31cIj48L2Rpdj5gKTtcbiAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF0sXG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgc2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZSgpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9LFxufTtcblxudmFyIFNjcm9sbGJhciQxID0ge1xuICBuYW1lOiAnc2Nyb2xsYmFyJyxcbiAgcGFyYW1zOiB7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICBoaWRlOiBmYWxzZSxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgIGluaXQ6IFNjcm9sbGJhci5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogU2Nyb2xsYmFyLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICB1cGRhdGVTaXplOiBTY3JvbGxiYXIudXBkYXRlU2l6ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zbGF0ZTogU2Nyb2xsYmFyLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IFNjcm9sbGJhci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW5hYmxlRHJhZ2dhYmxlOiBTY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGlzYWJsZURyYWdnYWJsZTogU2Nyb2xsYmFyLmRpc2FibGVEcmFnZ2FibGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXREcmFnUG9zaXRpb246IFNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBnZXRQb2ludGVyUG9zaXRpb246IFNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbkRyYWdTdGFydDogU2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25EcmFnTW92ZTogU2Nyb2xsYmFyLm9uRHJhZ01vdmUuYmluZChzd2lwZXIpLFxuICAgICAgICBvbkRyYWdFbmQ6IFNjcm9sbGJhci5vbkRyYWdFbmQuYmluZChzd2lwZXIpLFxuICAgICAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgICAgICB0aW1lb3V0OiBudWxsLFxuICAgICAgICBkcmFnVGltZW91dDogbnVsbCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmluaXQoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFBhcmFsbGF4ID0ge1xuICBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHJ0bCB9ID0gc3dpcGVyO1xuXG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuXG4gICAgY29uc3QgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICBsZXQgeCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgbGV0IHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteScpO1xuICAgIGNvbnN0IHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgY29uc3Qgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cblxuICAgIGlmICgoeCkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHggPSBgJHtwYXJzZUludCh4LCAxMCkgKiBwcm9ncmVzcyAqIHJ0bEZhY3Rvcn0lYDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IGAke3ggKiBwcm9ncmVzcyAqIHJ0bEZhY3Rvcn1weGA7XG4gICAgfVxuICAgIGlmICgoeSkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHkgPSBgJHtwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzc30lYDtcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IGAke3kgKiBwcm9ncmVzc31weGA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiBvcGFjaXR5ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50T3BhY2l0eSA9IG9wYWNpdHkgLSAoKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKSk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjYWxlID09PSAndW5kZWZpbmVkJyB8fCBzY2FsZSA9PT0gbnVsbCkge1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjdXJyZW50U2NhbGUgPSBzY2FsZSAtICgoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKSk7XG4gICAgICAkZWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3h9LCAke3l9LCAwcHgpIHNjYWxlKCR7Y3VycmVudFNjYWxlfSlgKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICRlbCwgc2xpZGVzLCBwcm9ncmVzcywgc25hcEdyaWQsXG4gICAgfSA9IHN3aXBlcjtcbiAgICAkZWwuY2hpbGRyZW4oJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKVxuICAgICAgLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICBzbGlkZXMuZWFjaCgoc2xpZGVJbmRleCwgc2xpZGVFbCkgPT4ge1xuICAgICAgbGV0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIChwcm9ncmVzcyAqIChzbmFwR3JpZC5sZW5ndGggLSAxKSk7XG4gICAgICB9XG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICQoc2xpZGVFbCkuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpXG4gICAgICAgIC5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkZWwgfSA9IHN3aXBlcjtcbiAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpXG4gICAgICAuZWFjaCgoaW5kZXgsIHBhcmFsbGF4RWwpID0+IHtcbiAgICAgICAgY29uc3QgJHBhcmFsbGF4RWwgPSAkKHBhcmFsbGF4RWwpO1xuICAgICAgICBsZXQgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICAgJHBhcmFsbGF4RWwudHJhbnNpdGlvbihwYXJhbGxheER1cmF0aW9uKTtcbiAgICAgIH0pO1xuICB9LFxufTtcblxudmFyIFBhcmFsbGF4JDEgPSB7XG4gIG5hbWU6ICdwYXJhbGxheCcsXG4gIHBhcmFtczoge1xuICAgIHBhcmFsbGF4OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBwYXJhbGxheDoge1xuICAgICAgICBzZXRUcmFuc2Zvcm06IFBhcmFsbGF4LnNldFRyYW5zZm9ybS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zbGF0ZTogUGFyYWxsYXguc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogUGFyYWxsYXguc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBab29tID0ge1xuICAvLyBDYWxjIFNjYWxlIEZyb20gTXVsdGktdG91Y2hlc1xuICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgIGNvbnN0IHgxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgIGNvbnN0IHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgIGNvbnN0IHgyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYO1xuICAgIGNvbnN0IHkyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCgoeDIgLSB4MSkgKiogMikgKyAoKHkyIC0geTEpICoqIDIpKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH0sXG4gIC8vIEV2ZW50c1xuICBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcbiAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnIHx8IChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSB0cnVlO1xuICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwgfHwgIWdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoKSB7XG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJChlLnRhcmdldCkuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApO1xuICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoID09PSAwKSBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICB9XG4gICAgc3dpcGVyLnpvb20uaXNTY2FsaW5nID0gdHJ1ZTtcbiAgfSxcbiAgb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKFN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHpvb20uc2NhbGUgPSBlLnNjYWxlICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20uc2NhbGUgPSAoZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQpICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLm1heFJhdGlvIC0gMSkgKyAoKCh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbykgKyAxKSAqKiAwLjUpO1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChwYXJhbXMubWluUmF0aW8gKyAxKSAtICgoKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUpICsgMSkgKiogMC41KTtcbiAgICB9XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICB9LFxuICBvbkdlc3R1cmVFbmQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoIXpvb20uZmFrZUdlc3R1cmVUb3VjaGVkIHx8ICF6b29tLmZha2VHZXN0dXJlTW92ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoZW5kJyB8fCAoZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhRGV2aWNlLmFuZHJvaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBvblRvdWNoU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UgfSA9IHpvb207XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChEZXZpY2UuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIGltYWdlLnRvdWNoZXNTdGFydC54ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIGltYWdlLnRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICB9LFxuICBvblRvdWNoTW92ZShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlLCBpbWFnZSwgdmVsb2NpdHkgfSA9IHpvb207XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS4kc2xpZGVFbCkgcmV0dXJuO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBpbWFnZS5oZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGltYWdlLnN0YXJ0WCA9IFV0aWxzLmdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3gnKSB8fCAwO1xuICAgICAgaW1hZ2Uuc3RhcnRZID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneScpIHx8IDA7XG4gICAgICBnZXN0dXJlLnNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgZ2VzdHVyZS5zbGlkZUhlaWdodCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKTtcbiAgICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICAgIGltYWdlLnN0YXJ0WCA9IC1pbWFnZS5zdGFydFg7XG4gICAgICAgIGltYWdlLnN0YXJ0WSA9IC1pbWFnZS5zdGFydFk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcblxuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuXG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhem9vbS5pc1NjYWxpbmcpIHtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICYmIChcbiAgICAgICAgICAoTWF0aC5mbG9vcihpbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPCBpbWFnZS50b3VjaGVzU3RhcnQueClcbiAgICAgICAgICB8fCAoTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueClcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGlmIChcbiAgICAgICAgIXN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAmJiAoXG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkpXG4gICAgICAgICAgfHwgKE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LngpICsgaW1hZ2Uuc3RhcnRYO1xuICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSkgKyBpbWFnZS5zdGFydFk7XG5cbiAgICBpZiAoaW1hZ2UuY3VycmVudFggPCBpbWFnZS5taW5YKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS5taW5YICsgMSkgLSAoKChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFgpICsgMSkgKiogMC44KTtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UubWF4WCAtIDEpICsgKCgoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYKSArIDEpICoqIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZIDwgaW1hZ2UubWluWSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UubWluWSArIDEpIC0gKCgoaW1hZ2UubWluWSAtIGltYWdlLmN1cnJlbnRZKSArIDEpICoqIDAuOCk7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLm1heFkgLSAxKSArICgoKGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSkgKyAxKSAqKiAwLjgpO1xuICAgIH1cblxuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICB2ZWxvY2l0eS55ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHZlbG9jaXR5LnkgPSAwO1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWApO1xuICB9LFxuICBvblRvdWNoRW5kKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UsIHZlbG9jaXR5IH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWCA9IDMwMDtcbiAgICBsZXQgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgY29uc3QgbmV3UG9zaXRpb25YID0gaW1hZ2UuY3VycmVudFggKyBtb21lbnR1bURpc3RhbmNlWDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICBjb25zdCBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZO1xuXG4gICAgLy8gRml4IGR1cmF0aW9uXG4gICAgaWYgKHZlbG9jaXR5LnggIT09IDApIG1vbWVudHVtRHVyYXRpb25YID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWCAtIGltYWdlLmN1cnJlbnRYKSAvIHZlbG9jaXR5LngpO1xuICAgIGlmICh2ZWxvY2l0eS55ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWSA9IE1hdGguYWJzKChuZXdQb3NpdGlvblkgLSBpbWFnZS5jdXJyZW50WSkgLyB2ZWxvY2l0eS55KTtcbiAgICBjb25zdCBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcblxuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcblxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbikudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2ltYWdlLmN1cnJlbnRYfXB4LCAke2ltYWdlLmN1cnJlbnRZfXB4LDApYCk7XG4gIH0sXG4gIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgICAgfVxuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICB9XG5cbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuXG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gVG9nZ2xlIFpvb21cbiAgdG9nZ2xlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcblxuICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgIC8vIFpvb20gT3V0XG4gICAgICB6b29tLm91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tLmluKGUpO1xuICAgIH1cbiAgfSxcbiAgaW4oZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UgfSA9IHpvb207XG5cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG5cbiAgICBsZXQgdG91Y2hYO1xuICAgIGxldCB0b3VjaFk7XG4gICAgbGV0IG9mZnNldFg7XG4gICAgbGV0IG9mZnNldFk7XG4gICAgbGV0IGRpZmZYO1xuICAgIGxldCBkaWZmWTtcbiAgICBsZXQgdHJhbnNsYXRlWDtcbiAgICBsZXQgdHJhbnNsYXRlWTtcbiAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICBsZXQgaW1hZ2VIZWlnaHQ7XG4gICAgbGV0IHNjYWxlZFdpZHRoO1xuICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblg7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblk7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFk7XG4gICAgbGV0IHNsaWRlV2lkdGg7XG4gICAgbGV0IHNsaWRlSGVpZ2h0O1xuXG4gICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG5cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgaWYgKGUpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQ7XG4gICAgICBvZmZzZXRZID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS50b3A7XG4gICAgICBkaWZmWCA9IChvZmZzZXRYICsgKHNsaWRlV2lkdGggLyAyKSkgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IChvZmZzZXRZICsgKHNsaWRlSGVpZ2h0IC8gMikpIC0gdG91Y2hZO1xuXG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oKChzbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKCgoc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuXG4gICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlWSA9IGRpZmZZICogem9vbS5zY2FsZTtcblxuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1pblk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYCk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgKTtcbiAgfSxcbiAgb3V0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgem9vbS5zY2FsZSA9IDE7XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG5cbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiB0cnVlIH0gOiB0cnVlO1xuXG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcblxuICAgIC8vIFNjYWxlIGltYWdlXG4gICAgaWYgKFN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlc3RhcnQnLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVjaGFuZ2UnLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlZW5kJywgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTW92ZSBpbWFnZVxuICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWAsIHpvb20ub25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9LFxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghem9vbS5lbmFibGVkKSByZXR1cm47XG5cbiAgICBzd2lwZXIuem9vbS5lbmFibGVkID0gZmFsc2U7XG5cbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiB0cnVlIH0gOiB0cnVlO1xuXG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcblxuICAgIC8vIFNjYWxlIGltYWdlXG4gICAgaWYgKFN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZignZ2VzdHVyZXN0YXJ0Jywgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZignZ2VzdHVyZWNoYW5nZScsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKCdnZXN0dXJlZW5kJywgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCwgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gIH0sXG59O1xuXG52YXIgWm9vbSQxID0ge1xuICBuYW1lOiAnem9vbScsXG4gIHBhcmFtczoge1xuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWF4UmF0aW86IDMsXG4gICAgICBtaW5SYXRpbzogMSxcbiAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgIGNvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXpvb20tY29udGFpbmVyJyxcbiAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIGN1cnJlbnRTY2FsZTogMSxcbiAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICBnZXN0dXJlOiB7XG4gICAgICAgICRzbGlkZUVsOiB1bmRlZmluZWQsXG4gICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgJGltYWdlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgfSxcbiAgICAgIGltYWdlOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluWTogdW5kZWZpbmVkLFxuICAgICAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9LFxuICAgICAgfSxcbiAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgeTogdW5kZWZpbmVkLFxuICAgICAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJldlRpbWU6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgICgnb25HZXN0dXJlU3RhcnQgb25HZXN0dXJlQ2hhbmdlIG9uR2VzdHVyZUVuZCBvblRvdWNoU3RhcnQgb25Ub3VjaE1vdmUgb25Ub3VjaEVuZCBvblRyYW5zaXRpb25FbmQgdG9nZ2xlIGVuYWJsZSBkaXNhYmxlIGluIG91dCcpLnNwbGl0KCcgJykuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgem9vbVttZXRob2ROYW1lXSA9IFpvb21bbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgIH0pO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHpvb20sXG4gICAgfSk7XG5cbiAgICBsZXQgc2NhbGUgPSAxO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChzY2FsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgfSxcbiAgICB0b3VjaFN0YXJ0KGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICB9LFxuICAgIHRvdWNoRW5kKGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hFbmQoZSk7XG4gICAgfSxcbiAgICBkb3VibGVUYXAoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS50b2dnbGUpIHtcbiAgICAgICAgc3dpcGVyLnpvb20udG9nZ2xlKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgTGF6eSA9IHtcbiAgbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubGF6eTtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gICAgY29uc3QgJHNsaWRlRWwgPSBpc1ZpcnR1YWxcbiAgICAgID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApXG4gICAgICA6IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuXG4gICAgbGV0ICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMuZWxlbWVudENsYXNzfTpub3QoLiR7cGFyYW1zLmxvYWRlZENsYXNzfSk6bm90KC4ke3BhcmFtcy5sb2FkaW5nQ2xhc3N9KWApO1xuICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcykpIHtcbiAgICAgICRpbWFnZXMgPSAkaW1hZ2VzLmFkZCgkc2xpZGVFbFswXSk7XG4gICAgfVxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgJGltYWdlcy5lYWNoKChpbWFnZUluZGV4LCBpbWFnZUVsKSA9PiB7XG4gICAgICBjb25zdCAkaW1hZ2VFbCA9ICQoaW1hZ2VFbCk7XG4gICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcblxuICAgICAgY29uc3QgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgY29uc3Qgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgIGNvbnN0IHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICBjb25zdCBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgIGNvbnN0ICRwaWN0dXJlRWwgPSAkaW1hZ2VFbC5wYXJlbnQoJ3BpY3R1cmUnKTtcblxuICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgKHNyYyB8fCBiYWNrZ3JvdW5kKSwgc3Jjc2V0LCBzaXplcywgZmFsc2UsICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IChzd2lwZXIgJiYgIXN3aXBlci5wYXJhbXMpIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGJhY2tncm91bmQpIHtcbiAgICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKFwiJHtiYWNrZ3JvdW5kfVwiKWApO1xuICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyY3NldCcsIHNyY3NldCk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NpemVzJywgc2l6ZXMpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHBpY3R1cmVFbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRwaWN0dXJlRWwuY2hpbGRyZW4oJ3NvdXJjZScpLmVhY2goKHNvdXJjZUluZGV4LCBzb3VyY2VFbCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCAkc291cmNlID0gJChzb3VyY2VFbCk7XG5cbiAgICAgICAgICAgICAgaWYgKCRzb3VyY2UuYXR0cignZGF0YS1zcmNzZXQnKSkge1xuICAgICAgICAgICAgICAgICRzb3VyY2UuYXR0cignc3Jjc2V0JywgJHNvdXJjZS5hdHRyKCdkYXRhLXNyY3NldCcpKTtcbiAgICAgICAgICAgICAgICAkc291cmNlLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmMnLCBzcmMpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAkc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMucHJlbG9hZGVyQ2xhc3N9YCkucmVtb3ZlKCk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl06bm90KC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCk7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShvcmlnaW5hbFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl1gKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZUxvYWQnLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgIH0pO1xuICB9LFxuICBsb2FkKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgJHdyYXBwZXJFbCwgcGFyYW1zOiBzd2lwZXJQYXJhbXMsIHNsaWRlcywgYWN0aXZlSW5kZXgsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXJQYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlclBhcmFtcy5sYXp5O1xuXG4gICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZUV4aXN0KGluZGV4KSB7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIGlmICgkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNsaWRlc1tpbmRleF0pIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzc31gKS5lYWNoKChlbEluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXNWaXJ0dWFsID8gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIDogJChzbGlkZUVsKS5pbmRleCgpO1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHtcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSB8fCAocGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ID4gMSkpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgY29uc3Qgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApO1xuICAgICAgICAvLyBOZXh0IFNsaWRlc1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpIDwgbWF4SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2IFNsaWRlc1xuICAgICAgICBmb3IgKGxldCBpID0gbWluSW5kZXg7IGkgPCBhY3RpdmVJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXh0U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVOZXh0Q2xhc3N9YCk7XG4gICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcblxuICAgICAgICBjb25zdCBwcmV2U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3N9YCk7XG4gICAgICAgIGlmIChwcmV2U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChwcmV2U2xpZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59O1xuXG52YXIgTGF6eSQxID0ge1xuICBuYW1lOiAnbGF6eScsXG4gIHBhcmFtczoge1xuICAgIGxhenk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbG9hZFByZXZOZXh0OiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dEFtb3VudDogMSxcbiAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG5cbiAgICAgIGVsZW1lbnRDbGFzczogJ3N3aXBlci1sYXp5JyxcbiAgICAgIGxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRpbmcnLFxuICAgICAgbG9hZGVkQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkZWQnLFxuICAgICAgcHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGxhenk6IHtcbiAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZSxcbiAgICAgICAgbG9hZDogTGF6eS5sb2FkLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgbG9hZEluU2xpZGU6IExhenkubG9hZEluU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID09PSAwKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNjcm9sbCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiAhc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNjcm9sbGJhckRyYWdNb3ZlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uU3RhcnQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0IHx8ICghc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCAmJiAhc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cblxuY29uc3QgQ29udHJvbGxlciA9IHtcbiAgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgIGNvbnN0IGJpbmFyeVNlYXJjaCA9IChmdW5jdGlvbiBzZWFyY2goKSB7XG4gICAgICBsZXQgbWF4SW5kZXg7XG4gICAgICBsZXQgbWluSW5kZXg7XG4gICAgICBsZXQgZ3Vlc3M7XG4gICAgICByZXR1cm4gKGFycmF5LCB2YWwpID0+IHtcbiAgICAgICAgbWluSW5kZXggPSAtMTtcbiAgICAgICAgbWF4SW5kZXggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgIGd1ZXNzID0gbWF4SW5kZXggKyBtaW5JbmRleCA+PiAxO1xuICAgICAgICAgIGlmIChhcnJheVtndWVzc10gPD0gdmFsKSB7XG4gICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXhJbmRleCA9IGd1ZXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4SW5kZXg7XG4gICAgICB9O1xuICAgIH0oKSk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxO1xuICAgIC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG4gICAgbGV0IGkxO1xuICAgIGxldCBpMztcblxuICAgIHRoaXMuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh4Mikge1xuICAgICAgaWYgKCF4MikgcmV0dXJuIDA7XG5cbiAgICAgIC8vIEdldCB0aGUgaW5kZXhlcyBvZiB4MSBhbmQgeDMgKHRoZSBhcnJheSBpbmRleGVzIGJlZm9yZSBhbmQgYWZ0ZXIgZ2l2ZW4geDIpOlxuICAgICAgaTMgPSBiaW5hcnlTZWFyY2godGhpcy54LCB4Mik7XG4gICAgICBpMSA9IGkzIC0gMTtcblxuICAgICAgLy8gV2UgaGF2ZSBvdXIgaW5kZXhlcyBpMSAmIGkzLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIGFscmVhZHk6XG4gICAgICAvLyB5MiA6PSAoKHgy4oiSeDEpIMOXICh5M+KIknkxKSkgw7cgKHgz4oiSeDEpICsgeTFcbiAgICAgIHJldHVybiAoKCh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pKSArIHRoaXMueVtpMV07XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8geHh4OiBmb3Igbm93IGkgd2lsbCBqdXN0IHNhdmUgb25lIHNwbGluZSBmdW5jdGlvbiB0byB0b1xuICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3BcbiAgICAgICAgPyBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNsaWRlc0dyaWQsIGMuc2xpZGVzR3JpZClcbiAgICAgICAgOiBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zbGF0ZShzZXRUcmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IG11bHRpcGxpZXI7XG4gICAgbGV0IGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgIC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkXG4gICAgICAgIC8vIGJ1dCBpdCBkaWQgbm90IHdvcmsgb3V0XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKCh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllcikgKyBjLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgfVxuICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICBjLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IGk7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgIGMudHJhbnNpdGlvblN0YXJ0KCk7XG4gICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYy4kd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICAgIGlmICghY29udHJvbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgYy5sb29wRml4KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgfVxuICB9LFxufTtcbnZhciBDb250cm9sbGVyJDEgPSB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgIGNvbnRyb2w6IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sLFxuICAgICAgICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBDb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IENvbnRyb2xsZXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogQ29udHJvbGxlci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IGExMXkgPSB7XG4gIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG1ha2VFbE5vdEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnLTEnKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbFJvbGUoJGVsLCByb2xlKSB7XG4gICAgJGVsLmF0dHIoJ3JvbGUnLCByb2xlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbExhYmVsKCRlbCwgbGFiZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBkaXNhYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBlbmFibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBvbkVudGVyS2V5KGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgcmV0dXJuO1xuICAgIGNvbnN0ICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgJHRhcmdldEVsLmlzKGAuJHtzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3N9YCkpIHtcbiAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgIH1cbiAgfSxcbiAgbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHN3aXBlci5hMTF5LmxpdmVSZWdpb247XG4gICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7XG4gICAgbm90aWZpY2F0aW9uLmh0bWwobWVzc2FnZSk7XG4gIH0sXG4gIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaCgoYnVsbGV0SW5kZXgsIGJ1bGxldEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRidWxsZXRFbCA9ICQoYnVsbGV0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJGJ1bGxldEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRidWxsZXRFbCwgJ2J1dHRvbicpO1xuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pO1xuXG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRuZXh0RWwsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkcHJldkVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRwcmV2RWwsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICRwcmV2RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbiAmJiBzd2lwZXIuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG59O1xudmFyIEExMXkgPSB7XG4gIG5hbWU6ICdhMTF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgbmV4dFNsaWRlTWVzc2FnZTogJ05leHQgc2xpZGUnLFxuICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogJ0dvIHRvIHNsaWRlIHt7aW5kZXh9fScsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgYTExeToge1xuICAgICAgICBsaXZlUmVnaW9uOiAkKGA8c3BhbiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzfVwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPjwvc3Bhbj5gKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoYTExeSkuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgc3dpcGVyLmExMXlbbWV0aG9kTmFtZV0gPSBhMTF5W21ldGhvZE5hbWVdLmJpbmQoc3dpcGVyKTtcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LmluaXQoKTtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIHRvRWRnZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBmcm9tRWRnZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuZGVzdHJveSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBIaXN0b3J5ID0ge1xuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoaXN0b3J5ID0gc3dpcGVyLmhpc3Rvcnk7XG4gICAgaGlzdG9yeS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcygpO1xuICAgIGlmICghaGlzdG9yeS5wYXRocy5rZXkgJiYgIWhpc3RvcnkucGF0aHMudmFsdWUpIHJldHVybjtcbiAgICBoaXN0b3J5LnNjcm9sbFRvU2xpZGUoMCwgaGlzdG9yeS5wYXRocy52YWx1ZSwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9LFxuICBzZXRIaXN0b3J5UG9wU3RhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcygpO1xuICAgIHN3aXBlci5oaXN0b3J5LnNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgc3dpcGVyLmhpc3RvcnkucGF0aHMudmFsdWUsIGZhbHNlKTtcbiAgfSxcbiAgZ2V0UGF0aFZhbHVlcygpIHtcbiAgICBjb25zdCBwYXRoQXJyYXkgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIoKHBhcnQpID0+IHBhcnQgIT09ICcnKTtcbiAgICBjb25zdCB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgY29uc3Qga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgY29uc3QgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XG4gIH0sXG4gIHNldEhpc3Rvcnkoa2V5LCBpbmRleCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgIGxldCB2YWx1ZSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgaWYgKCF3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgdmFsdWUgPSBgJHtrZXl9LyR7dmFsdWV9YDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyB2YWx1ZSB9LCBudWxsLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIHNsdWdpZnkodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKClcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC8tLSsvZywgJy0nKVxuICAgICAgLnJlcGxhY2UoL14tKy8sICcnKVxuICAgICAgLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfSxcbiAgc2Nyb2xsVG9TbGlkZShzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIGNvbnN0IHNsaWRlSGlzdG9yeSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgSGlzdG9yeSQxID0ge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgaGlzdG9yeToge1xuICAgICAgICBpbml0OiBIaXN0b3J5LmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5OiBIaXN0b3J5LnNldEhpc3RvcnkuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IEhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2Nyb2xsVG9TbGlkZTogSGlzdG9yeS5zY3JvbGxUb1NsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogSGlzdG9yeS5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEhhc2hOYXZpZ2F0aW9uID0ge1xuICBvbkhhc2hDYW5nZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5lbWl0KCdoYXNoQ2hhbmdlJyk7XG4gICAgY29uc3QgbmV3SGFzaCA9IGRvY3VtZW50JDEubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKTtcbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICBjb25zdCBuZXdJbmRleCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2goKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIChgIyR7c3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpfWAgfHwgJycpKTtcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgY29uc3QgaGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgZG9jdW1lbnQkMS5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgKHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkpIHJldHVybjtcbiAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IGhhc2ggPSBkb2N1bWVudCQxLmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICBpZiAoaGFzaCkge1xuICAgICAgY29uc3Qgc3BlZWQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbn07XG52YXIgSGFzaE5hdmlnYXRpb24kMSA9IHtcbiAgbmFtZTogJ2hhc2gtbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIGhhc2hOYXZpZ2F0aW9uOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICB3YXRjaFN0YXRlOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgICAgIGluaXQ6IEhhc2hOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBIYXNoTmF2aWdhdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0SGFzaDogSGFzaE5hdmlnYXRpb24uc2V0SGFzaC5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uSGFzaENhbmdlOiBIYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZS5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbi8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuXG5jb25zdCBBdXRvcGxheSA9IHtcbiAgcnVuKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgJGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgbGV0IGRlbGF5ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBpZiAoJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSkge1xuICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSwgZGVsYXkpO1xuICB9LFxuICBzdGFydCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBzdG9wKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHBhdXNlKHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG4gICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgQXV0b3BsYXkkMSA9IHtcbiAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYXV0b3BsYXk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgc3RvcE9uTGFzdFNsaWRlOiBmYWxzZSxcbiAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBwYXVzZWQ6IGZhbHNlLFxuICAgICAgICBydW46IEF1dG9wbGF5LnJ1bi5iaW5kKHN3aXBlciksXG4gICAgICAgIHN0YXJ0OiBBdXRvcGxheS5zdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgIHN0b3A6IEF1dG9wbGF5LnN0b3AuYmluZChzd2lwZXIpLFxuICAgICAgICBwYXVzZTogQXV0b3BsYXkucGF1c2UuYmluZChzd2lwZXIpLFxuICAgICAgICBvblZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuJHdyYXBwZXJFbCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHN3aXBlci5hdXRvcGxheS5vblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHNwZWVkLCBpbnRlcm5hbCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlckZpcnN0TW92ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0b3VjaEVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgJiYgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgRmFkZSA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMgfSA9IHN3aXBlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBsZXQgdHggPSAtb2Zmc2V0O1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHR4IC09IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBsZXQgdHkgPSAwO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZVxuICAgICAgICA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApXG4gICAgICAgIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgJHNsaWRlRWxcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5LFxuICAgICAgICB9KVxuICAgICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBFZmZlY3RGYWRlID0ge1xuICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICBwYXJhbXM6IHtcbiAgICBmYWRlRWZmZWN0OiB7XG4gICAgICBjcm9zc0ZhZGU6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBGYWRlLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IEZhZGUuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWZhZGVgKTtcbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBDdWJlID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICAkZWwsICR3cmFwcGVyRWwsIHNsaWRlcywgd2lkdGg6IHN3aXBlcldpZHRoLCBoZWlnaHQ6IHN3aXBlckhlaWdodCwgcnRsVHJhbnNsYXRlOiBydGwsIHNpemU6IHN3aXBlclNpemUsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGxldCB3cmFwcGVyUm90YXRlID0gMDtcbiAgICBsZXQgJGN1YmVTaGFkb3dFbDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgICAgJGN1YmVTaGFkb3dFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlcldpZHRofXB4YCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBpO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfVxuICAgICAgbGV0IHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7XG4gICAgICBsZXQgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyAocm91bmQgKiA0ICogc3dpcGVyU2l6ZSk7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAoMyAqIHN3aXBlclNpemUpICsgKHN3aXBlclNpemUgKiA0ICogcm91bmQpO1xuICAgICAgfVxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWCgke2lzSG9yaXpvbnRhbCA/IDAgOiAtc2xpZGVBbmdsZX1kZWcpIHJvdGF0ZVkoJHtpc0hvcml6b250YWwgPyBzbGlkZUFuZ2xlIDogMH1kZWcpIHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsICR7dHp9cHgpYDtcbiAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgd3JhcHBlclJvdGF0ZSA9IChzbGlkZUluZGV4ICogOTApICsgKHByb2dyZXNzICogOTApO1xuICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gKC1zbGlkZUluZGV4ICogOTApIC0gKHByb2dyZXNzICogOTApO1xuICAgICAgfVxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7KHN3aXBlcldpZHRoIC8gMikgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hhZG93QW5nbGUgPSBNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAtIChNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTApO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMS41IC0gKFxuICAgICAgICAgIChNYXRoLnNpbigoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgICArIChNYXRoLmNvcygoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICBjb25zdCBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShgc2NhbGUzZCgke3NjYWxlMX0sIDEsICR7c2NhbGUyfSkgdHJhbnNsYXRlM2QoMHB4LCAkeyhzd2lwZXJIZWlnaHQgLyAyKSArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHpGYWN0b3IgPSAoQnJvd3Nlci5pc1NhZmFyaSB8fCBCcm93c2VyLmlzVWlXZWJWaWV3KSA/ICgtc3dpcGVyU2l6ZSAvIDIpIDogMDtcbiAgICAkd3JhcHBlckVsXG4gICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZX1kZWcpIHJvdGF0ZVkoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDB9ZGVnKWApO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgc2xpZGVzIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEVmZmVjdEN1YmUgPSB7XG4gIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gIHBhcmFtczoge1xuICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICBzaGFkb3dTY2FsZTogMC45NCxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgIHNldFRyYW5zbGF0ZTogQ3ViZS5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDdWJlLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31jdWJlYCk7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBGbGlwID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgcnRsVHJhbnNsYXRlOiBydGwgfSA9IHN3aXBlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xuICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgIGxldCByb3RhdGVYID0gMDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBsZXQgdHkgPSAwO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0IHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG4gICAgICAkc2xpZGVFbFxuICAgICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKWApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMsIGFjdGl2ZUluZGV4LCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAvLyBpZiAoISQodGhpcykuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEVmZmVjdEZsaXAgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmxpcCcsXG4gIHBhcmFtczoge1xuICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIGxpbWl0Um90YXRpb246IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEZsaXAuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogRmxpcC5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmxpcGApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBDb3ZlcmZsb3cgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCwgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsIHNsaWRlcywgJHdyYXBwZXJFbCwgc2xpZGVzU2l6ZXNHcmlkLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgY29uc3QgY2VudGVyID0gaXNIb3Jpem9udGFsID8gLXRyYW5zZm9ybSArIChzd2lwZXJXaWR0aCAvIDIpIDogLXRyYW5zZm9ybSArIChzd2lwZXJIZWlnaHQgLyAyKTtcbiAgICBjb25zdCByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9ICgoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSAoc2xpZGVTaXplIC8gMikpIC8gc2xpZGVTaXplKSAqIHBhcmFtcy5tb2RpZmllcjtcblxuICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIGxldCByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAvLyB2YXIgcm90YXRlWiA9IDBcbiAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoO1xuICAgICAgLy8gQWxsb3cgcGVyY2VudGFnZSB0byBtYWtlIGEgcmVsYXRpdmUgc3RyZXRjaCBmb3IgcmVzcG9uc2l2ZSBzbGlkZXJzXG4gICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICBzdHJldGNoID0gKChwYXJzZUZsb2F0KHBhcmFtcy5zdHJldGNoKSAvIDEwMCkgKiBzbGlkZVNpemUpO1xuICAgICAgfVxuICAgICAgbGV0IHRyYW5zbGF0ZVkgPSBpc0hvcml6b250YWwgPyAwIDogc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKSA6IDA7XG5cbiAgICAgIGxldCBzY2FsZSA9IDEgLSAoMSAtIHBhcmFtcy5zY2FsZSkgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgLy8gRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXNcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgc2NhbGUgPSAwO1xuXG4gICAgICBjb25zdCBzbGlkZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsJHt0cmFuc2xhdGVZfXB4LCR7dHJhbnNsYXRlWn1weCkgIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKSBzY2FsZSgke3NjYWxlfSlgO1xuXG4gICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oc2xpZGVUcmFuc2Zvcm0pO1xuICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCAkc2hhZG93QmVmb3JlRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0ICRzaGFkb3dBZnRlckVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dCZWZvcmVFbCA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCd9XCI+PC9kaXY+YCk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dCZWZvcmVFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbSd9XCI+PC9kaXY+YCk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dBZnRlckVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCkgJHNoYWRvd0JlZm9yZUVsWzBdLnN0eWxlLm9wYWNpdHkgPSBvZmZzZXRNdWx0aXBsaWVyID4gMCA/IG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoKSAkc2hhZG93QWZ0ZXJFbFswXS5zdHlsZS5vcGFjaXR5ID0gKC1vZmZzZXRNdWx0aXBsaWVyKSA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvcnJlY3QgcGVyc3BlY3RpdmUgZm9yIElFMTBcbiAgICBpZiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSB7XG4gICAgICBjb25zdCB3cyA9ICR3cmFwcGVyRWxbMF0uc3R5bGU7XG4gICAgICB3cy5wZXJzcGVjdGl2ZU9yaWdpbiA9IGAke2NlbnRlcn1weCA1MCVgO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnNsaWRlc1xuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pXG4gICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSxcbn07XG5cbnZhciBFZmZlY3RDb3ZlcmZsb3cgPSB7XG4gIG5hbWU6ICdlZmZlY3QtY292ZXJmbG93JyxcbiAgcGFyYW1zOiB7XG4gICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICByb3RhdGU6IDUwLFxuICAgICAgc3RyZXRjaDogMCxcbiAgICAgIGRlcHRoOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IENvdmVyZmxvdy5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDb3ZlcmZsb3cuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuXG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31jb3ZlcmZsb3dgKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG5cbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBUaHVtYnMgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHRodW1iczogdGh1bWJzUGFyYW1zIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IFN3aXBlckNsYXNzID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKFV0aWxzLmV4dGVuZCh7fSwgdGh1bWJzUGFyYW1zLnN3aXBlciwge1xuICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgfSkpO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgc3dpcGVyLnRodW1icy5vblRodW1iQ2xpY2spO1xuICB9LFxuICBvblRodW1iQ2xpY2soKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgIGNvbnN0IGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgY29uc3QgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICBpZiAoY2xpY2tlZFNsaWRlICYmICQoY2xpY2tlZFNsaWRlKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBzbGlkZVRvSW5kZXg7XG4gICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc2xpZGVUb0luZGV4ID0gcGFyc2VJbnQoJCh0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgY3VycmVudEluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgfVxuICAgICAgY29uc3QgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVUb0luZGV4fVwiXWApLmVxKDApLmluZGV4KCk7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkubmV4dEFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZVRvSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIGlmICh0eXBlb2YgcHJldkluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O1xuICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtcbiAgICAgIGVsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O1xuICAgICAgZWxzZSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7XG4gICAgfVxuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH0sXG4gIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nXG4gICAgICA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpXG4gICAgICA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcbiAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgIGxldCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICBsZXQgbmV3VGh1bWJzSW5kZXg7XG4gICAgICBsZXQgZGlyZWN0aW9uO1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHRodW1ic1N3aXBlci5fY2xpZW50TGVmdCA9IHRodW1ic1N3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuICAgICAgICBjb25zdCBwcmV2VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzXG4gICAgICAgICAgLmVxKGN1cnJlbnRUaHVtYnNJbmRleClcbiAgICAgICAgICAucHJldkFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4fVwiXWApLmVxKDApXG4gICAgICAgICAgLmluZGV4KCk7XG4gICAgICAgIGNvbnN0IG5leHRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXNcbiAgICAgICAgICAuZXEoY3VycmVudFRodW1ic0luZGV4KVxuICAgICAgICAgIC5uZXh0QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXh9XCJdYCkuZXEoMClcbiAgICAgICAgICAuaW5kZXgoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBjdXJyZW50VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA8IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfVxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlVG8obmV3VGh1bWJzSW5kZXgsIGluaXRpYWwgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICBsZXQgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgY29uc3QgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cblxuICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuXG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8ICh0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcbnZhciBUaHVtYnMkMSA9IHtcbiAgbmFtZTogJ3RodW1icycsXG4gIHBhcmFtczoge1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItdGh1bWJzJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICB0aHVtYnM6IHtcbiAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICBpbml0OiBUaHVtYnMuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZTogVGh1bWJzLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uVGh1bWJDbGljazogVGh1bWJzLm9uVGh1bWJDbGljay5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgY29uc3QgeyB0aHVtYnMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy5pbml0KCk7XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSh0cnVlKTtcbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgJiYgdGh1bWJzU3dpcGVyKSB7XG4gICAgICAgIHRodW1ic1N3aXBlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbi8vIFN3aXBlciBDbGFzc1xuXG5jb25zdCBjb21wb25lbnRzID0gW1xuICBEZXZpY2UkMSxcbiAgU3VwcG9ydCQxLFxuICBCcm93c2VyJDEsXG4gIFJlc2l6ZSxcbiAgT2JzZXJ2ZXIkMSxcbiAgVmlydHVhbCQxLFxuICBLZXlib2FyZCQxLFxuICBNb3VzZXdoZWVsJDEsXG4gIE5hdmlnYXRpb24kMSxcbiAgUGFnaW5hdGlvbiQxLFxuICBTY3JvbGxiYXIkMSxcbiAgUGFyYWxsYXgkMSxcbiAgWm9vbSQxLFxuICBMYXp5JDEsXG4gIENvbnRyb2xsZXIkMSxcbiAgQTExeSxcbiAgSGlzdG9yeSQxLFxuICBIYXNoTmF2aWdhdGlvbiQxLFxuICBBdXRvcGxheSQxLFxuICBFZmZlY3RGYWRlLFxuICBFZmZlY3RDdWJlLFxuICBFZmZlY3RGbGlwLFxuICBFZmZlY3RDb3ZlcmZsb3csXG4gIFRodW1icyQxXG5dO1xuXG5pZiAodHlwZW9mIFN3aXBlci51c2UgPT09ICd1bmRlZmluZWQnKSB7XG4gIFN3aXBlci51c2UgPSBTd2lwZXIuQ2xhc3MudXNlO1xuICBTd2lwZXIuaW5zdGFsbE1vZHVsZSA9IFN3aXBlci5DbGFzcy5pbnN0YWxsTW9kdWxlO1xufVxuXG5Td2lwZXIudXNlKGNvbXBvbmVudHMpO1xuXG5leHBvcnQgZGVmYXVsdCBTd2lwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2lwZXIuZXNtLmJ1bmRsZS5qcy5tYXBcbiIsImV4cG9ydCBjbGFzcyBBcGkge1xyXG4gIHNlbmREYXRhKGRhdGEsIHVybCkge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgYm9keTogZGF0YSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRm9ybSB7XHJcbiAgY29uc3RydWN0b3IoZm9ybSwgY2FsbGJhY2spIHtcclxuICAgIHRoaXMuZm9ybSA9IGZvcm07XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnNTdWJtaXQoKTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVyc1N1Ym1pdCgpIHtcclxuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZm9ybS5jaGVja1ZhbGlkaXR5KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMuZm9ybSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgU2Nyb2xsIHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50cykge1xyXG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xyXG5cclxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvLyDQvNC10YLQvtC0INCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINGN0LvQtdC80LXQvdGCINC00L4g0LrQvtGC0L7RgNCz0L4g0L3Rg9C20L3QviDQv9C10YDQtdC80LXRgdGC0LjRgtGM0YHRj1xyXG4gIF9nZXRUYXJnZXQoZWxlbSkge1xyXG4gICAgY29uc3QgaWQgPSBlbGVtLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgaWYgKGlkICYmIGlkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g0LzQtdGC0L7QtCDQv9C70LDQstC90L4g0YHQutGA0L7Qu9C40YIg0LTQviDRg9C60LDQt9Cw0L3QvdC+0LPQviDRjdC70LXQvNC10L3RgtCwXHJcbiAgX21vdmVTbW9vdGhseSh0YXJnZXQpIHtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgdGFyZ2V0LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuX21vdmVTbW9vdGhseSh0aGlzLl9nZXRUYXJnZXQoZWxlbSkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuaW1wb3J0IFN3aXBlciBmcm9tICdzd2lwZXInO1xyXG5pbXBvcnQgVG9iaWkgZnJvbSAndG9iaWknO1xyXG5pbXBvcnQgeyBmb3JtYXREYXRlRnVsbCB9IGZyb20gJy4vanMvdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBBcGkgfSBmcm9tICcuL2pzL0FwaS5qcyc7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuL2pzL0Zvcm0uanMnO1xyXG5pbXBvcnQgeyBTY3JvbGwgfSBmcm9tICcuL2pzL1Njcm9sbC5qcyc7XHJcblxyXG52YXIgc3BlY2lhbHRpZXNTd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lcicsIHtcclxuICBwYWdpbmF0aW9uOiB7XHJcbiAgICBlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXHJcbiAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgfSxcclxuICBhdXRvcGxheToge1xyXG4gICAgZGVsYXk6IDI1MDAsXHJcbiAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcclxuICB9LFxyXG4gIGxvb3A6IHRydWUsXHJcbn0pO1xyXG5cclxudmFyIG1lbnVTd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lci1tZW51Jywge1xyXG4gIHBhZ2luYXRpb246IHtcclxuICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uLW1lbnUnLFxyXG4gICAgY2xpY2thYmxlOiB0cnVlLFxyXG5cclxuICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcclxuICAgICAgY29uc3QgbWVudUFyciA9IEFycmF5LmZyb20oXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2NvbnRlbnQnKVxyXG4gICAgICApLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLmRhdGFzZXQubmFtZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJ1wiPicgKyBtZW51QXJyW2luZGV4XSArICc8L3NwYW4+JztcclxuICAgIH0sXHJcbiAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLW1lbnUtYnVsbGV0JyxcclxuICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbWVudS1idWxsZXQtYWN0aXZlJyxcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IHRvYmlpID0gbmV3IFRvYmlpKHtcclxuICBjYXB0aW9uczogZmFsc2UsXHJcbn0pO1xyXG5cclxuY29uc3QgZGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib29raW5nX19pbnB1dC1kYXRlJyk7XHJcbmNvbnN0IGJvb2tpbmdGb3JtRWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib29raW5nX19mb3JtJyk7XHJcbmNvbnN0IGNvbnRhY3RzRm9ybUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFjdHNfX2Zvcm0nKTtcclxuXHJcbmZ1bmN0aW9uIHN1Ym1pdEZvcm0oZm9ybSkge1xyXG4gIGNvbnN0IGZvcm1FcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNlcnJvci0ke2Zvcm0uaWR9YCk7XHJcbiAgY29uc3QgZm9ybU1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjbWVzc2FnZS0ke2Zvcm0uaWR9YCk7XHJcbiAgZm9ybUVycm9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgYXBpXHJcbiAgICAuc2VuZERhdGEobmV3IEZvcm1EYXRhKGZvcm0pLCBmb3JtLmFjdGlvbilcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICBmb3JtTWVzc2FnZS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGZvcm1FcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKCk7XHJcbmNvbnN0IGJvb2tpbmdGb3JtID0gbmV3IEZvcm0oYm9va2luZ0Zvcm1FbGVtLCBzdWJtaXRGb3JtKTtcclxuY29uc3QgY29udGFjdHNGb3JtID0gbmV3IEZvcm0oY29udGFjdHNGb3JtRWxlbSwgc3VibWl0Rm9ybSk7XHJcblxyXG5kYXRlLnNldEF0dHJpYnV0ZSgnbWluJywgZm9ybWF0RGF0ZUZ1bGwoKSk7XHJcblxyXG5jb25zdCBzbW9vdGhMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl49XCIjXCJdJyk7XHJcbmNvbnN0IHNjcm9sbCA9IG5ldyBTY3JvbGwoc21vb3RoTGlua3MpO1xyXG4iLCIvLyDRhNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0YPRjiDQtNCw0YLRgyDQsiDRhNC+0YDQvNCw0YLQtSDQs9Cz0LPQsy3QvNC8LdC00LRcclxuZnVuY3Rpb24gZm9ybWF0RGF0ZUZ1bGwoKSB7XHJcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YDtcclxufVxyXG5cclxuZXhwb3J0IHsgZm9ybWF0RGF0ZUZ1bGwgfTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==